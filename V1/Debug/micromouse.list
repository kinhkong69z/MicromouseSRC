
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b58  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08007c68  08007c68  00008c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008014  08008014  00009014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008018  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200001d8  080081f0  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  080081f0  0000a6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b105  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003648  00000000  00000000  00025306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c3ee  00000000  00000000  0002894e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00034d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5d  00000000  00000000  00035fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b243  00000000  00000000  00036e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe07  00000000  00000000  00052070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094b96  00000000  00000000  00071e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106a0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045e4  00000000  00000000  00106a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  0010b034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c50 	.word	0x08007c50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08007c50 	.word	0x08007c50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <Encoder_Init>:
uint16_t curr_en_cnt_right = 0;
uint16_t prev_en_cnt_right = 0;
float speed_right = 0;


void Encoder_Init (Encoder *encoder, TIM_HandleTypeDef *en_tim) {
 800111c:	b508      	push	{r3, lr}
 800111e:	4603      	mov	r3, r0
 8001120:	4608      	mov	r0, r1
	encoder->EN_TIM = en_tim;
 8001122:	6019      	str	r1, [r3, #0]
	HAL_TIM_Encoder_Start(en_tim, TIM_CHANNEL_ALL);
 8001124:	213c      	movs	r1, #60	@ 0x3c
 8001126:	f003 fed9 	bl	8004edc <HAL_TIM_Encoder_Start>
}
 800112a:	bd08      	pop	{r3, pc}

0800112c <reset_en>:

void reset_en() {
	encoder_cnt_left = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	4a03      	ldr	r2, [pc, #12]	@ (800113c <reset_en+0x10>)
 8001130:	6013      	str	r3, [r2, #0]
//	curr_en_cnt_left = 0;
//	prev_en_cnt_left = 0;

	encoder_cnt_right = 0;
 8001132:	4a03      	ldr	r2, [pc, #12]	@ (8001140 <reset_en+0x14>)
 8001134:	6013      	str	r3, [r2, #0]
//	curr_en_cnt_right = 0;
//	prev_en_cnt_right = 0;

	prev_distance = 0;
 8001136:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <reset_en+0x18>)
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	4770      	bx	lr
 800113c:	20000208 	.word	0x20000208
 8001140:	200001fc 	.word	0x200001fc
 8001144:	2000020c 	.word	0x2000020c

08001148 <left_pulse_per_sec>:
	encoder_cnt_right += en_increase;
	prev_en_cnt_right = curr_en_cnt_right;
	speed_right = right_pulse_per_sec(0.01, en_increase);
}

float left_pulse_per_sec(float delta_time, int16_t count) { // delta_time is micro second
 8001148:	b508      	push	{r3, lr}

	return (float) (count * 100);
 800114a:	2064      	movs	r0, #100	@ 0x64
 800114c:	fb01 f000 	mul.w	r0, r1, r0
 8001150:	f7ff fda4 	bl	8000c9c <__aeabi_i2f>
}
 8001154:	bd08      	pop	{r3, pc}
	...

08001158 <read_en_left>:
void read_en_left(Encoder *encoder) {
 8001158:	b510      	push	{r4, lr}
	curr_en_cnt_left = __HAL_TIM_GET_COUNTER(encoder->EN_TIM);
 800115a:	6803      	ldr	r3, [r0, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001160:	b29b      	uxth	r3, r3
 8001162:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <read_en_left+0x2c>)
 8001164:	8013      	strh	r3, [r2, #0]
	int16_t en_increase = (int16_t) -(curr_en_cnt_left - prev_en_cnt_left);
 8001166:	4808      	ldr	r0, [pc, #32]	@ (8001188 <read_en_left+0x30>)
 8001168:	8801      	ldrh	r1, [r0, #0]
 800116a:	1ac9      	subs	r1, r1, r3
 800116c:	b209      	sxth	r1, r1
	encoder_cnt_left += en_increase;
 800116e:	4c07      	ldr	r4, [pc, #28]	@ (800118c <read_en_left+0x34>)
 8001170:	6822      	ldr	r2, [r4, #0]
 8001172:	440a      	add	r2, r1
 8001174:	6022      	str	r2, [r4, #0]
	prev_en_cnt_left = curr_en_cnt_left;
 8001176:	8003      	strh	r3, [r0, #0]
	speed_left = left_pulse_per_sec(0.01, en_increase);
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <read_en_left+0x38>)
 800117a:	f7ff ffe5 	bl	8001148 <left_pulse_per_sec>
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <read_en_left+0x3c>)
 8001180:	6018      	str	r0, [r3, #0]
}
 8001182:	bd10      	pop	{r4, pc}
 8001184:	20000206 	.word	0x20000206
 8001188:	20000204 	.word	0x20000204
 800118c:	20000208 	.word	0x20000208
 8001190:	3c23d70a 	.word	0x3c23d70a
 8001194:	20000200 	.word	0x20000200

08001198 <right_pulse_per_sec>:

float right_pulse_per_sec(float delta_time, int16_t count) {
 8001198:	b508      	push	{r3, lr}

	return (float) (count * 100);
 800119a:	2064      	movs	r0, #100	@ 0x64
 800119c:	fb01 f000 	mul.w	r0, r1, r0
 80011a0:	f7ff fd7c 	bl	8000c9c <__aeabi_i2f>
}
 80011a4:	bd08      	pop	{r3, pc}
	...

080011a8 <read_en_right>:
void read_en_right(Encoder *encoder) {
 80011a8:	b510      	push	{r4, lr}
	curr_en_cnt_right = __HAL_TIM_GET_COUNTER(encoder->EN_TIM);
 80011aa:	6803      	ldr	r3, [r0, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4a08      	ldr	r2, [pc, #32]	@ (80011d4 <read_en_right+0x2c>)
 80011b4:	8013      	strh	r3, [r2, #0]
	int16_t en_increase = (int16_t) -(curr_en_cnt_right - prev_en_cnt_right);
 80011b6:	4808      	ldr	r0, [pc, #32]	@ (80011d8 <read_en_right+0x30>)
 80011b8:	8801      	ldrh	r1, [r0, #0]
 80011ba:	1ac9      	subs	r1, r1, r3
 80011bc:	b209      	sxth	r1, r1
	encoder_cnt_right += en_increase;
 80011be:	4c07      	ldr	r4, [pc, #28]	@ (80011dc <read_en_right+0x34>)
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	440a      	add	r2, r1
 80011c4:	6022      	str	r2, [r4, #0]
	prev_en_cnt_right = curr_en_cnt_right;
 80011c6:	8003      	strh	r3, [r0, #0]
	speed_right = right_pulse_per_sec(0.01, en_increase);
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <read_en_right+0x38>)
 80011ca:	f7ff ffe5 	bl	8001198 <right_pulse_per_sec>
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <read_en_right+0x3c>)
 80011d0:	6018      	str	r0, [r3, #0]
}
 80011d2:	bd10      	pop	{r4, pc}
 80011d4:	200001fa 	.word	0x200001fa
 80011d8:	200001f8 	.word	0x200001f8
 80011dc:	200001fc 	.word	0x200001fc
 80011e0:	3c23d70a 	.word	0x3c23d70a
 80011e4:	200001f4 	.word	0x200001f4

080011e8 <mode>:

uint16_t SPEED = 200;
uint8_t BTN_STATE1 = 0;
uint8_t BTN_STATE2 = 0;

void mode() {
 80011e8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f0:	4817      	ldr	r0, [pc, #92]	@ (8001250 <mode+0x68>)
 80011f2:	f002 f8c0 	bl	8003376 <HAL_GPIO_WritePin>
	while(BTN_STATE1 < 1) {
 80011f6:	e005      	b.n	8001204 <mode+0x1c>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) {
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			wall_front_calibration();
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) {
 80011f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011fc:	4815      	ldr	r0, [pc, #84]	@ (8001254 <mode+0x6c>)
 80011fe:	f002 f8b3 	bl	8003368 <HAL_GPIO_ReadPin>
 8001202:	b9b8      	cbnz	r0, 8001234 <mode+0x4c>
	while(BTN_STATE1 < 1) {
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <mode+0x70>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b9c3      	cbnz	r3, 800123c <mode+0x54>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) {
 800120a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800120e:	4811      	ldr	r0, [pc, #68]	@ (8001254 <mode+0x6c>)
 8001210:	f002 f8aa 	bl	8003368 <HAL_GPIO_ReadPin>
 8001214:	2800      	cmp	r0, #0
 8001216:	d0ef      	beq.n	80011f8 <mode+0x10>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001218:	4c0d      	ldr	r4, [pc, #52]	@ (8001250 <mode+0x68>)
 800121a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800121e:	4620      	mov	r0, r4
 8001220:	f002 f8af 	bl	8003382 <HAL_GPIO_TogglePin>
			wall_front_calibration();
 8001224:	f000 fb54 	bl	80018d0 <wall_front_calibration>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001228:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800122c:	4620      	mov	r0, r4
 800122e:	f002 f8a8 	bl	8003382 <HAL_GPIO_TogglePin>
 8001232:	e7e1      	b.n	80011f8 <mode+0x10>
			BTN_STATE1 = 1;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <mode+0x70>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e7e3      	b.n	8001204 <mode+0x1c>
		}
	}
	delay_ms(2000);
 800123c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001240:	f000 fba0 	bl	8001984 <delay_ms>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001244:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001248:	4801      	ldr	r0, [pc, #4]	@ (8001250 <mode+0x68>)
 800124a:	f002 f89a 	bl	8003382 <HAL_GPIO_TogglePin>
}
 800124e:	bd10      	pop	{r4, pc}
 8001250:	40011000 	.word	0x40011000
 8001254:	40010c00 	.word	0x40010c00
 8001258:	20000218 	.word	0x20000218

0800125c <Motor_Init>:
uint32_t prev_time_pid_forward = 0;
uint32_t prev_time_pid_rotation = 0;
int32_t debug_pwm = 0;

void Motor_Init(Motor *motor, TIM_HandleTypeDef *tim1, TIM_HandleTypeDef *tim2,
		uint16_t channel1, uint16_t channel2) {
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4684      	mov	ip, r0
 8001260:	4608      	mov	r0, r1
 8001262:	4614      	mov	r4, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	motor->M_TIM1 = tim1;
 800126a:	f8cc 0000 	str.w	r0, [ip]
	motor->M_TIM2 = tim2;
 800126e:	f8cc 2004 	str.w	r2, [ip, #4]
	motor->m_channel1 = channel1;
 8001272:	f8ac 3008 	strh.w	r3, [ip, #8]
	motor->m_channel2 = channel2;
 8001276:	f8ac 500a 	strh.w	r5, [ip, #10]

	HAL_TIM_PWM_Start(tim1, channel1);
 800127a:	f003 fdc1 	bl	8004e00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(tim2, channel2);
 800127e:	4629      	mov	r1, r5
 8001280:	4620      	mov	r0, r4
 8001282:	f003 fdbd 	bl	8004e00 <HAL_TIM_PWM_Start>
}
 8001286:	bd38      	pop	{r3, r4, r5, pc}

08001288 <Set_Motor_speed>:

void Set_Motor_speed(Motor *motor, int16_t speed) {
	if (speed > 0) {
 8001288:	2900      	cmp	r1, #0
 800128a:	dd2e      	ble.n	80012ea <Set_Motor_speed+0x62>
		__HAL_TIM_SET_COMPARE(motor->M_TIM1, motor->m_channel1, 0);
 800128c:	8903      	ldrh	r3, [r0, #8]
 800128e:	b94b      	cbnz	r3, 80012a4 <Set_Motor_speed+0x1c>
 8001290:	6803      	ldr	r3, [r0, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, speed);
 8001298:	8943      	ldrh	r3, [r0, #10]
 800129a:	b9b3      	cbnz	r3, 80012ca <Set_Motor_speed+0x42>
 800129c:	6843      	ldr	r3, [r0, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6359      	str	r1, [r3, #52]	@ 0x34
 80012a2:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(motor->M_TIM1, motor->m_channel1, 0);
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d006      	beq.n	80012b6 <Set_Motor_speed+0x2e>
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d009      	beq.n	80012c0 <Set_Motor_speed+0x38>
 80012ac:	6803      	ldr	r3, [r0, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2200      	movs	r2, #0
 80012b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b4:	e7f0      	b.n	8001298 <Set_Motor_speed+0x10>
 80012b6:	6803      	ldr	r3, [r0, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80012be:	e7eb      	b.n	8001298 <Set_Motor_speed+0x10>
 80012c0:	6803      	ldr	r3, [r0, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012c8:	e7e6      	b.n	8001298 <Set_Motor_speed+0x10>
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, speed);
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d005      	beq.n	80012da <Set_Motor_speed+0x52>
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d007      	beq.n	80012e2 <Set_Motor_speed+0x5a>
 80012d2:	6843      	ldr	r3, [r0, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012d8:	4770      	bx	lr
 80012da:	6843      	ldr	r3, [r0, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6399      	str	r1, [r3, #56]	@ 0x38
 80012e0:	4770      	bx	lr
 80012e2:	6843      	ldr	r3, [r0, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80012e8:	4770      	bx	lr
	} else {
		__HAL_TIM_SET_COMPARE(motor->M_TIM1, motor->m_channel1, -speed);
 80012ea:	8903      	ldrh	r3, [r0, #8]
 80012ec:	b953      	cbnz	r3, 8001304 <Set_Motor_speed+0x7c>
 80012ee:	6803      	ldr	r3, [r0, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4249      	negs	r1, r1
 80012f4:	6359      	str	r1, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, 0);
 80012f6:	8943      	ldrh	r3, [r0, #10]
 80012f8:	b9bb      	cbnz	r3, 800132a <Set_Motor_speed+0xa2>
 80012fa:	6843      	ldr	r3, [r0, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
 8001302:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(motor->M_TIM1, motor->m_channel1, -speed);
 8001304:	2b04      	cmp	r3, #4
 8001306:	d006      	beq.n	8001316 <Set_Motor_speed+0x8e>
 8001308:	2b08      	cmp	r3, #8
 800130a:	d009      	beq.n	8001320 <Set_Motor_speed+0x98>
 800130c:	6803      	ldr	r3, [r0, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4249      	negs	r1, r1
 8001312:	6419      	str	r1, [r3, #64]	@ 0x40
 8001314:	e7ef      	b.n	80012f6 <Set_Motor_speed+0x6e>
 8001316:	6803      	ldr	r3, [r0, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4249      	negs	r1, r1
 800131c:	6399      	str	r1, [r3, #56]	@ 0x38
 800131e:	e7ea      	b.n	80012f6 <Set_Motor_speed+0x6e>
 8001320:	6803      	ldr	r3, [r0, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4249      	negs	r1, r1
 8001326:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8001328:	e7e5      	b.n	80012f6 <Set_Motor_speed+0x6e>
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, 0);
 800132a:	2b04      	cmp	r3, #4
 800132c:	d006      	beq.n	800133c <Set_Motor_speed+0xb4>
 800132e:	2b08      	cmp	r3, #8
 8001330:	d009      	beq.n	8001346 <Set_Motor_speed+0xbe>
 8001332:	6843      	ldr	r3, [r0, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2200      	movs	r2, #0
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 800133a:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, 0);
 800133c:	6843      	ldr	r3, [r0, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	639a      	str	r2, [r3, #56]	@ 0x38
 8001344:	4770      	bx	lr
 8001346:	6843      	ldr	r3, [r0, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800134e:	4770      	bx	lr

08001350 <Motor_stop>:
//	delay_ms(20);
	printf("%f\n", angle);
	mouse_state = 2;
}

void Motor_stop() {
 8001350:	b508      	push	{r3, lr}
	Set_Motor_speed(&motor_right, 0);
 8001352:	2100      	movs	r1, #0
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <Motor_stop+0x14>)
 8001356:	f7ff ff97 	bl	8001288 <Set_Motor_speed>
	Set_Motor_speed(&motor_left, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <Motor_stop+0x18>)
 800135e:	f7ff ff93 	bl	8001288 <Set_Motor_speed>
}
 8001362:	bd08      	pop	{r3, pc}
 8001364:	2000021c 	.word	0x2000021c
 8001368:	20000228 	.word	0x20000228

0800136c <Turn_left90>:
void Turn_left90() {
 800136c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	angle = 0;
 8001370:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <Turn_left90+0xec>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
	uint32_t prev_time = micros();
 8001376:	f000 fae7 	bl	8001948 <micros>
 800137a:	4604      	mov	r4, r0
	uint32_t curt = Millis;
 800137c:	4b37      	ldr	r3, [pc, #220]	@ (800145c <Turn_left90+0xf0>)
 800137e:	681f      	ldr	r7, [r3, #0]
	PID_reset(&pid_forward_right);
 8001380:	4837      	ldr	r0, [pc, #220]	@ (8001460 <Turn_left90+0xf4>)
 8001382:	f000 f95f 	bl	8001644 <PID_reset>
	PID_reset(&pid_forward_left);
 8001386:	4837      	ldr	r0, [pc, #220]	@ (8001464 <Turn_left90+0xf8>)
 8001388:	f000 f95c 	bl	8001644 <PID_reset>
	while (fabs(80 - angle) > 4) {
 800138c:	e047      	b.n	800141e <Turn_left90+0xb2>
		MPU6050_getAngle(MPU6050.I2Cx, micros() - prev_time);
 800138e:	4b36      	ldr	r3, [pc, #216]	@ (8001468 <Turn_left90+0xfc>)
 8001390:	681d      	ldr	r5, [r3, #0]
 8001392:	f000 fad9 	bl	8001948 <micros>
 8001396:	1b01      	subs	r1, r0, r4
 8001398:	4628      	mov	r0, r5
 800139a:	f000 ff95 	bl	80022c8 <MPU6050_getAngle>
		int16_t pwm_target = 25 * (80 - angle);
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <Turn_left90+0xec>)
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	4832      	ldr	r0, [pc, #200]	@ (800146c <Turn_left90+0x100>)
 80013a4:	f7ff fbc4 	bl	8000b30 <__aeabi_fsub>
 80013a8:	4931      	ldr	r1, [pc, #196]	@ (8001470 <Turn_left90+0x104>)
 80013aa:	f7ff fccb 	bl	8000d44 <__aeabi_fmul>
 80013ae:	f7ff fe8f 	bl	80010d0 <__aeabi_f2iz>
 80013b2:	b205      	sxth	r5, r0
		int16_t left_pwm = PID_calc(&pid_forward_left, -pwm_target, speed_left,
 80013b4:	4268      	negs	r0, r5
 80013b6:	f7ff fc71 	bl	8000c9c <__aeabi_i2f>
 80013ba:	4606      	mov	r6, r0
 80013bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <Turn_left90+0x108>)
 80013be:	f8d3 8000 	ldr.w	r8, [r3]
				micros() - prev_time);
 80013c2:	f000 fac1 	bl	8001948 <micros>
		int16_t left_pwm = PID_calc(&pid_forward_left, -pwm_target, speed_left,
 80013c6:	1b03      	subs	r3, r0, r4
 80013c8:	4642      	mov	r2, r8
 80013ca:	4631      	mov	r1, r6
 80013cc:	4825      	ldr	r0, [pc, #148]	@ (8001464 <Turn_left90+0xf8>)
 80013ce:	f000 f8f7 	bl	80015c0 <PID_calc>
 80013d2:	f7ff fe7d 	bl	80010d0 <__aeabi_f2iz>
 80013d6:	b206      	sxth	r6, r0
		int16_t right_pwm = PID_calc(&pid_forward_right, pwm_target, speed_right,
 80013d8:	4628      	mov	r0, r5
 80013da:	f7ff fc5f 	bl	8000c9c <__aeabi_i2f>
 80013de:	4605      	mov	r5, r0
 80013e0:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <Turn_left90+0x10c>)
 80013e2:	f8d3 8000 	ldr.w	r8, [r3]
				micros() - prev_time);
 80013e6:	f000 faaf 	bl	8001948 <micros>
		int16_t right_pwm = PID_calc(&pid_forward_right, pwm_target, speed_right,
 80013ea:	1b03      	subs	r3, r0, r4
 80013ec:	4642      	mov	r2, r8
 80013ee:	4629      	mov	r1, r5
 80013f0:	481b      	ldr	r0, [pc, #108]	@ (8001460 <Turn_left90+0xf4>)
 80013f2:	f000 f8e5 	bl	80015c0 <PID_calc>
 80013f6:	f7ff fe6b 	bl	80010d0 <__aeabi_f2iz>
 80013fa:	b205      	sxth	r5, r0
		prev_time = micros();
 80013fc:	f000 faa4 	bl	8001948 <micros>
 8001400:	4604      	mov	r4, r0
		Set_Motor_speed(&motor_left, left_pwm);
 8001402:	4631      	mov	r1, r6
 8001404:	481d      	ldr	r0, [pc, #116]	@ (800147c <Turn_left90+0x110>)
 8001406:	f7ff ff3f 	bl	8001288 <Set_Motor_speed>
		Set_Motor_speed(&motor_right, right_pwm);
 800140a:	4629      	mov	r1, r5
 800140c:	481c      	ldr	r0, [pc, #112]	@ (8001480 <Turn_left90+0x114>)
 800140e:	f7ff ff3b 	bl	8001288 <Set_Motor_speed>
		elapseMillis(2, curt);
 8001412:	4639      	mov	r1, r7
 8001414:	2002      	movs	r0, #2
 8001416:	f000 face 	bl	80019b6 <elapseMillis>
		curt = Millis;
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <Turn_left90+0xf0>)
 800141c:	681f      	ldr	r7, [r3, #0]
	while (fabs(80 - angle) > 4) {
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <Turn_left90+0xec>)
 8001420:	681d      	ldr	r5, [r3, #0]
 8001422:	4629      	mov	r1, r5
 8001424:	4811      	ldr	r0, [pc, #68]	@ (800146c <Turn_left90+0x100>)
 8001426:	f7ff fb83 	bl	8000b30 <__aeabi_fsub>
 800142a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800142e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001432:	f7ff fe43 	bl	80010bc <__aeabi_fcmpgt>
 8001436:	2800      	cmp	r0, #0
 8001438:	d1a9      	bne.n	800138e <Turn_left90+0x22>
	printf("%f\n", angle);
 800143a:	4628      	mov	r0, r5
 800143c:	f7fe fff4 	bl	8000428 <__aeabi_f2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	480f      	ldr	r0, [pc, #60]	@ (8001484 <Turn_left90+0x118>)
 8001446:	f004 fc81 	bl	8005d4c <iprintf>
	Motor_stop();
 800144a:	f7ff ff81 	bl	8001350 <Motor_stop>
	mouse_state = 1;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <Turn_left90+0x11c>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
}
 8001454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001458:	20000528 	.word	0x20000528
 800145c:	200002e4 	.word	0x200002e4
 8001460:	20000288 	.word	0x20000288
 8001464:	2000029c 	.word	0x2000029c
 8001468:	20000530 	.word	0x20000530
 800146c:	42a00000 	.word	0x42a00000
 8001470:	41c80000 	.word	0x41c80000
 8001474:	20000200 	.word	0x20000200
 8001478:	200001f4 	.word	0x200001f4
 800147c:	20000228 	.word	0x20000228
 8001480:	2000021c 	.word	0x2000021c
 8001484:	08007c68 	.word	0x08007c68
 8001488:	20000219 	.word	0x20000219

0800148c <Turn_right90>:
void Turn_right90() {
 800148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	angle = 0;
 8001490:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <Turn_right90+0xf0>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
	reset_en();
 8001496:	f7ff fe49 	bl	800112c <reset_en>
	uint32_t prev_time = micros();
 800149a:	f000 fa55 	bl	8001948 <micros>
 800149e:	4604      	mov	r4, r0
	uint32_t curt = Millis;
 80014a0:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <Turn_right90+0xf4>)
 80014a2:	681f      	ldr	r7, [r3, #0]
	PID_reset(&pid_forward_right);
 80014a4:	4837      	ldr	r0, [pc, #220]	@ (8001584 <Turn_right90+0xf8>)
 80014a6:	f000 f8cd 	bl	8001644 <PID_reset>
	PID_reset(&pid_forward_left);
 80014aa:	4837      	ldr	r0, [pc, #220]	@ (8001588 <Turn_right90+0xfc>)
 80014ac:	f000 f8ca 	bl	8001644 <PID_reset>
	while (fabs(80 + angle) > 4) {
 80014b0:	e047      	b.n	8001542 <Turn_right90+0xb6>
		MPU6050_getAngle(MPU6050.I2Cx, micros() - prev_time);
 80014b2:	4b36      	ldr	r3, [pc, #216]	@ (800158c <Turn_right90+0x100>)
 80014b4:	681d      	ldr	r5, [r3, #0]
 80014b6:	f000 fa47 	bl	8001948 <micros>
 80014ba:	1b01      	subs	r1, r0, r4
 80014bc:	4628      	mov	r0, r5
 80014be:	f000 ff03 	bl	80022c8 <MPU6050_getAngle>
		int16_t pwm_target = 25 * (80 + angle);
 80014c2:	4933      	ldr	r1, [pc, #204]	@ (8001590 <Turn_right90+0x104>)
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <Turn_right90+0xf0>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	f7ff fb34 	bl	8000b34 <__addsf3>
 80014cc:	4931      	ldr	r1, [pc, #196]	@ (8001594 <Turn_right90+0x108>)
 80014ce:	f7ff fc39 	bl	8000d44 <__aeabi_fmul>
 80014d2:	f7ff fdfd 	bl	80010d0 <__aeabi_f2iz>
 80014d6:	b205      	sxth	r5, r0
		int16_t left_pwm = PID_calc(&pid_forward_left, pwm_target, speed_left,
 80014d8:	4628      	mov	r0, r5
 80014da:	f7ff fbdf 	bl	8000c9c <__aeabi_i2f>
 80014de:	4606      	mov	r6, r0
 80014e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <Turn_right90+0x10c>)
 80014e2:	f8d3 8000 	ldr.w	r8, [r3]
				micros() - prev_time);
 80014e6:	f000 fa2f 	bl	8001948 <micros>
		int16_t left_pwm = PID_calc(&pid_forward_left, pwm_target, speed_left,
 80014ea:	1b03      	subs	r3, r0, r4
 80014ec:	4642      	mov	r2, r8
 80014ee:	4631      	mov	r1, r6
 80014f0:	4825      	ldr	r0, [pc, #148]	@ (8001588 <Turn_right90+0xfc>)
 80014f2:	f000 f865 	bl	80015c0 <PID_calc>
 80014f6:	f7ff fdeb 	bl	80010d0 <__aeabi_f2iz>
 80014fa:	b206      	sxth	r6, r0
		int16_t right_pwm = PID_calc(&pid_forward_right, -pwm_target, speed_right,
 80014fc:	4268      	negs	r0, r5
 80014fe:	f7ff fbcd 	bl	8000c9c <__aeabi_i2f>
 8001502:	4605      	mov	r5, r0
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <Turn_right90+0x110>)
 8001506:	f8d3 8000 	ldr.w	r8, [r3]
				micros() - prev_time);
 800150a:	f000 fa1d 	bl	8001948 <micros>
		int16_t right_pwm = PID_calc(&pid_forward_right, -pwm_target, speed_right,
 800150e:	1b03      	subs	r3, r0, r4
 8001510:	4642      	mov	r2, r8
 8001512:	4629      	mov	r1, r5
 8001514:	481b      	ldr	r0, [pc, #108]	@ (8001584 <Turn_right90+0xf8>)
 8001516:	f000 f853 	bl	80015c0 <PID_calc>
 800151a:	f7ff fdd9 	bl	80010d0 <__aeabi_f2iz>
 800151e:	b205      	sxth	r5, r0
		prev_time = micros();
 8001520:	f000 fa12 	bl	8001948 <micros>
 8001524:	4604      	mov	r4, r0
		Set_Motor_speed(&motor_left, left_pwm);
 8001526:	4631      	mov	r1, r6
 8001528:	481d      	ldr	r0, [pc, #116]	@ (80015a0 <Turn_right90+0x114>)
 800152a:	f7ff fead 	bl	8001288 <Set_Motor_speed>
		Set_Motor_speed(&motor_right, right_pwm);
 800152e:	4629      	mov	r1, r5
 8001530:	481c      	ldr	r0, [pc, #112]	@ (80015a4 <Turn_right90+0x118>)
 8001532:	f7ff fea9 	bl	8001288 <Set_Motor_speed>
		elapseMillis(2, curt);
 8001536:	4639      	mov	r1, r7
 8001538:	2002      	movs	r0, #2
 800153a:	f000 fa3c 	bl	80019b6 <elapseMillis>
		curt = Millis;
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <Turn_right90+0xf4>)
 8001540:	681f      	ldr	r7, [r3, #0]
	while (fabs(80 + angle) > 4) {
 8001542:	4913      	ldr	r1, [pc, #76]	@ (8001590 <Turn_right90+0x104>)
 8001544:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <Turn_right90+0xf0>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	f7ff faf4 	bl	8000b34 <__addsf3>
 800154c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001550:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001554:	f7ff fdb2 	bl	80010bc <__aeabi_fcmpgt>
 8001558:	2800      	cmp	r0, #0
 800155a:	d1aa      	bne.n	80014b2 <Turn_right90+0x26>
	Motor_stop();
 800155c:	f7ff fef8 	bl	8001350 <Motor_stop>
	printf("%f\n", angle);
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <Turn_right90+0xf0>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	f7fe ff60 	bl	8000428 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	480e      	ldr	r0, [pc, #56]	@ (80015a8 <Turn_right90+0x11c>)
 800156e:	f004 fbed 	bl	8005d4c <iprintf>
	mouse_state = 2;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <Turn_right90+0x120>)
 8001574:	2202      	movs	r2, #2
 8001576:	701a      	strb	r2, [r3, #0]
}
 8001578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800157c:	20000528 	.word	0x20000528
 8001580:	200002e4 	.word	0x200002e4
 8001584:	20000288 	.word	0x20000288
 8001588:	2000029c 	.word	0x2000029c
 800158c:	20000530 	.word	0x20000530
 8001590:	42a00000 	.word	0x42a00000
 8001594:	41c80000 	.word	0x41c80000
 8001598:	20000200 	.word	0x20000200
 800159c:	200001f4 	.word	0x200001f4
 80015a0:	20000228 	.word	0x20000228
 80015a4:	2000021c 	.word	0x2000021c
 80015a8:	08007c68 	.word	0x08007c68
 80015ac:	20000219 	.word	0x20000219

080015b0 <PID_init>:
PID pid_wall_stable;

int16_t debug_pid;

void PID_init(PID *pid, float kp, float ki, float kd, float integrator, float prev_error) {
	pid->kp = kp;
 80015b0:	6001      	str	r1, [r0, #0]
	pid->ki = ki;
 80015b2:	6042      	str	r2, [r0, #4]
	pid->kd = kd;
 80015b4:	6083      	str	r3, [r0, #8]
	pid->integrator = integrator;
 80015b6:	9b00      	ldr	r3, [sp, #0]
 80015b8:	60c3      	str	r3, [r0, #12]
	pid->prev_error = prev_error;
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	6103      	str	r3, [r0, #16]
}
 80015be:	4770      	bx	lr

080015c0 <PID_calc>:

float PID_calc(PID *pid, float set_point, float real_data, uint32_t delta_time) {
 80015c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015c4:	4604      	mov	r4, r0
 80015c6:	4608      	mov	r0, r1
 80015c8:	461e      	mov	r6, r3
	float error = set_point - real_data;
 80015ca:	4611      	mov	r1, r2
 80015cc:	f7ff fab0 	bl	8000b30 <__aeabi_fsub>
 80015d0:	4605      	mov	r5, r0

	float P = (pid->kp) * error;
 80015d2:	4601      	mov	r1, r0
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	f7ff fbb5 	bl	8000d44 <__aeabi_fmul>
 80015da:	4607      	mov	r7, r0

	pid->integrator += error * delta_time / 1000;
 80015dc:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80015e0:	4630      	mov	r0, r6
 80015e2:	f7ff fb57 	bl	8000c94 <__aeabi_ui2f>
 80015e6:	4681      	mov	r9, r0
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7ff fbab 	bl	8000d44 <__aeabi_fmul>
 80015ee:	4913      	ldr	r1, [pc, #76]	@ (800163c <PID_calc+0x7c>)
 80015f0:	f7ff fc5c 	bl	8000eac <__aeabi_fdiv>
 80015f4:	4601      	mov	r1, r0
 80015f6:	4640      	mov	r0, r8
 80015f8:	f7ff fa9c 	bl	8000b34 <__addsf3>
 80015fc:	60e0      	str	r0, [r4, #12]
	float I = ( pid->integrator ) * ( pid->ki );
 80015fe:	6861      	ldr	r1, [r4, #4]
 8001600:	f7ff fba0 	bl	8000d44 <__aeabi_fmul>
 8001604:	4680      	mov	r8, r0

	float derivative = ( error - ( pid->prev_error ) ) * 1000 / delta_time;
 8001606:	6921      	ldr	r1, [r4, #16]
 8001608:	4628      	mov	r0, r5
 800160a:	f7ff fa91 	bl	8000b30 <__aeabi_fsub>
 800160e:	490b      	ldr	r1, [pc, #44]	@ (800163c <PID_calc+0x7c>)
 8001610:	f7ff fb98 	bl	8000d44 <__aeabi_fmul>
 8001614:	4649      	mov	r1, r9
 8001616:	f7ff fc49 	bl	8000eac <__aeabi_fdiv>
 800161a:	4601      	mov	r1, r0
	debug_pid = delta_time;
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <PID_calc+0x80>)
 800161e:	801e      	strh	r6, [r3, #0]
	float D = pid->kd * derivative;
 8001620:	68a0      	ldr	r0, [r4, #8]
 8001622:	f7ff fb8f 	bl	8000d44 <__aeabi_fmul>
 8001626:	4606      	mov	r6, r0
	pid->prev_error = error;
 8001628:	6125      	str	r5, [r4, #16]

	return P + I + D;
 800162a:	4641      	mov	r1, r8
 800162c:	4638      	mov	r0, r7
 800162e:	f7ff fa81 	bl	8000b34 <__addsf3>
 8001632:	4631      	mov	r1, r6
 8001634:	f7ff fa7e 	bl	8000b34 <__addsf3>
}
 8001638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800163c:	447a0000 	.word	0x447a0000
 8001640:	20000234 	.word	0x20000234

08001644 <PID_reset>:

void PID_reset(PID *pid) {
	pid->integrator = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	60c3      	str	r3, [r0, #12]
	pid->prev_error = 0;
 8001648:	6103      	str	r3, [r0, #16]
}
 800164a:	4770      	bx	lr

0800164c <IR_init>:
float IR_RR = 0;

uint16_t IR_data[4];
uint8_t completeADC = 0;

void IR_init(ADC_HandleTypeDef *ADCx) {
 800164c:	b538      	push	{r3, r4, r5, lr}
	IR_sensor.ADCx = ADCx;
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <IR_init+0x44>)
 8001650:	6018      	str	r0, [r3, #0]
	IR_sensor.prev_ir_state_left = 1;
 8001652:	2401      	movs	r4, #1
 8001654:	711c      	strb	r4, [r3, #4]
	IR_sensor.prev_ir_state_right = 1;
 8001656:	715c      	strb	r4, [r3, #5]
	IR_sensor.ir_state_left = 1;
 8001658:	719c      	strb	r4, [r3, #6]
	IR_sensor.ir_state_right = 1;
 800165a:	71dc      	strb	r4, [r3, #7]
	HAL_ADC_Start_DMA(IR_sensor.ADCx, (uint32_t*) IR_data, 4);
 800165c:	2204      	movs	r2, #4
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <IR_init+0x48>)
 8001660:	f001 fa38 	bl	8002ad4 <HAL_ADC_Start_DMA>
	RF_EM_ON;
 8001664:	4d0c      	ldr	r5, [pc, #48]	@ (8001698 <IR_init+0x4c>)
 8001666:	4622      	mov	r2, r4
 8001668:	2120      	movs	r1, #32
 800166a:	4628      	mov	r0, r5
 800166c:	f001 fe83 	bl	8003376 <HAL_GPIO_WritePin>
	LF_EM_ON;
 8001670:	4622      	mov	r2, r4
 8001672:	4621      	mov	r1, r4
 8001674:	4809      	ldr	r0, [pc, #36]	@ (800169c <IR_init+0x50>)
 8001676:	f001 fe7e 	bl	8003376 <HAL_GPIO_WritePin>
	L_EM_ON;
 800167a:	4622      	mov	r2, r4
 800167c:	2180      	movs	r1, #128	@ 0x80
 800167e:	4628      	mov	r0, r5
 8001680:	f001 fe79 	bl	8003376 <HAL_GPIO_WritePin>
	R_EM_ON;
 8001684:	4622      	mov	r2, r4
 8001686:	2140      	movs	r1, #64	@ 0x40
 8001688:	4628      	mov	r0, r5
 800168a:	f001 fe74 	bl	8003376 <HAL_GPIO_WritePin>
}
 800168e:	bd38      	pop	{r3, r4, r5, pc}
 8001690:	200002dc 	.word	0x200002dc
 8001694:	200002b4 	.word	0x200002b4
 8001698:	40010800 	.word	0x40010800
 800169c:	40010c00 	.word	0x40010c00

080016a0 <read_ir_adc>:

void read_ir_adc() {
 80016a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(completeADC == 0) {
 80016a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001824 <read_ir_adc+0x184>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 80b0 	bne.w	800180e <read_ir_adc+0x16e>
		uint32_t curt = Micros;
 80016ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001828 <read_ir_adc+0x188>)
 80016b0:	681c      	ldr	r4, [r3, #0]
		RF_EM_ON;
 80016b2:	4d5e      	ldr	r5, [pc, #376]	@ (800182c <read_ir_adc+0x18c>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	2120      	movs	r1, #32
 80016b8:	4628      	mov	r0, r5
 80016ba:	f001 fe5c 	bl	8003376 <HAL_GPIO_WritePin>
		IR_FR = (float) IR_data[0] * alpha + (float) (1 - alpha) * IR_FR;
 80016be:	4e5c      	ldr	r6, [pc, #368]	@ (8001830 <read_ir_adc+0x190>)
 80016c0:	8830      	ldrh	r0, [r6, #0]
 80016c2:	f7ff fae7 	bl	8000c94 <__aeabi_ui2f>
 80016c6:	4f5b      	ldr	r7, [pc, #364]	@ (8001834 <read_ir_adc+0x194>)
 80016c8:	f8d7 9000 	ldr.w	r9, [r7]
 80016cc:	4649      	mov	r1, r9
 80016ce:	f7ff fb39 	bl	8000d44 <__aeabi_fmul>
 80016d2:	4680      	mov	r8, r0
 80016d4:	4649      	mov	r1, r9
 80016d6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80016da:	f7ff fa29 	bl	8000b30 <__aeabi_fsub>
 80016de:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 8001838 <read_ir_adc+0x198>
 80016e2:	f8d9 1000 	ldr.w	r1, [r9]
 80016e6:	f7ff fb2d 	bl	8000d44 <__aeabi_fmul>
 80016ea:	4601      	mov	r1, r0
 80016ec:	4640      	mov	r0, r8
 80016ee:	f7ff fa21 	bl	8000b34 <__addsf3>
 80016f2:	f8c9 0000 	str.w	r0, [r9]
		elapseMicros(100, curt);
 80016f6:	4621      	mov	r1, r4
 80016f8:	2064      	movs	r0, #100	@ 0x64
 80016fa:	f000 f953 	bl	80019a4 <elapseMicros>
		RF_EM_OFF;
 80016fe:	2200      	movs	r2, #0
 8001700:	2120      	movs	r1, #32
 8001702:	4628      	mov	r0, r5
 8001704:	f001 fe37 	bl	8003376 <HAL_GPIO_WritePin>
		elapseMicros(160,curt);
 8001708:	4621      	mov	r1, r4
 800170a:	20a0      	movs	r0, #160	@ 0xa0
 800170c:	f000 f94a 	bl	80019a4 <elapseMicros>

		LF_EM_ON;
 8001710:	f8df 9128 	ldr.w	r9, [pc, #296]	@ 800183c <read_ir_adc+0x19c>
 8001714:	2201      	movs	r2, #1
 8001716:	4611      	mov	r1, r2
 8001718:	4648      	mov	r0, r9
 800171a:	f001 fe2c 	bl	8003376 <HAL_GPIO_WritePin>
		IR_FL = (float) IR_data[3] * alpha + (float) (1 - alpha) * IR_FL;
 800171e:	88f0      	ldrh	r0, [r6, #6]
 8001720:	f7ff fab8 	bl	8000c94 <__aeabi_ui2f>
 8001724:	f8d7 a000 	ldr.w	sl, [r7]
 8001728:	4651      	mov	r1, sl
 800172a:	f7ff fb0b 	bl	8000d44 <__aeabi_fmul>
 800172e:	4680      	mov	r8, r0
 8001730:	4651      	mov	r1, sl
 8001732:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001736:	f7ff f9fb 	bl	8000b30 <__aeabi_fsub>
 800173a:	f8df a104 	ldr.w	sl, [pc, #260]	@ 8001840 <read_ir_adc+0x1a0>
 800173e:	f8da 1000 	ldr.w	r1, [sl]
 8001742:	f7ff faff 	bl	8000d44 <__aeabi_fmul>
 8001746:	4601      	mov	r1, r0
 8001748:	4640      	mov	r0, r8
 800174a:	f7ff f9f3 	bl	8000b34 <__addsf3>
 800174e:	f8ca 0000 	str.w	r0, [sl]
		elapseMicros(240,curt);
 8001752:	4621      	mov	r1, r4
 8001754:	20f0      	movs	r0, #240	@ 0xf0
 8001756:	f000 f925 	bl	80019a4 <elapseMicros>
		LF_EM_OFF;
 800175a:	2200      	movs	r2, #0
 800175c:	2101      	movs	r1, #1
 800175e:	4648      	mov	r0, r9
 8001760:	f001 fe09 	bl	8003376 <HAL_GPIO_WritePin>
		elapseMicros(320,curt);
 8001764:	4621      	mov	r1, r4
 8001766:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800176a:	f000 f91b 	bl	80019a4 <elapseMicros>

		L_EM_ON;
 800176e:	2201      	movs	r2, #1
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	4628      	mov	r0, r5
 8001774:	f001 fdff 	bl	8003376 <HAL_GPIO_WritePin>
		R_EM_ON;
 8001778:	2201      	movs	r2, #1
 800177a:	2140      	movs	r1, #64	@ 0x40
 800177c:	4628      	mov	r0, r5
 800177e:	f001 fdfa 	bl	8003376 <HAL_GPIO_WritePin>
		IR_RR = (float) IR_data[1] * alpha + (float) (1 - alpha) * IR_RR;
 8001782:	8870      	ldrh	r0, [r6, #2]
 8001784:	f7ff fa86 	bl	8000c94 <__aeabi_ui2f>
 8001788:	f8d7 8000 	ldr.w	r8, [r7]
 800178c:	4641      	mov	r1, r8
 800178e:	f7ff fad9 	bl	8000d44 <__aeabi_fmul>
 8001792:	4681      	mov	r9, r0
 8001794:	4641      	mov	r1, r8
 8001796:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800179a:	f7ff f9c9 	bl	8000b30 <__aeabi_fsub>
 800179e:	4607      	mov	r7, r0
 80017a0:	f8df a0a0 	ldr.w	sl, [pc, #160]	@ 8001844 <read_ir_adc+0x1a4>
 80017a4:	f8da 1000 	ldr.w	r1, [sl]
 80017a8:	f7ff facc 	bl	8000d44 <__aeabi_fmul>
 80017ac:	4601      	mov	r1, r0
 80017ae:	4648      	mov	r0, r9
 80017b0:	f7ff f9c0 	bl	8000b34 <__addsf3>
 80017b4:	f8ca 0000 	str.w	r0, [sl]
		IR_LL = (float) IR_data[2] * alpha + (float) (1 - alpha) * IR_LL;
 80017b8:	88b0      	ldrh	r0, [r6, #4]
 80017ba:	f7ff fa6b 	bl	8000c94 <__aeabi_ui2f>
 80017be:	4601      	mov	r1, r0
 80017c0:	4640      	mov	r0, r8
 80017c2:	f7ff fabf 	bl	8000d44 <__aeabi_fmul>
 80017c6:	4606      	mov	r6, r0
 80017c8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8001848 <read_ir_adc+0x1a8>
 80017cc:	f8d8 1000 	ldr.w	r1, [r8]
 80017d0:	4638      	mov	r0, r7
 80017d2:	f7ff fab7 	bl	8000d44 <__aeabi_fmul>
 80017d6:	4601      	mov	r1, r0
 80017d8:	4630      	mov	r0, r6
 80017da:	f7ff f9ab 	bl	8000b34 <__addsf3>
 80017de:	f8c8 0000 	str.w	r0, [r8]
		elapseMicros(400,curt);
 80017e2:	4621      	mov	r1, r4
 80017e4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80017e8:	f000 f8dc 	bl	80019a4 <elapseMicros>
		L_EM_OFF;
 80017ec:	2200      	movs	r2, #0
 80017ee:	2180      	movs	r1, #128	@ 0x80
 80017f0:	4628      	mov	r0, r5
 80017f2:	f001 fdc0 	bl	8003376 <HAL_GPIO_WritePin>
		R_EM_OFF;
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	@ 0x40
 80017fa:	4628      	mov	r0, r5
 80017fc:	f001 fdbb 	bl	8003376 <HAL_GPIO_WritePin>
		elapseMicros(480, curt);
 8001800:	4621      	mov	r1, r4
 8001802:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001806:	f000 f8cd 	bl	80019a4 <elapseMicros>
	else {
		completeADC = 0;
		HAL_ADC_Start_DMA(IR_sensor.ADCx,(uint32_t*) IR_data, 4);
	}
//	delay_us(300);
}
 800180a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		completeADC = 0;
 800180e:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <read_ir_adc+0x184>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(IR_sensor.ADCx,(uint32_t*) IR_data, 4);
 8001814:	2204      	movs	r2, #4
 8001816:	4906      	ldr	r1, [pc, #24]	@ (8001830 <read_ir_adc+0x190>)
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <read_ir_adc+0x1ac>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	f001 f95a 	bl	8002ad4 <HAL_ADC_Start_DMA>
}
 8001820:	e7f3      	b.n	800180a <read_ir_adc+0x16a>
 8001822:	bf00      	nop
 8001824:	200002b0 	.word	0x200002b0
 8001828:	200002e8 	.word	0x200002e8
 800182c:	40010800 	.word	0x40010800
 8001830:	200002b4 	.word	0x200002b4
 8001834:	20000000 	.word	0x20000000
 8001838:	200002c4 	.word	0x200002c4
 800183c:	40010c00 	.word	0x40010c00
 8001840:	200002c8 	.word	0x200002c8
 8001844:	200002bc 	.word	0x200002bc
 8001848:	200002c0 	.word	0x200002c0
 800184c:	200002dc 	.word	0x200002dc

08001850 <ir_calibration>:

void ir_calibration() {
 8001850:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < 4000; i++) {
 8001852:	2400      	movs	r4, #0
 8001854:	e018      	b.n	8001888 <ir_calibration+0x38>
		read_ir_adc();
 8001856:	f7ff ff23 	bl	80016a0 <read_ir_adc>
		WALL_L += IR_LL;
 800185a:	4d17      	ldr	r5, [pc, #92]	@ (80018b8 <ir_calibration+0x68>)
 800185c:	6828      	ldr	r0, [r5, #0]
 800185e:	f7ff fa1d 	bl	8000c9c <__aeabi_i2f>
 8001862:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <ir_calibration+0x6c>)
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	f7ff f965 	bl	8000b34 <__addsf3>
 800186a:	f7ff fc31 	bl	80010d0 <__aeabi_f2iz>
 800186e:	6028      	str	r0, [r5, #0]
		WALL_R += IR_RR;
 8001870:	4d13      	ldr	r5, [pc, #76]	@ (80018c0 <ir_calibration+0x70>)
 8001872:	6828      	ldr	r0, [r5, #0]
 8001874:	f7ff fa12 	bl	8000c9c <__aeabi_i2f>
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <ir_calibration+0x74>)
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	f7ff f95a 	bl	8000b34 <__addsf3>
 8001880:	f7ff fc26 	bl	80010d0 <__aeabi_f2iz>
 8001884:	6028      	str	r0, [r5, #0]
	for (int i = 0; i < 4000; i++) {
 8001886:	3401      	adds	r4, #1
 8001888:	f5b4 6f7a 	cmp.w	r4, #4000	@ 0xfa0
 800188c:	dbe3      	blt.n	8001856 <ir_calibration+0x6>
	}
	WALL_L /= 4000;
 800188e:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <ir_calibration+0x68>)
 8001890:	6803      	ldr	r3, [r0, #0]
 8001892:	490d      	ldr	r1, [pc, #52]	@ (80018c8 <ir_calibration+0x78>)
 8001894:	fb81 4203 	smull	r4, r2, r1, r3
 8001898:	17db      	asrs	r3, r3, #31
 800189a:	ebc3 2222 	rsb	r2, r3, r2, asr #8
 800189e:	6002      	str	r2, [r0, #0]
	WALL_R /= 4000;
 80018a0:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <ir_calibration+0x70>)
 80018a2:	6803      	ldr	r3, [r0, #0]
 80018a4:	fb81 4103 	smull	r4, r1, r1, r3
 80018a8:	17db      	asrs	r3, r3, #31
 80018aa:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 80018ae:	6003      	str	r3, [r0, #0]
	IR_sensor.prev_ir_state_left = WALL_L;
 80018b0:	4906      	ldr	r1, [pc, #24]	@ (80018cc <ir_calibration+0x7c>)
 80018b2:	710a      	strb	r2, [r1, #4]
	IR_sensor.prev_ir_state_right = WALL_R;
 80018b4:	714b      	strb	r3, [r1, #5]
}
 80018b6:	bd38      	pop	{r3, r4, r5, pc}
 80018b8:	200002d8 	.word	0x200002d8
 80018bc:	200002c0 	.word	0x200002c0
 80018c0:	200002d4 	.word	0x200002d4
 80018c4:	200002bc 	.word	0x200002bc
 80018c8:	10624dd3 	.word	0x10624dd3
 80018cc:	200002dc 	.word	0x200002dc

080018d0 <wall_front_calibration>:

void wall_front_calibration() {
 80018d0:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < 4000; i++) {
 80018d2:	2400      	movs	r4, #0
 80018d4:	e018      	b.n	8001908 <wall_front_calibration+0x38>
		read_ir_adc();
 80018d6:	f7ff fee3 	bl	80016a0 <read_ir_adc>
		WALL_FL += IR_FL;
 80018da:	4d16      	ldr	r5, [pc, #88]	@ (8001934 <wall_front_calibration+0x64>)
 80018dc:	6828      	ldr	r0, [r5, #0]
 80018de:	f7ff f9dd 	bl	8000c9c <__aeabi_i2f>
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <wall_front_calibration+0x68>)
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	f7ff f925 	bl	8000b34 <__addsf3>
 80018ea:	f7ff fbf1 	bl	80010d0 <__aeabi_f2iz>
 80018ee:	6028      	str	r0, [r5, #0]
		WALL_FR += IR_FR;
 80018f0:	4d12      	ldr	r5, [pc, #72]	@ (800193c <wall_front_calibration+0x6c>)
 80018f2:	6828      	ldr	r0, [r5, #0]
 80018f4:	f7ff f9d2 	bl	8000c9c <__aeabi_i2f>
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <wall_front_calibration+0x70>)
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	f7ff f91a 	bl	8000b34 <__addsf3>
 8001900:	f7ff fbe6 	bl	80010d0 <__aeabi_f2iz>
 8001904:	6028      	str	r0, [r5, #0]
	for (int i = 0; i < 4000; i++) {
 8001906:	3401      	adds	r4, #1
 8001908:	f5b4 6f7a 	cmp.w	r4, #4000	@ 0xfa0
 800190c:	dbe3      	blt.n	80018d6 <wall_front_calibration+0x6>
	}
	WALL_FL /= 4000;
 800190e:	4909      	ldr	r1, [pc, #36]	@ (8001934 <wall_front_calibration+0x64>)
 8001910:	680b      	ldr	r3, [r1, #0]
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <wall_front_calibration+0x74>)
 8001914:	fb82 4003 	smull	r4, r0, r2, r3
 8001918:	17db      	asrs	r3, r3, #31
 800191a:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 800191e:	600b      	str	r3, [r1, #0]
	WALL_FR /= 4000;
 8001920:	4906      	ldr	r1, [pc, #24]	@ (800193c <wall_front_calibration+0x6c>)
 8001922:	680b      	ldr	r3, [r1, #0]
 8001924:	fb82 0203 	smull	r0, r2, r2, r3
 8001928:	17db      	asrs	r3, r3, #31
 800192a:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 800192e:	600b      	str	r3, [r1, #0]

}
 8001930:	bd38      	pop	{r3, r4, r5, pc}
 8001932:	bf00      	nop
 8001934:	200002cc 	.word	0x200002cc
 8001938:	200002c8 	.word	0x200002c8
 800193c:	200002d0 	.word	0x200002d0
 8001940:	200002c4 	.word	0x200002c4
 8001944:	10624dd3 	.word	0x10624dd3

08001948 <micros>:
	Millis = 0;//reset Millis
}

uint32_t micros(void)
{
	Micros = Millis*1000 + 1000 - SysTick->VAL/systemFrequency;//=Millis*1000+(SystemCoreClock/1000-SysTick->VAL)/168;
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <micros+0x24>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001950:	fb02 3303 	mla	r3, r2, r3, r3
 8001954:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001958:	6992      	ldr	r2, [r2, #24]
 800195a:	4905      	ldr	r1, [pc, #20]	@ (8001970 <micros+0x28>)
 800195c:	fba1 1202 	umull	r1, r2, r1, r2
 8001960:	eba3 1312 	sub.w	r3, r3, r2, lsr #4
 8001964:	4a03      	ldr	r2, [pc, #12]	@ (8001974 <micros+0x2c>)
 8001966:	6013      	str	r3, [r2, #0]
	return Micros;
 8001968:	6810      	ldr	r0, [r2, #0]
}
 800196a:	4770      	bx	lr
 800196c:	200002e4 	.word	0x200002e4
 8001970:	38e38e39 	.word	0x38e38e39
 8001974:	200002e8 	.word	0x200002e8

08001978 <millis>:

uint32_t millis(void)
{
	return Millis;
 8001978:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <millis+0x8>)
 800197a:	6818      	ldr	r0, [r3, #0]
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200002e4 	.word	0x200002e4

08001984 <delay_ms>:

void delay_ms(uint32_t nTime)
{
 8001984:	b538      	push	{r3, r4, r5, lr}
 8001986:	4604      	mov	r4, r0
	uint32_t curTime = Millis;
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <delay_ms+0x1c>)
 800198a:	681d      	ldr	r5, [r3, #0]
	while((nTime-(Millis-curTime)) > 0)
 800198c:	e001      	b.n	8001992 <delay_ms+0xe>
	{
		read_ir_adc();
 800198e:	f7ff fe87 	bl	80016a0 <read_ir_adc>
	while((nTime-(Millis-curTime)) > 0)
 8001992:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <delay_ms+0x1c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1aeb      	subs	r3, r5, r3
 8001998:	42e3      	cmn	r3, r4
 800199a:	d1f8      	bne.n	800198e <delay_ms+0xa>
	}
}
 800199c:	bd38      	pop	{r3, r4, r5, pc}
 800199e:	bf00      	nop
 80019a0:	200002e4 	.word	0x200002e4

080019a4 <elapseMicros>:
	uint32_t curTime = micros();
	while((nTime-(micros()-curTime)) > 0);
}

void elapseMicros(uint32_t targetTime, uint32_t oldt)
{
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	4605      	mov	r5, r0
 80019a8:	460c      	mov	r4, r1
	while((micros()-oldt)<targetTime);
 80019aa:	f7ff ffcd 	bl	8001948 <micros>
 80019ae:	1b00      	subs	r0, r0, r4
 80019b0:	42a8      	cmp	r0, r5
 80019b2:	d3fa      	bcc.n	80019aa <elapseMicros+0x6>
}
 80019b4:	bd38      	pop	{r3, r4, r5, pc}

080019b6 <elapseMillis>:


void elapseMillis(uint32_t targetTime, uint32_t oldt)
{
 80019b6:	b538      	push	{r3, r4, r5, lr}
 80019b8:	4605      	mov	r5, r0
 80019ba:	460c      	mov	r4, r1
	while((millis()-oldt)<targetTime);
 80019bc:	f7ff ffdc 	bl	8001978 <millis>
 80019c0:	1b00      	subs	r0, r0, r4
 80019c2:	42a8      	cmp	r0, r5
 80019c4:	d3fa      	bcc.n	80019bc <elapseMillis+0x6>
}
 80019c6:	bd38      	pop	{r3, r4, r5, pc}

080019c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019cc:	b089      	sub	sp, #36	@ 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019ce:	2400      	movs	r4, #0
 80019d0:	9404      	str	r4, [sp, #16]
 80019d2:	9405      	str	r4, [sp, #20]
 80019d4:	9406      	str	r4, [sp, #24]
 80019d6:	9407      	str	r4, [sp, #28]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <MX_GPIO_Init+0xe0>)
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	f042 0210 	orr.w	r2, r2, #16
 80019e0:	619a      	str	r2, [r3, #24]
 80019e2:	699a      	ldr	r2, [r3, #24]
 80019e4:	f002 0210 	and.w	r2, r2, #16
 80019e8:	9200      	str	r2, [sp, #0]
 80019ea:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	f042 0220 	orr.w	r2, r2, #32
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	f002 0220 	and.w	r2, r2, #32
 80019fa:	9201      	str	r2, [sp, #4]
 80019fc:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	f042 0204 	orr.w	r2, r2, #4
 8001a04:	619a      	str	r2, [r3, #24]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	f002 0204 	and.w	r2, r2, #4
 8001a0c:	9202      	str	r2, [sp, #8]
 8001a0e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a10:	699a      	ldr	r2, [r3, #24]
 8001a12:	f042 0208 	orr.w	r2, r2, #8
 8001a16:	619a      	str	r2, [r3, #24]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	9303      	str	r3, [sp, #12]
 8001a20:	9b03      	ldr	r3, [sp, #12]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a22:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8001aac <MX_GPIO_Init+0xe4>
 8001a26:	4622      	mov	r2, r4
 8001a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	f001 fca2 	bl	8003376 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
 8001a32:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8001ab0 <MX_GPIO_Init+0xe8>
 8001a36:	4622      	mov	r2, r4
 8001a38:	21e0      	movs	r1, #224	@ 0xe0
 8001a3a:	4648      	mov	r0, r9
 8001a3c:	f001 fc9b 	bl	8003376 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a40:	4e1c      	ldr	r6, [pc, #112]	@ (8001ab4 <MX_GPIO_Init+0xec>)
 8001a42:	4622      	mov	r2, r4
 8001a44:	2101      	movs	r1, #1
 8001a46:	4630      	mov	r0, r6
 8001a48:	f001 fc95 	bl	8003376 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a50:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2501      	movs	r5, #1
 8001a54:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2702      	movs	r7, #2
 8001a5a:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	a904      	add	r1, sp, #16
 8001a5e:	4640      	mov	r0, r8
 8001a60:	f001 fb74 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8001a64:	23e0      	movs	r3, #224	@ 0xe0
 8001a66:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6c:	f04f 0803 	mov.w	r8, #3
 8001a70:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	a904      	add	r1, sp, #16
 8001a76:	4648      	mov	r0, r9
 8001a78:	f001 fb68 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a7c:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a82:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	a904      	add	r1, sp, #16
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f001 fb5f 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin BTN1_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | BTN1_Pin;
 8001a8e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001a92:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a96:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	a904      	add	r1, sp, #16
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f001 fb56 	bl	800314c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa0:	b009      	add	sp, #36	@ 0x24
 8001aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <MX_DMA_Init>:
static void MX_DMA_Init(void) {
 8001ab8:	b500      	push	{lr}
 8001aba:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <MX_DMA_Init+0x30>)
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	200b      	movs	r0, #11
 8001ad6:	f001 f9bb 	bl	8002e50 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ada:	200b      	movs	r0, #11
 8001adc:	f001 f9c8 	bl	8002e70 <HAL_NVIC_EnableIRQ>
}
 8001ae0:	b003      	add	sp, #12
 8001ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001aec:	b508      	push	{r3, lr}
	if (htim == &htim4) {
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001af0:	4283      	cmp	r3, r0
 8001af2:	d000      	beq.n	8001af6 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001af4:	bd08      	pop	{r3, pc}
		read_en_left(&encoder_left);
 8001af6:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001af8:	f7ff fb2e 	bl	8001158 <read_en_left>
		read_en_right(&encoder_right);
 8001afc:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001afe:	f7ff fb53 	bl	80011a8 <read_en_right>
}
 8001b02:	e7f7      	b.n	8001af4 <HAL_TIM_PeriodElapsedCallback+0x8>
 8001b04:	20000334 	.word	0x20000334
 8001b08:	20000214 	.word	0x20000214
 8001b0c:	20000210 	.word	0x20000210

08001b10 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001b10:	b508      	push	{r3, lr}
	if (hadc->Instance == ADC1) {
 8001b12:	6802      	ldr	r2, [r0, #0]
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <HAL_ADC_ConvCpltCallback+0x18>)
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d000      	beq.n	8001b1c <HAL_ADC_ConvCpltCallback+0xc>
}
 8001b1a:	bd08      	pop	{r3, pc}
		HAL_ADC_Stop_DMA(hadc);  // Dừng ADC
 8001b1c:	f001 f922 	bl	8002d64 <HAL_ADC_Stop_DMA>
		completeADC = 1;            // �?ánh dấu đã hoàn tất
 8001b20:	4b02      	ldr	r3, [pc, #8]	@ (8001b2c <HAL_ADC_ConvCpltCallback+0x1c>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
}
 8001b26:	e7f8      	b.n	8001b1a <HAL_ADC_ConvCpltCallback+0xa>
 8001b28:	40012400 	.word	0x40012400
 8001b2c:	200002b0 	.word	0x200002b0

08001b30 <_write>:
	if (fd == 1 || fd == 2) {
 8001b30:	3801      	subs	r0, #1
 8001b32:	2801      	cmp	r0, #1
 8001b34:	d80a      	bhi.n	8001b4c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8001b36:	b510      	push	{r4, lr}
 8001b38:	4614      	mov	r4, r2
		hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <_write+0x28>)
 8001b42:	f003 fb7e 	bl	8005242 <HAL_UART_Transmit>
		if (hstatus == HAL_OK)
 8001b46:	b920      	cbnz	r0, 8001b52 <_write+0x22>
			return len;
 8001b48:	4620      	mov	r0, r4
}
 8001b4a:	bd10      	pop	{r4, pc}
	return -1;
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b50:	4770      	bx	lr
			return -1;
 8001b52:	f04f 30ff 	mov.w	r0, #4294967295
 8001b56:	e7f8      	b.n	8001b4a <_write+0x1a>
 8001b58:	200002ec 	.word	0x200002ec

08001b5c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b5e:	e7fe      	b.n	8001b5e <Error_Handler+0x2>

08001b60 <MX_TIM1_Init>:
static void MX_TIM1_Init(void) {
 8001b60:	b510      	push	{r4, lr}
 8001b62:	b096      	sub	sp, #88	@ 0x58
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b64:	2400      	movs	r4, #0
 8001b66:	9412      	str	r4, [sp, #72]	@ 0x48
 8001b68:	9413      	str	r4, [sp, #76]	@ 0x4c
 8001b6a:	9414      	str	r4, [sp, #80]	@ 0x50
 8001b6c:	9415      	str	r4, [sp, #84]	@ 0x54
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b6e:	9410      	str	r4, [sp, #64]	@ 0x40
 8001b70:	9411      	str	r4, [sp, #68]	@ 0x44
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b72:	9409      	str	r4, [sp, #36]	@ 0x24
 8001b74:	940a      	str	r4, [sp, #40]	@ 0x28
 8001b76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001b78:	940c      	str	r4, [sp, #48]	@ 0x30
 8001b7a:	940d      	str	r4, [sp, #52]	@ 0x34
 8001b7c:	940e      	str	r4, [sp, #56]	@ 0x38
 8001b7e:	940f      	str	r4, [sp, #60]	@ 0x3c
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001b80:	2220      	movs	r2, #32
 8001b82:	4621      	mov	r1, r4
 8001b84:	a801      	add	r0, sp, #4
 8001b86:	f004 f936 	bl	8005df6 <memset>
	htim1.Instance = TIM1;
 8001b8a:	4837      	ldr	r0, [pc, #220]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001b8c:	4b37      	ldr	r3, [pc, #220]	@ (8001c6c <MX_TIM1_Init+0x10c>)
 8001b8e:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001b90:	2347      	movs	r3, #71	@ 0x47
 8001b92:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	6084      	str	r4, [r0, #8]
	htim1.Init.Period = 10000 - 1;
 8001b96:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001b9a:	60c3      	str	r3, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	6104      	str	r4, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8001b9e:	6144      	str	r4, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba0:	2380      	movs	r3, #128	@ 0x80
 8001ba2:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001ba4:	f002 ff42 	bl	8004a2c <HAL_TIM_Base_Init>
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	d14a      	bne.n	8001c42 <MX_TIM1_Init+0xe2>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb0:	9312      	str	r3, [sp, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001bb2:	a912      	add	r1, sp, #72	@ 0x48
 8001bb4:	482c      	ldr	r0, [pc, #176]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001bb6:	f003 f895 	bl	8004ce4 <HAL_TIM_ConfigClockSource>
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	d143      	bne.n	8001c46 <MX_TIM1_Init+0xe6>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001bbe:	482a      	ldr	r0, [pc, #168]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001bc0:	f002 ff60 	bl	8004a84 <HAL_TIM_PWM_Init>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d140      	bne.n	8001c4a <MX_TIM1_Init+0xea>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9310      	str	r3, [sp, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	9311      	str	r3, [sp, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001bce:	a910      	add	r1, sp, #64	@ 0x40
 8001bd0:	4825      	ldr	r0, [pc, #148]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001bd2:	f003 f9e9 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d139      	bne.n	8001c4e <MX_TIM1_Init+0xee>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bda:	2360      	movs	r3, #96	@ 0x60
 8001bdc:	9309      	str	r3, [sp, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001bde:	2200      	movs	r2, #0
 8001be0:	920a      	str	r2, [sp, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be2:	920b      	str	r2, [sp, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be4:	920c      	str	r2, [sp, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be6:	920d      	str	r2, [sp, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001be8:	920e      	str	r2, [sp, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bea:	920f      	str	r2, [sp, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001bec:	a909      	add	r1, sp, #36	@ 0x24
 8001bee:	481e      	ldr	r0, [pc, #120]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001bf0:	f002 fffe 	bl	8004bf0 <HAL_TIM_PWM_ConfigChannel>
 8001bf4:	bb68      	cbnz	r0, 8001c52 <MX_TIM1_Init+0xf2>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	a909      	add	r1, sp, #36	@ 0x24
 8001bfa:	481b      	ldr	r0, [pc, #108]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001bfc:	f002 fff8 	bl	8004bf0 <HAL_TIM_PWM_ConfigChannel>
 8001c00:	bb48      	cbnz	r0, 8001c56 <MX_TIM1_Init+0xf6>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001c02:	2208      	movs	r2, #8
 8001c04:	a909      	add	r1, sp, #36	@ 0x24
 8001c06:	4818      	ldr	r0, [pc, #96]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001c08:	f002 fff2 	bl	8004bf0 <HAL_TIM_PWM_ConfigChannel>
 8001c0c:	bb28      	cbnz	r0, 8001c5a <MX_TIM1_Init+0xfa>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	a909      	add	r1, sp, #36	@ 0x24
 8001c12:	4815      	ldr	r0, [pc, #84]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001c14:	f002 ffec 	bl	8004bf0 <HAL_TIM_PWM_ConfigChannel>
 8001c18:	bb08      	cbnz	r0, 8001c5e <MX_TIM1_Init+0xfe>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c1e:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c20:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001c22:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c24:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c2a:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c2c:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001c2e:	a901      	add	r1, sp, #4
 8001c30:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001c32:	f003 f9ef 	bl	8005014 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c36:	b9a0      	cbnz	r0, 8001c62 <MX_TIM1_Init+0x102>
	HAL_TIM_MspPostInit(&htim1);
 8001c38:	480b      	ldr	r0, [pc, #44]	@ (8001c68 <MX_TIM1_Init+0x108>)
 8001c3a:	f000 fcc7 	bl	80025cc <HAL_TIM_MspPostInit>
}
 8001c3e:	b016      	add	sp, #88	@ 0x58
 8001c40:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001c42:	f7ff ff8b 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001c46:	f7ff ff89 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001c4a:	f7ff ff87 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001c4e:	f7ff ff85 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001c52:	f7ff ff83 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001c56:	f7ff ff81 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001c5a:	f7ff ff7f 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001c5e:	f7ff ff7d 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001c62:	f7ff ff7b 	bl	8001b5c <Error_Handler>
 8001c66:	bf00      	nop
 8001c68:	2000040c 	.word	0x2000040c
 8001c6c:	40012c00 	.word	0x40012c00

08001c70 <MX_TIM2_Init>:
static void MX_TIM2_Init(void) {
 8001c70:	b500      	push	{lr}
 8001c72:	b08d      	sub	sp, #52	@ 0x34
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001c74:	2224      	movs	r2, #36	@ 0x24
 8001c76:	2100      	movs	r1, #0
 8001c78:	a803      	add	r0, sp, #12
 8001c7a:	f004 f8bc 	bl	8005df6 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	9302      	str	r3, [sp, #8]
	htim2.Instance = TIM2;
 8001c84:	4811      	ldr	r0, [pc, #68]	@ (8001ccc <MX_TIM2_Init+0x5c>)
 8001c86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c8a:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 0;
 8001c8c:	6043      	str	r3, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 65535;
 8001c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c94:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	6183      	str	r3, [r0, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	9303      	str	r3, [sp, #12]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	9305      	str	r3, [sp, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca2:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001ca4:	a903      	add	r1, sp, #12
 8001ca6:	f002 ff19 	bl	8004adc <HAL_TIM_Encoder_Init>
 8001caa:	b950      	cbnz	r0, 8001cc2 <MX_TIM2_Init+0x52>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001cb2:	a901      	add	r1, sp, #4
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_TIM2_Init+0x5c>)
 8001cb6:	f003 f977 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cba:	b920      	cbnz	r0, 8001cc6 <MX_TIM2_Init+0x56>
}
 8001cbc:	b00d      	add	sp, #52	@ 0x34
 8001cbe:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001cc2:	f7ff ff4b 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001cc6:	f7ff ff49 	bl	8001b5c <Error_Handler>
 8001cca:	bf00      	nop
 8001ccc:	200003c4 	.word	0x200003c4

08001cd0 <MX_TIM3_Init>:
static void MX_TIM3_Init(void) {
 8001cd0:	b500      	push	{lr}
 8001cd2:	b08d      	sub	sp, #52	@ 0x34
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001cd4:	2224      	movs	r2, #36	@ 0x24
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	a803      	add	r0, sp, #12
 8001cda:	f004 f88c 	bl	8005df6 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cde:	2300      	movs	r3, #0
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	9302      	str	r3, [sp, #8]
	htim3.Instance = TIM3;
 8001ce4:	4811      	ldr	r0, [pc, #68]	@ (8001d2c <MX_TIM3_Init+0x5c>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <MX_TIM3_Init+0x60>)
 8001ce8:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 0;
 8001cea:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 65535;
 8001cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf2:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	6183      	str	r3, [r0, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	9303      	str	r3, [sp, #12]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9305      	str	r3, [sp, #20]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d00:	2202      	movs	r2, #2
 8001d02:	9208      	str	r2, [sp, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d04:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001d06:	a903      	add	r1, sp, #12
 8001d08:	f002 fee8 	bl	8004adc <HAL_TIM_Encoder_Init>
 8001d0c:	b950      	cbnz	r0, 8001d24 <MX_TIM3_Init+0x54>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001d14:	a901      	add	r1, sp, #4
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_TIM3_Init+0x5c>)
 8001d18:	f003 f946 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1c:	b920      	cbnz	r0, 8001d28 <MX_TIM3_Init+0x58>
}
 8001d1e:	b00d      	add	sp, #52	@ 0x34
 8001d20:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001d24:	f7ff ff1a 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001d28:	f7ff ff18 	bl	8001b5c <Error_Handler>
 8001d2c:	2000037c 	.word	0x2000037c
 8001d30:	40000400 	.word	0x40000400

08001d34 <MX_ADC1_Init>:
static void MX_ADC1_Init(void) {
 8001d34:	b500      	push	{lr}
 8001d36:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	9303      	str	r3, [sp, #12]
	hadc1.Instance = ADC1;
 8001d40:	4820      	ldr	r0, [pc, #128]	@ (8001dc4 <MX_ADC1_Init+0x90>)
 8001d42:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <MX_ADC1_Init+0x94>)
 8001d44:	6002      	str	r2, [r0, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d4a:	6082      	str	r2, [r0, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	7302      	strb	r2, [r0, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d50:	7503      	strb	r3, [r0, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d52:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001d56:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d58:	6043      	str	r3, [r0, #4]
	hadc1.Init.NbrOfConversion = 4;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	6103      	str	r3, [r0, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001d5e:	f000 ff7d 	bl	8002c5c <HAL_ADC_Init>
 8001d62:	bb28      	cbnz	r0, 8001db0 <MX_ADC1_Init+0x7c>
	sConfig.Channel = ADC_CHANNEL_1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d68:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d6e:	a901      	add	r1, sp, #4
 8001d70:	4814      	ldr	r0, [pc, #80]	@ (8001dc4 <MX_ADC1_Init+0x90>)
 8001d72:	f000 fdcb 	bl	800290c <HAL_ADC_ConfigChannel>
 8001d76:	b9e8      	cbnz	r0, 8001db4 <MX_ADC1_Init+0x80>
	sConfig.Channel = ADC_CHANNEL_2;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d7c:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d7e:	a901      	add	r1, sp, #4
 8001d80:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <MX_ADC1_Init+0x90>)
 8001d82:	f000 fdc3 	bl	800290c <HAL_ADC_ConfigChannel>
 8001d86:	b9b8      	cbnz	r0, 8001db8 <MX_ADC1_Init+0x84>
	sConfig.Channel = ADC_CHANNEL_3;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d8c:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d8e:	a901      	add	r1, sp, #4
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <MX_ADC1_Init+0x90>)
 8001d92:	f000 fdbb 	bl	800290c <HAL_ADC_ConfigChannel>
 8001d96:	b988      	cbnz	r0, 8001dbc <MX_ADC1_Init+0x88>
	sConfig.Channel = ADC_CHANNEL_4;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d9c:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d9e:	eb0d 0103 	add.w	r1, sp, r3
 8001da2:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <MX_ADC1_Init+0x90>)
 8001da4:	f000 fdb2 	bl	800290c <HAL_ADC_ConfigChannel>
 8001da8:	b950      	cbnz	r0, 8001dc0 <MX_ADC1_Init+0x8c>
}
 8001daa:	b005      	add	sp, #20
 8001dac:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001db0:	f7ff fed4 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001db4:	f7ff fed2 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001db8:	f7ff fed0 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001dbc:	f7ff fece 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001dc0:	f7ff fecc 	bl	8001b5c <Error_Handler>
 8001dc4:	200004ec 	.word	0x200004ec
 8001dc8:	40012400 	.word	0x40012400

08001dcc <MX_TIM4_Init>:
static void MX_TIM4_Init(void) {
 8001dcc:	b500      	push	{lr}
 8001dce:	b087      	sub	sp, #28
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	9303      	str	r3, [sp, #12]
 8001dd6:	9304      	str	r3, [sp, #16]
 8001dd8:	9305      	str	r3, [sp, #20]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	9301      	str	r3, [sp, #4]
	htim4.Instance = TIM4;
 8001dde:	4814      	ldr	r0, [pc, #80]	@ (8001e30 <MX_TIM4_Init+0x64>)
 8001de0:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <MX_TIM4_Init+0x68>)
 8001de2:	6002      	str	r2, [r0, #0]
	htim4.Init.Prescaler = 720 - 1;
 8001de4:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001de8:	6042      	str	r2, [r0, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dea:	6083      	str	r3, [r0, #8]
	htim4.Init.Period = 1000 - 1;
 8001dec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001df0:	60c2      	str	r2, [r0, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	6103      	str	r3, [r0, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df4:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001df6:	f002 fe19 	bl	8004a2c <HAL_TIM_Base_Init>
 8001dfa:	b990      	cbnz	r0, 8001e22 <MX_TIM4_Init+0x56>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e00:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001e02:	a902      	add	r1, sp, #8
 8001e04:	480a      	ldr	r0, [pc, #40]	@ (8001e30 <MX_TIM4_Init+0x64>)
 8001e06:	f002 ff6d 	bl	8004ce4 <HAL_TIM_ConfigClockSource>
 8001e0a:	b960      	cbnz	r0, 8001e26 <MX_TIM4_Init+0x5a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e10:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001e12:	4669      	mov	r1, sp
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <MX_TIM4_Init+0x64>)
 8001e16:	f003 f8c7 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	b930      	cbnz	r0, 8001e2a <MX_TIM4_Init+0x5e>
}
 8001e1c:	b007      	add	sp, #28
 8001e1e:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001e22:	f7ff fe9b 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001e26:	f7ff fe99 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001e2a:	f7ff fe97 	bl	8001b5c <Error_Handler>
 8001e2e:	bf00      	nop
 8001e30:	20000334 	.word	0x20000334
 8001e34:	40000800 	.word	0x40000800

08001e38 <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 8001e38:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 8001e3a:	480a      	ldr	r0, [pc, #40]	@ (8001e64 <MX_USART1_UART_Init+0x2c>)
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <MX_USART1_UART_Init+0x30>)
 8001e3e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 9600;
 8001e40:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001e44:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	2300      	movs	r3, #0
 8001e48:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e4a:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e4c:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX;
 8001e4e:	2208      	movs	r2, #8
 8001e50:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001e56:	f003 f9c4 	bl	80051e2 <HAL_UART_Init>
 8001e5a:	b900      	cbnz	r0, 8001e5e <MX_USART1_UART_Init+0x26>
}
 8001e5c:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001e5e:	f7ff fe7d 	bl	8001b5c <Error_Handler>
 8001e62:	bf00      	nop
 8001e64:	200002ec 	.word	0x200002ec
 8001e68:	40013800 	.word	0x40013800

08001e6c <MX_I2C2_Init>:
static void MX_I2C2_Init(void) {
 8001e6c:	b508      	push	{r3, lr}
	hi2c2.Instance = I2C2;
 8001e6e:	480a      	ldr	r0, [pc, #40]	@ (8001e98 <MX_I2C2_Init+0x2c>)
 8001e70:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <MX_I2C2_Init+0x30>)
 8001e72:	6003      	str	r3, [r0, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <MX_I2C2_Init+0x34>)
 8001e76:	6043      	str	r3, [r0, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	6083      	str	r3, [r0, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001e7c:	60c3      	str	r3, [r0, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e82:	6102      	str	r2, [r0, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e84:	6143      	str	r3, [r0, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001e86:	6183      	str	r3, [r0, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e88:	61c3      	str	r3, [r0, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e8a:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001e8c:	f001 fd0c 	bl	80038a8 <HAL_I2C_Init>
 8001e90:	b900      	cbnz	r0, 8001e94 <MX_I2C2_Init+0x28>
}
 8001e92:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001e94:	f7ff fe62 	bl	8001b5c <Error_Handler>
 8001e98:	20000454 	.word	0x20000454
 8001e9c:	40005800 	.word	0x40005800
 8001ea0:	00061a80 	.word	0x00061a80

08001ea4 <SystemClock_Config>:
void SystemClock_Config(void) {
 8001ea4:	b500      	push	{lr}
 8001ea6:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ea8:	2228      	movs	r2, #40	@ 0x28
 8001eaa:	2100      	movs	r1, #0
 8001eac:	eb0d 0002 	add.w	r0, sp, r2
 8001eb0:	f003 ffa1 	bl	8005df6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9305      	str	r3, [sp, #20]
 8001eb8:	9306      	str	r3, [sp, #24]
 8001eba:	9307      	str	r3, [sp, #28]
 8001ebc:	9308      	str	r3, [sp, #32]
 8001ebe:	9309      	str	r3, [sp, #36]	@ 0x24
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	9303      	str	r3, [sp, #12]
 8001ec6:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	920a      	str	r2, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ecc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed2:	920e      	str	r2, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	9211      	str	r2, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ed8:	9312      	str	r3, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eda:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ede:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ee0:	a80a      	add	r0, sp, #40	@ 0x28
 8001ee2:	f002 f835 	bl	8003f50 <HAL_RCC_OscConfig>
 8001ee6:	b9c8      	cbnz	r0, 8001f1c <SystemClock_Config+0x78>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ee8:	230f      	movs	r3, #15
 8001eea:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eec:	2102      	movs	r1, #2
 8001eee:	9106      	str	r1, [sp, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ef4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef8:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001efa:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001efc:	a805      	add	r0, sp, #20
 8001efe:	f002 fa59 	bl	80043b4 <HAL_RCC_ClockConfig>
 8001f02:	b968      	cbnz	r0, 8001f20 <SystemClock_Config+0x7c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f04:	2302      	movs	r3, #2
 8001f06:	9301      	str	r3, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f0c:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001f0e:	a801      	add	r0, sp, #4
 8001f10:	f002 fb2c 	bl	800456c <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	b930      	cbnz	r0, 8001f24 <SystemClock_Config+0x80>
}
 8001f16:	b015      	add	sp, #84	@ 0x54
 8001f18:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001f1c:	f7ff fe1e 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001f20:	f7ff fe1c 	bl	8001b5c <Error_Handler>
		Error_Handler();
 8001f24:	f7ff fe1a 	bl	8001b5c <Error_Handler>

08001f28 <main>:
int main(void) {
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	b083      	sub	sp, #12
	HAL_Init();
 8001f2c:	f000 fc8c 	bl	8002848 <HAL_Init>
	SystemClock_Config();
 8001f30:	f7ff ffb8 	bl	8001ea4 <SystemClock_Config>
	MX_GPIO_Init();
 8001f34:	f7ff fd48 	bl	80019c8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001f38:	f7ff fdbe 	bl	8001ab8 <MX_DMA_Init>
	MX_TIM1_Init();
 8001f3c:	f7ff fe10 	bl	8001b60 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001f40:	f7ff fe96 	bl	8001c70 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001f44:	f7ff fec4 	bl	8001cd0 <MX_TIM3_Init>
	MX_ADC1_Init();
 8001f48:	f7ff fef4 	bl	8001d34 <MX_ADC1_Init>
	MX_TIM4_Init();
 8001f4c:	f7ff ff3e 	bl	8001dcc <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8001f50:	f7ff ff72 	bl	8001e38 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 8001f54:	f7ff ff8a 	bl	8001e6c <MX_I2C2_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f5e:	485b      	ldr	r0, [pc, #364]	@ (80020cc <main+0x1a4>)
 8001f60:	f001 fa09 	bl	8003376 <HAL_GPIO_WritePin>
	Motor_Init(&motor_right, &htim1, &htim1, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001f64:	4c5a      	ldr	r4, [pc, #360]	@ (80020d0 <main+0x1a8>)
 8001f66:	4d5b      	ldr	r5, [pc, #364]	@ (80020d4 <main+0x1ac>)
 8001f68:	2304      	movs	r3, #4
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	4622      	mov	r2, r4
 8001f70:	4621      	mov	r1, r4
 8001f72:	4628      	mov	r0, r5
 8001f74:	f7ff f972 	bl	800125c <Motor_Init>
	Motor_Init(&motor_left, &htim1, &htim1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001f78:	4e57      	ldr	r6, [pc, #348]	@ (80020d8 <main+0x1b0>)
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2308      	movs	r3, #8
 8001f80:	4622      	mov	r2, r4
 8001f82:	4621      	mov	r1, r4
 8001f84:	4630      	mov	r0, r6
 8001f86:	f7ff f969 	bl	800125c <Motor_Init>
	Encoder_Init(&encoder_left, &htim2);
 8001f8a:	4954      	ldr	r1, [pc, #336]	@ (80020dc <main+0x1b4>)
 8001f8c:	4854      	ldr	r0, [pc, #336]	@ (80020e0 <main+0x1b8>)
 8001f8e:	f7ff f8c5 	bl	800111c <Encoder_Init>
	Encoder_Init(&encoder_right, &htim3);
 8001f92:	4954      	ldr	r1, [pc, #336]	@ (80020e4 <main+0x1bc>)
 8001f94:	4854      	ldr	r0, [pc, #336]	@ (80020e8 <main+0x1c0>)
 8001f96:	f7ff f8c1 	bl	800111c <Encoder_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 8001f9a:	4854      	ldr	r0, [pc, #336]	@ (80020ec <main+0x1c4>)
 8001f9c:	f002 fc1c 	bl	80047d8 <HAL_TIM_Base_Start_IT>
	Set_Motor_speed(&motor_left, 0);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4630      	mov	r0, r6
 8001fa4:	f7ff f970 	bl	8001288 <Set_Motor_speed>
	Set_Motor_speed(&motor_right, 0);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4628      	mov	r0, r5
 8001fac:	f7ff f96c 	bl	8001288 <Set_Motor_speed>
	PID_init(&pid_forward_left, 1.2, 0.02, 0.9, 0, 0);
 8001fb0:	4f4f      	ldr	r7, [pc, #316]	@ (80020f0 <main+0x1c8>)
 8001fb2:	4d50      	ldr	r5, [pc, #320]	@ (80020f4 <main+0x1cc>)
 8001fb4:	4e50      	ldr	r6, [pc, #320]	@ (80020f8 <main+0x1d0>)
 8001fb6:	2400      	movs	r4, #0
 8001fb8:	9401      	str	r4, [sp, #4]
 8001fba:	9400      	str	r4, [sp, #0]
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	462a      	mov	r2, r5
 8001fc0:	4631      	mov	r1, r6
 8001fc2:	484e      	ldr	r0, [pc, #312]	@ (80020fc <main+0x1d4>)
 8001fc4:	f7ff faf4 	bl	80015b0 <PID_init>
	PID_init(&pid_forward_right, 1.2, 0.02, 0.9, 0, 0);
 8001fc8:	9401      	str	r4, [sp, #4]
 8001fca:	9400      	str	r4, [sp, #0]
 8001fcc:	463b      	mov	r3, r7
 8001fce:	462a      	mov	r2, r5
 8001fd0:	4631      	mov	r1, r6
 8001fd2:	484b      	ldr	r0, [pc, #300]	@ (8002100 <main+0x1d8>)
 8001fd4:	f7ff faec 	bl	80015b0 <PID_init>
	PID_init(&pid_steering, 8, 0, 3, 0, 0);
 8001fd8:	9401      	str	r4, [sp, #4]
 8001fda:	9400      	str	r4, [sp, #0]
 8001fdc:	4b49      	ldr	r3, [pc, #292]	@ (8002104 <main+0x1dc>)
 8001fde:	4622      	mov	r2, r4
 8001fe0:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8001fe4:	4848      	ldr	r0, [pc, #288]	@ (8002108 <main+0x1e0>)
 8001fe6:	f7ff fae3 	bl	80015b0 <PID_init>
	PID_init(&pid_turn_left, 20, 0.02, 0, 0, 0);
 8001fea:	9401      	str	r4, [sp, #4]
 8001fec:	9400      	str	r4, [sp, #0]
 8001fee:	4623      	mov	r3, r4
 8001ff0:	462a      	mov	r2, r5
 8001ff2:	4946      	ldr	r1, [pc, #280]	@ (800210c <main+0x1e4>)
 8001ff4:	4846      	ldr	r0, [pc, #280]	@ (8002110 <main+0x1e8>)
 8001ff6:	f7ff fadb 	bl	80015b0 <PID_init>
	PID_init(&pid_turn_right, 30, 0, 2, 0, 0);
 8001ffa:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 8001ffe:	9401      	str	r4, [sp, #4]
 8002000:	9400      	str	r4, [sp, #0]
 8002002:	462b      	mov	r3, r5
 8002004:	4622      	mov	r2, r4
 8002006:	4943      	ldr	r1, [pc, #268]	@ (8002114 <main+0x1ec>)
 8002008:	4843      	ldr	r0, [pc, #268]	@ (8002118 <main+0x1f0>)
 800200a:	f7ff fad1 	bl	80015b0 <PID_init>
	PID_init(&pid_wall_stable, 2, 0, 1, 0, 0);
 800200e:	9401      	str	r4, [sp, #4]
 8002010:	9400      	str	r4, [sp, #0]
 8002012:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002016:	4622      	mov	r2, r4
 8002018:	4629      	mov	r1, r5
 800201a:	4840      	ldr	r0, [pc, #256]	@ (800211c <main+0x1f4>)
 800201c:	f7ff fac8 	bl	80015b0 <PID_init>
	IR_init(&hadc1);
 8002020:	483f      	ldr	r0, [pc, #252]	@ (8002120 <main+0x1f8>)
 8002022:	f7ff fb13 	bl	800164c <IR_init>
	ir_calibration();
 8002026:	f7ff fc13 	bl	8001850 <ir_calibration>
	while (MPU6050_Init(&hi2c2) == 1)
 800202a:	483e      	ldr	r0, [pc, #248]	@ (8002124 <main+0x1fc>)
 800202c:	f000 f888 	bl	8002140 <MPU6050_Init>
 8002030:	2801      	cmp	r0, #1
 8002032:	d0fa      	beq.n	800202a <main+0x102>
	MPU6050_calibration(&hi2c2);
 8002034:	483b      	ldr	r0, [pc, #236]	@ (8002124 <main+0x1fc>)
 8002036:	f000 f917 	bl	8002268 <MPU6050_calibration>
	angle = 0;
 800203a:	4b3b      	ldr	r3, [pc, #236]	@ (8002128 <main+0x200>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
	mode();
 8002040:	f7ff f8d2 	bl	80011e8 <mode>
	while (IR_LL < WALL_L + 400) {
 8002044:	e001      	b.n	800204a <main+0x122>
		read_ir_adc();
 8002046:	f7ff fb2b 	bl	80016a0 <read_ir_adc>
	while (IR_LL < WALL_L + 400) {
 800204a:	4b38      	ldr	r3, [pc, #224]	@ (800212c <main+0x204>)
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	f500 70c8 	add.w	r0, r0, #400	@ 0x190
 8002052:	f7fe fe23 	bl	8000c9c <__aeabi_i2f>
 8002056:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <main+0x208>)
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	f7ff f82f 	bl	80010bc <__aeabi_fcmpgt>
 800205e:	2800      	cmp	r0, #0
 8002060:	d1f1      	bne.n	8002046 <main+0x11e>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002068:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 800206c:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 8002070:	f001 f981 	bl	8003376 <HAL_GPIO_WritePin>
	delay_ms(1000);
 8002074:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002078:	f7ff fc84 	bl	8001984 <delay_ms>
	Turn_left90();
 800207c:	f7ff f976 	bl	800136c <Turn_left90>
	delay_ms(10000);
 8002080:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002084:	f7ff fc7e 	bl	8001984 <delay_ms>
	Turn_right90();
 8002088:	f7ff fa00 	bl	800148c <Turn_right90>
	uint32_t prev_time = micros();
 800208c:	f7ff fc5c 	bl	8001948 <micros>
 8002090:	4604      	mov	r4, r0
	uint32_t curt = Millis;
 8002092:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <main+0x20c>)
 8002094:	681d      	ldr	r5, [r3, #0]
		MPU6050_getAngle(MPU6050.I2Cx, micros() - prev_time);
 8002096:	4b28      	ldr	r3, [pc, #160]	@ (8002138 <main+0x210>)
 8002098:	681e      	ldr	r6, [r3, #0]
 800209a:	f7ff fc55 	bl	8001948 <micros>
 800209e:	1b01      	subs	r1, r0, r4
 80020a0:	4630      	mov	r0, r6
 80020a2:	f000 f911 	bl	80022c8 <MPU6050_getAngle>
		prev_time = micros();
 80020a6:	f7ff fc4f 	bl	8001948 <micros>
 80020aa:	4604      	mov	r4, r0
		elapseMillis(10, curt);
 80020ac:	4629      	mov	r1, r5
 80020ae:	200a      	movs	r0, #10
 80020b0:	f7ff fc81 	bl	80019b6 <elapseMillis>
		curt = Millis;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <main+0x20c>)
 80020b6:	681d      	ldr	r5, [r3, #0]
		printf("%f\n", angle);
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <main+0x200>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	f7fe f9b4 	bl	8000428 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	481d      	ldr	r0, [pc, #116]	@ (800213c <main+0x214>)
 80020c6:	f003 fe41 	bl	8005d4c <iprintf>
	while (1) {
 80020ca:	e7e4      	b.n	8002096 <main+0x16e>
 80020cc:	40011000 	.word	0x40011000
 80020d0:	2000040c 	.word	0x2000040c
 80020d4:	2000021c 	.word	0x2000021c
 80020d8:	20000228 	.word	0x20000228
 80020dc:	200003c4 	.word	0x200003c4
 80020e0:	20000214 	.word	0x20000214
 80020e4:	2000037c 	.word	0x2000037c
 80020e8:	20000210 	.word	0x20000210
 80020ec:	20000334 	.word	0x20000334
 80020f0:	3f666666 	.word	0x3f666666
 80020f4:	3ca3d70a 	.word	0x3ca3d70a
 80020f8:	3f99999a 	.word	0x3f99999a
 80020fc:	2000029c 	.word	0x2000029c
 8002100:	20000288 	.word	0x20000288
 8002104:	40400000 	.word	0x40400000
 8002108:	20000274 	.word	0x20000274
 800210c:	41a00000 	.word	0x41a00000
 8002110:	20000260 	.word	0x20000260
 8002114:	41f00000 	.word	0x41f00000
 8002118:	2000024c 	.word	0x2000024c
 800211c:	20000238 	.word	0x20000238
 8002120:	200004ec 	.word	0x200004ec
 8002124:	20000454 	.word	0x20000454
 8002128:	20000528 	.word	0x20000528
 800212c:	200002d8 	.word	0x200002d8
 8002130:	200002c0 	.word	0x200002c0
 8002134:	200002e4 	.word	0x200002e4
 8002138:	20000530 	.word	0x20000530
 800213c:	08007c68 	.word	0x08007c68

08002140 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	4604      	mov	r4, r0
	uint8_t check;
	uint8_t Data;

	MPU6050.I2Cx = I2Cx;
 8002148:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <MPU6050_Init+0xa8>)
 800214a:	6018      	str	r0, [r3, #0]

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 800214c:	2364      	movs	r3, #100	@ 0x64
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	2301      	movs	r3, #1
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	f10d 0217 	add.w	r2, sp, #23
 8002158:	9200      	str	r2, [sp, #0]
 800215a:	2275      	movs	r2, #117	@ 0x75
 800215c:	21d0      	movs	r1, #208	@ 0xd0
 800215e:	f001 fd33 	bl	8003bc8 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002162:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002166:	2b68      	cmp	r3, #104	@ 0x68
 8002168:	d003      	beq.n	8002172 <MPU6050_Init+0x32>
		Data = 0x10;
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
				i2c_timeout);
		return 0;
	}
	return 1;
 800216a:	2001      	movs	r0, #1
}
 800216c:	b006      	add	sp, #24
 800216e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Data = 0;
 8002172:	2500      	movs	r5, #0
 8002174:	f88d 5016 	strb.w	r5, [sp, #22]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 8002178:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800217c:	f8cd 8008 	str.w	r8, [sp, #8]
 8002180:	2601      	movs	r6, #1
 8002182:	9601      	str	r6, [sp, #4]
 8002184:	f10d 0716 	add.w	r7, sp, #22
 8002188:	9700      	str	r7, [sp, #0]
 800218a:	4633      	mov	r3, r6
 800218c:	226b      	movs	r2, #107	@ 0x6b
 800218e:	21d0      	movs	r1, #208	@ 0xd0
 8002190:	4620      	mov	r0, r4
 8002192:	f001 fc67 	bl	8003a64 <HAL_I2C_Mem_Write>
		Data = 0x07;
 8002196:	2307      	movs	r3, #7
 8002198:	f88d 3016 	strb.w	r3, [sp, #22]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 800219c:	f8cd 8008 	str.w	r8, [sp, #8]
 80021a0:	9601      	str	r6, [sp, #4]
 80021a2:	9700      	str	r7, [sp, #0]
 80021a4:	4633      	mov	r3, r6
 80021a6:	2219      	movs	r2, #25
 80021a8:	21d0      	movs	r1, #208	@ 0xd0
 80021aa:	4620      	mov	r0, r4
 80021ac:	f001 fc5a 	bl	8003a64 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80021b0:	f88d 5016 	strb.w	r5, [sp, #22]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 80021b4:	f8cd 8008 	str.w	r8, [sp, #8]
 80021b8:	9601      	str	r6, [sp, #4]
 80021ba:	9700      	str	r7, [sp, #0]
 80021bc:	4633      	mov	r3, r6
 80021be:	221c      	movs	r2, #28
 80021c0:	21d0      	movs	r1, #208	@ 0xd0
 80021c2:	4620      	mov	r0, r4
 80021c4:	f001 fc4e 	bl	8003a64 <HAL_I2C_Mem_Write>
		Data = 0x10;
 80021c8:	2310      	movs	r3, #16
 80021ca:	f88d 3016 	strb.w	r3, [sp, #22]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 80021ce:	f8cd 8008 	str.w	r8, [sp, #8]
 80021d2:	9601      	str	r6, [sp, #4]
 80021d4:	9700      	str	r7, [sp, #0]
 80021d6:	4633      	mov	r3, r6
 80021d8:	221b      	movs	r2, #27
 80021da:	21d0      	movs	r1, #208	@ 0xd0
 80021dc:	4620      	mov	r0, r4
 80021de:	f001 fc41 	bl	8003a64 <HAL_I2C_Mem_Write>
		return 0;
 80021e2:	4628      	mov	r0, r5
 80021e4:	e7c2      	b.n	800216c <MPU6050_Init+0x2c>
 80021e6:	bf00      	nop
 80021e8:	20000530 	.word	0x20000530
 80021ec:	00000000 	.word	0x00000000

080021f0 <MPU6050_Read_Gyro>:
	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80021f0:	b510      	push	{r4, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	460c      	mov	r4, r1
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6,
 80021f6:	2364      	movs	r3, #100	@ 0x64
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	2306      	movs	r3, #6
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	ab04      	add	r3, sp, #16
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2301      	movs	r3, #1
 8002204:	2243      	movs	r2, #67	@ 0x43
 8002206:	21d0      	movs	r1, #208	@ 0xd0
 8002208:	f001 fcde 	bl	8003bc8 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800220c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8002210:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002214:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002218:	8523      	strh	r3, [r4, #40]	@ 0x28
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800221a:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800221e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002222:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002226:	8563      	strh	r3, [r4, #42]	@ 0x2a
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002228:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800222c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002230:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002234:	b200      	sxth	r0, r0
 8002236:	85a0      	strh	r0, [r4, #44]	@ 0x2c


	DataStruct->Gz = (DataStruct->Gyro_Z_RAW - gyro_offset) / 32.8;
 8002238:	f7fe f8e4 	bl	8000404 <__aeabi_i2d>
 800223c:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <MPU6050_Read_Gyro+0x70>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fd ff91 	bl	8000168 <__aeabi_dsub>
 8002246:	a304      	add	r3, pc, #16	@ (adr r3, 8002258 <MPU6050_Read_Gyro+0x68>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	f7fe fa6e 	bl	800072c <__aeabi_ddiv>
 8002250:	e9c4 0110 	strd	r0, r1, [r4, #64]	@ 0x40
//	DataStruct->Gz = (float) 0.1 * prev_gyro_z + (float) (1 - 0.1) * DataStruct->Gz;
//	prev_gyro_z = DataStruct->Gz;
}
 8002254:	b006      	add	sp, #24
 8002256:	bd10      	pop	{r4, pc}
 8002258:	66666666 	.word	0x66666666
 800225c:	40406666 	.word	0x40406666
 8002260:	20000520 	.word	0x20000520
 8002264:	00000000 	.word	0x00000000

08002268 <MPU6050_calibration>:

	return Kalman->angle;
}
;

void MPU6050_calibration(I2C_HandleTypeDef *I2Cx) {
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	4607      	mov	r7, r0
	for (int i = 0; i < 10000; i++) {
 800226c:	2400      	movs	r4, #0
 800226e:	e012      	b.n	8002296 <MPU6050_calibration+0x2e>
		MPU6050_Read_Gyro(I2Cx, &MPU6050);
 8002270:	4e13      	ldr	r6, [pc, #76]	@ (80022c0 <MPU6050_calibration+0x58>)
 8002272:	4631      	mov	r1, r6
 8002274:	4638      	mov	r0, r7
 8002276:	f7ff ffbb 	bl	80021f0 <MPU6050_Read_Gyro>
		gyro_offset += MPU6050.Gyro_Z_RAW;
 800227a:	4d12      	ldr	r5, [pc, #72]	@ (80022c4 <MPU6050_calibration+0x5c>)
 800227c:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	@ 0x2c
 8002280:	f7fe f8c0 	bl	8000404 <__aeabi_i2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	e9d5 0100 	ldrd	r0, r1, [r5]
 800228c:	f7fd ff6e 	bl	800016c <__adddf3>
 8002290:	e9c5 0100 	strd	r0, r1, [r5]
	for (int i = 0; i < 10000; i++) {
 8002294:	3401      	adds	r4, #1
 8002296:	f242 730f 	movw	r3, #9999	@ 0x270f
 800229a:	429c      	cmp	r4, r3
 800229c:	dde8      	ble.n	8002270 <MPU6050_calibration+0x8>
//		delay_ms(1);
	}
	gyro_offset /= 10000;
 800229e:	4c09      	ldr	r4, [pc, #36]	@ (80022c4 <MPU6050_calibration+0x5c>)
 80022a0:	a305      	add	r3, pc, #20	@ (adr r3, 80022b8 <MPU6050_calibration+0x50>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80022aa:	f7fe fa3f 	bl	800072c <__aeabi_ddiv>
 80022ae:	e9c4 0100 	strd	r0, r1, [r4]
}
 80022b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b4:	f3af 8000 	nop.w
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40c38800 	.word	0x40c38800
 80022c0:	20000530 	.word	0x20000530
 80022c4:	20000520 	.word	0x20000520

080022c8 <MPU6050_getAngle>:

void MPU6050_getAngle(I2C_HandleTypeDef *I2Cx, uint32_t delta_time) {
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	460c      	mov	r4, r1
	MPU6050_Read_Gyro(I2Cx, &MPU6050);
 80022cc:	4d12      	ldr	r5, [pc, #72]	@ (8002318 <MPU6050_getAngle+0x50>)
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7ff ff8e 	bl	80021f0 <MPU6050_Read_Gyro>
	angle += (MPU6050.Gz * delta_time) / 1000000;
 80022d4:	e9d5 6710 	ldrd	r6, r7, [r5, #64]	@ 0x40
 80022d8:	4620      	mov	r0, r4
 80022da:	f7fe f883 	bl	80003e4 <__aeabi_ui2d>
 80022de:	4632      	mov	r2, r6
 80022e0:	463b      	mov	r3, r7
 80022e2:	f7fe f8f9 	bl	80004d8 <__aeabi_dmul>
 80022e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8002310 <MPU6050_getAngle+0x48>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe fa1e 	bl	800072c <__aeabi_ddiv>
 80022f0:	4604      	mov	r4, r0
 80022f2:	460d      	mov	r5, r1
 80022f4:	4e09      	ldr	r6, [pc, #36]	@ (800231c <MPU6050_getAngle+0x54>)
 80022f6:	6830      	ldr	r0, [r6, #0]
 80022f8:	f7fe f896 	bl	8000428 <__aeabi_f2d>
 80022fc:	4622      	mov	r2, r4
 80022fe:	462b      	mov	r3, r5
 8002300:	f7fd ff34 	bl	800016c <__adddf3>
 8002304:	f7fe fbc0 	bl	8000a88 <__aeabi_d2f>
 8002308:	6030      	str	r0, [r6, #0]
}
 800230a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800230c:	f3af 8000 	nop.w
 8002310:	00000000 	.word	0x00000000
 8002314:	412e8480 	.word	0x412e8480
 8002318:	20000530 	.word	0x20000530
 800231c:	20000528 	.word	0x20000528

08002320 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002320:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002322:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HAL_MspInit+0x3c>)
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	619a      	str	r2, [r3, #24]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	f002 0201 	and.w	r2, r2, #1
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800233c:	61da      	str	r2, [r3, #28]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002348:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <HAL_MspInit+0x40>)
 800234a:	6853      	ldr	r3, [r2, #4]
 800234c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002350:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002356:	b002      	add	sp, #8
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000

08002364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002364:	b510      	push	{r4, lr}
 8002366:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	2300      	movs	r3, #0
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	9303      	str	r3, [sp, #12]
 800236e:	9304      	str	r3, [sp, #16]
 8002370:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8002372:	6802      	ldr	r2, [r0, #0]
 8002374:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <HAL_ADC_MspInit+0x8c>)
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <HAL_ADC_MspInit+0x1a>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800237a:	b006      	add	sp, #24
 800237c:	bd10      	pop	{r4, pc}
 800237e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002380:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238a:	619a      	str	r2, [r3, #24]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002392:	9200      	str	r2, [sp, #0]
 8002394:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	f042 0204 	orr.w	r2, r2, #4
 800239c:	619a      	str	r2, [r3, #24]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80023a8:	231e      	movs	r3, #30
 80023aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ac:	2303      	movs	r3, #3
 80023ae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	a902      	add	r1, sp, #8
 80023b2:	4810      	ldr	r0, [pc, #64]	@ (80023f4 <HAL_ADC_MspInit+0x90>)
 80023b4:	f000 feca 	bl	800314c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80023b8:	480f      	ldr	r0, [pc, #60]	@ (80023f8 <HAL_ADC_MspInit+0x94>)
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <HAL_ADC_MspInit+0x98>)
 80023bc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023be:	2300      	movs	r3, #0
 80023c0:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c2:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023cc:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023d2:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023d4:	2220      	movs	r2, #32
 80023d6:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023d8:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023da:	f000 fd81 	bl	8002ee0 <HAL_DMA_Init>
 80023de:	b918      	cbnz	r0, 80023e8 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_ADC_MspInit+0x94>)
 80023e2:	6223      	str	r3, [r4, #32]
 80023e4:	625c      	str	r4, [r3, #36]	@ 0x24
}
 80023e6:	e7c8      	b.n	800237a <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80023e8:	f7ff fbb8 	bl	8001b5c <Error_Handler>
 80023ec:	e7f8      	b.n	80023e0 <HAL_ADC_MspInit+0x7c>
 80023ee:	bf00      	nop
 80023f0:	40012400 	.word	0x40012400
 80023f4:	40010800 	.word	0x40010800
 80023f8:	200004a8 	.word	0x200004a8
 80023fc:	40020008 	.word	0x40020008

08002400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b510      	push	{r4, lr}
 8002402:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	2300      	movs	r3, #0
 8002406:	9302      	str	r3, [sp, #8]
 8002408:	9303      	str	r3, [sp, #12]
 800240a:	9304      	str	r3, [sp, #16]
 800240c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C2)
 800240e:	6802      	ldr	r2, [r0, #0]
 8002410:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <HAL_I2C_MspInit+0x58>)
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <HAL_I2C_MspInit+0x1a>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002416:	b006      	add	sp, #24
 8002418:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	4c10      	ldr	r4, [pc, #64]	@ (800245c <HAL_I2C_MspInit+0x5c>)
 800241c:	69a3      	ldr	r3, [r4, #24]
 800241e:	f043 0308 	orr.w	r3, r3, #8
 8002422:	61a3      	str	r3, [r4, #24]
 8002424:	69a3      	ldr	r3, [r4, #24]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800242e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002432:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002434:	2312      	movs	r3, #18
 8002436:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	a902      	add	r1, sp, #8
 800243e:	4808      	ldr	r0, [pc, #32]	@ (8002460 <HAL_I2C_MspInit+0x60>)
 8002440:	f000 fe84 	bl	800314c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002444:	69e3      	ldr	r3, [r4, #28]
 8002446:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800244a:	61e3      	str	r3, [r4, #28]
 800244c:	69e3      	ldr	r3, [r4, #28]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	9b01      	ldr	r3, [sp, #4]
}
 8002456:	e7de      	b.n	8002416 <HAL_I2C_MspInit+0x16>
 8002458:	40005800 	.word	0x40005800
 800245c:	40021000 	.word	0x40021000
 8002460:	40010c00 	.word	0x40010c00

08002464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002464:	b500      	push	{lr}
 8002466:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8002468:	6803      	ldr	r3, [r0, #0]
 800246a:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <HAL_TIM_Base_MspInit+0x54>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d005      	beq.n	800247c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002470:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <HAL_TIM_Base_MspInit+0x58>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002476:	b003      	add	sp, #12
 8002478:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800247c:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <HAL_TIM_Base_MspInit+0x5c>)
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	9b00      	ldr	r3, [sp, #0]
 8002490:	e7f1      	b.n	8002476 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002492:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_TIM_Base_MspInit+0x5c>)
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	f042 0204 	orr.w	r2, r2, #4
 800249a:	61da      	str	r2, [r3, #28]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	201e      	movs	r0, #30
 80024ac:	f000 fcd0 	bl	8002e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024b0:	201e      	movs	r0, #30
 80024b2:	f000 fcdd 	bl	8002e70 <HAL_NVIC_EnableIRQ>
}
 80024b6:	e7de      	b.n	8002476 <HAL_TIM_Base_MspInit+0x12>
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40000800 	.word	0x40000800
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024c4:	b510      	push	{r4, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	2300      	movs	r3, #0
 80024ca:	9306      	str	r3, [sp, #24]
 80024cc:	9307      	str	r3, [sp, #28]
 80024ce:	9308      	str	r3, [sp, #32]
 80024d0:	9309      	str	r3, [sp, #36]	@ 0x24
  if(htim_encoder->Instance==TIM2)
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d8:	d004      	beq.n	80024e4 <HAL_TIM_Encoder_MspInit+0x20>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM3)
 80024da:	4a37      	ldr	r2, [pc, #220]	@ (80025b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d040      	beq.n	8002562 <HAL_TIM_Encoder_MspInit+0x9e>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024e0:	b00a      	add	sp, #40	@ 0x28
 80024e2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024e4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	61da      	str	r2, [r3, #28]
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	f002 0201 	and.w	r2, r2, #1
 80024f6:	9201      	str	r2, [sp, #4]
 80024f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	f042 0204 	orr.w	r2, r2, #4
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	f002 0204 	and.w	r2, r2, #4
 8002508:	9202      	str	r2, [sp, #8]
 800250a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	f042 0208 	orr.w	r2, r2, #8
 8002512:	619a      	str	r2, [r3, #24]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	9303      	str	r3, [sp, #12]
 800251c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800251e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002522:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	a906      	add	r1, sp, #24
 8002526:	4825      	ldr	r0, [pc, #148]	@ (80025bc <HAL_TIM_Encoder_MspInit+0xf8>)
 8002528:	f000 fe10 	bl	800314c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800252c:	2308      	movs	r3, #8
 800252e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2400      	movs	r4, #0
 8002532:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	a906      	add	r1, sp, #24
 8002538:	4821      	ldr	r0, [pc, #132]	@ (80025c0 <HAL_TIM_Encoder_MspInit+0xfc>)
 800253a:	f000 fe07 	bl	800314c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800253e:	4a21      	ldr	r2, [pc, #132]	@ (80025c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8002540:	6853      	ldr	r3, [r2, #4]
 8002542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002546:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800254a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254e:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002550:	4622      	mov	r2, r4
 8002552:	4621      	mov	r1, r4
 8002554:	201c      	movs	r0, #28
 8002556:	f000 fc7b 	bl	8002e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800255a:	201c      	movs	r0, #28
 800255c:	f000 fc88 	bl	8002e70 <HAL_NVIC_EnableIRQ>
 8002560:	e7be      	b.n	80024e0 <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002562:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	f042 0202 	orr.w	r2, r2, #2
 800256a:	61da      	str	r2, [r3, #28]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	f002 0202 	and.w	r2, r2, #2
 8002572:	9204      	str	r2, [sp, #16]
 8002574:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	f042 0208 	orr.w	r2, r2, #8
 800257c:	619a      	str	r2, [r3, #24]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	9305      	str	r3, [sp, #20]
 8002586:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002588:	2330      	movs	r3, #48	@ 0x30
 800258a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	a906      	add	r1, sp, #24
 800258e:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002590:	f000 fddc 	bl	800314c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_TIM_Encoder_MspInit+0x100>)
 8002596:	6853      	ldr	r3, [r2, #4]
 8002598:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800259c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80025a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025a4:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	4611      	mov	r1, r2
 80025aa:	201d      	movs	r0, #29
 80025ac:	f000 fc50 	bl	8002e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025b0:	201d      	movs	r0, #29
 80025b2:	f000 fc5d 	bl	8002e70 <HAL_NVIC_EnableIRQ>
}
 80025b6:	e793      	b.n	80024e0 <HAL_TIM_Encoder_MspInit+0x1c>
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40010800 	.word	0x40010800
 80025c0:	40010c00 	.word	0x40010c00
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025cc:	b500      	push	{lr}
 80025ce:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	2300      	movs	r3, #0
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	9303      	str	r3, [sp, #12]
 80025d6:	9304      	str	r3, [sp, #16]
 80025d8:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80025da:	6802      	ldr	r2, [r0, #0]
 80025dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <HAL_TIM_MspPostInit+0x4c>)
 80025de:	429a      	cmp	r2, r3
 80025e0:	d002      	beq.n	80025e8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025e2:	b007      	add	sp, #28
 80025e4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	f042 0204 	orr.w	r2, r2, #4
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80025fe:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002602:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	a902      	add	r1, sp, #8
 800260e:	4803      	ldr	r0, [pc, #12]	@ (800261c <HAL_TIM_MspPostInit+0x50>)
 8002610:	f000 fd9c 	bl	800314c <HAL_GPIO_Init>
}
 8002614:	e7e5      	b.n	80025e2 <HAL_TIM_MspPostInit+0x16>
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40010800 	.word	0x40010800

08002620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002620:	b510      	push	{r4, lr}
 8002622:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	2300      	movs	r3, #0
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	9303      	str	r3, [sp, #12]
 800262a:	9304      	str	r3, [sp, #16]
 800262c:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 800262e:	6802      	ldr	r2, [r0, #0]
 8002630:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <HAL_UART_MspInit+0x7c>)
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_UART_MspInit+0x1a>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002636:	b006      	add	sp, #24
 8002638:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800263a:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002644:	619a      	str	r2, [r3, #24]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800264c:	9200      	str	r2, [sp, #0]
 800264e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	f042 0208 	orr.w	r2, r2, #8
 8002656:	619a      	str	r2, [r3, #24]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002662:	2340      	movs	r3, #64	@ 0x40
 8002664:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	4c0c      	ldr	r4, [pc, #48]	@ (80026a0 <HAL_UART_MspInit+0x80>)
 8002670:	a902      	add	r1, sp, #8
 8002672:	4620      	mov	r0, r4
 8002674:	f000 fd6a 	bl	800314c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267c:	2300      	movs	r3, #0
 800267e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002682:	a902      	add	r1, sp, #8
 8002684:	4620      	mov	r0, r4
 8002686:	f000 fd61 	bl	800314c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800268a:	4a06      	ldr	r2, [pc, #24]	@ (80026a4 <HAL_UART_MspInit+0x84>)
 800268c:	6853      	ldr	r3, [r2, #4]
 800268e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6053      	str	r3, [r2, #4]
}
 8002698:	e7cd      	b.n	8002636 <HAL_UART_MspInit+0x16>
 800269a:	bf00      	nop
 800269c:	40013800 	.word	0x40013800
 80026a0:	40010c00 	.word	0x40010c00
 80026a4:	40010000 	.word	0x40010000

080026a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80026a8:	e7fe      	b.n	80026a8 <NMI_Handler>

080026aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <HardFault_Handler>

080026ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <MemManage_Handler>

080026ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <BusFault_Handler>

080026b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <UsageFault_Handler>

080026b2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b2:	4770      	bx	lr

080026b4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b4:	4770      	bx	lr

080026b6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b6:	4770      	bx	lr

080026b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Millis++ ;
 80026ba:	4a03      	ldr	r2, [pc, #12]	@ (80026c8 <SysTick_Handler+0x10>)
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c2:	f000 f8d3 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c6:	bd08      	pop	{r3, pc}
 80026c8:	200002e4 	.word	0x200002e4

080026cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026ce:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <DMA1_Channel1_IRQHandler+0xc>)
 80026d0:	f000 fc9a 	bl	8003008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026d4:	bd08      	pop	{r3, pc}
 80026d6:	bf00      	nop
 80026d8:	200004a8 	.word	0x200004a8

080026dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026de:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <TIM2_IRQHandler+0xc>)
 80026e0:	f002 f8b3 	bl	800484a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026e4:	bd08      	pop	{r3, pc}
 80026e6:	bf00      	nop
 80026e8:	200003c4 	.word	0x200003c4

080026ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026ee:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <TIM3_IRQHandler+0xc>)
 80026f0:	f002 f8ab 	bl	800484a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026f4:	bd08      	pop	{r3, pc}
 80026f6:	bf00      	nop
 80026f8:	2000037c 	.word	0x2000037c

080026fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026fe:	4802      	ldr	r0, [pc, #8]	@ (8002708 <TIM4_IRQHandler+0xc>)
 8002700:	f002 f8a3 	bl	800484a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002704:	bd08      	pop	{r3, pc}
 8002706:	bf00      	nop
 8002708:	20000334 	.word	0x20000334

0800270c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800270c:	2001      	movs	r0, #1
 800270e:	4770      	bx	lr

08002710 <_kill>:

int _kill(int pid, int sig)
{
 8002710:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002712:	f003 fbc3 	bl	8005e9c <__errno>
 8002716:	2316      	movs	r3, #22
 8002718:	6003      	str	r3, [r0, #0]
  return -1;
}
 800271a:	f04f 30ff 	mov.w	r0, #4294967295
 800271e:	bd08      	pop	{r3, pc}

08002720 <_exit>:

void _exit (int status)
{
 8002720:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002722:	f04f 31ff 	mov.w	r1, #4294967295
 8002726:	f7ff fff3 	bl	8002710 <_kill>
  while (1) {}    /* Make sure we hang here */
 800272a:	e7fe      	b.n	800272a <_exit+0xa>

0800272c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	460c      	mov	r4, r1
 8002730:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002732:	2500      	movs	r5, #0
 8002734:	e006      	b.n	8002744 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002736:	f3af 8000 	nop.w
 800273a:	4621      	mov	r1, r4
 800273c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002740:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002742:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002744:	42b5      	cmp	r5, r6
 8002746:	dbf6      	blt.n	8002736 <_read+0xa>
  }

  return len;
}
 8002748:	4630      	mov	r0, r6
 800274a:	bd70      	pop	{r4, r5, r6, pc}

0800274c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	4770      	bx	lr

08002752 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002752:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002756:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002758:	2000      	movs	r0, #0
 800275a:	4770      	bx	lr

0800275c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800275c:	2001      	movs	r0, #1
 800275e:	4770      	bx	lr

08002760 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002760:	2000      	movs	r0, #0
 8002762:	4770      	bx	lr

08002764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002764:	b510      	push	{r4, lr}
 8002766:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002768:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <_sbrk+0x38>)
 800276a:	490d      	ldr	r1, [pc, #52]	@ (80027a0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	480d      	ldr	r0, [pc, #52]	@ (80027a4 <_sbrk+0x40>)
 800276e:	6800      	ldr	r0, [r0, #0]
 8002770:	b140      	cbz	r0, 8002784 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002772:	480c      	ldr	r0, [pc, #48]	@ (80027a4 <_sbrk+0x40>)
 8002774:	6800      	ldr	r0, [r0, #0]
 8002776:	4403      	add	r3, r0
 8002778:	1a52      	subs	r2, r2, r1
 800277a:	4293      	cmp	r3, r2
 800277c:	d806      	bhi.n	800278c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800277e:	4a09      	ldr	r2, [pc, #36]	@ (80027a4 <_sbrk+0x40>)
 8002780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002782:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002784:	4807      	ldr	r0, [pc, #28]	@ (80027a4 <_sbrk+0x40>)
 8002786:	4c08      	ldr	r4, [pc, #32]	@ (80027a8 <_sbrk+0x44>)
 8002788:	6004      	str	r4, [r0, #0]
 800278a:	e7f2      	b.n	8002772 <_sbrk+0xe>
    errno = ENOMEM;
 800278c:	f003 fb86 	bl	8005e9c <__errno>
 8002790:	230c      	movs	r3, #12
 8002792:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	e7f3      	b.n	8002782 <_sbrk+0x1e>
 800279a:	bf00      	nop
 800279c:	20005000 	.word	0x20005000
 80027a0:	00000400 	.word	0x00000400
 80027a4:	20000590 	.word	0x20000590
 80027a8:	200006e8 	.word	0x200006e8

080027ac <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ac:	4770      	bx	lr
	...

080027b0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80027b0:	f7ff fffc 	bl	80027ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b4:	480b      	ldr	r0, [pc, #44]	@ (80027e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027b6:	490c      	ldr	r1, [pc, #48]	@ (80027e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027b8:	4a0c      	ldr	r2, [pc, #48]	@ (80027ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a09      	ldr	r2, [pc, #36]	@ (80027f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027cc:	4c09      	ldr	r4, [pc, #36]	@ (80027f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027da:	f003 fb65 	bl	8005ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027de:	f7ff fba3 	bl	8001f28 <main>
  bx lr
 80027e2:	4770      	bx	lr
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80027ec:	08008018 	.word	0x08008018
  ldr r2, =_sbss
 80027f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80027f4:	200006e4 	.word	0x200006e4

080027f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC1_2_IRQHandler>
	...

080027fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027fc:	b510      	push	{r4, lr}
 80027fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_InitTick+0x40>)
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002808:	fbb3 f3f2 	udiv	r3, r3, r2
 800280c:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <HAL_InitTick+0x44>)
 800280e:	6810      	ldr	r0, [r2, #0]
 8002810:	fbb0 f0f3 	udiv	r0, r0, r3
 8002814:	f000 fb3a 	bl	8002e8c <HAL_SYSTICK_Config>
 8002818:	b968      	cbnz	r0, 8002836 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	2c0f      	cmp	r4, #15
 800281c:	d901      	bls.n	8002822 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800281e:	2001      	movs	r0, #1
 8002820:	e00a      	b.n	8002838 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002822:	2200      	movs	r2, #0
 8002824:	4621      	mov	r1, r4
 8002826:	f04f 30ff 	mov.w	r0, #4294967295
 800282a:	f000 fb11 	bl	8002e50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_InitTick+0x48>)
 8002830:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002832:	2000      	movs	r0, #0
 8002834:	e000      	b.n	8002838 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002836:	2001      	movs	r0, #1
}
 8002838:	bd10      	pop	{r4, pc}
 800283a:	bf00      	nop
 800283c:	20000008 	.word	0x20000008
 8002840:	20000004 	.word	0x20000004
 8002844:	2000000c 	.word	0x2000000c

08002848 <HAL_Init>:
{
 8002848:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284a:	4a07      	ldr	r2, [pc, #28]	@ (8002868 <HAL_Init+0x20>)
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002854:	2003      	movs	r0, #3
 8002856:	f000 fae9 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800285a:	200f      	movs	r0, #15
 800285c:	f7ff ffce 	bl	80027fc <HAL_InitTick>
  HAL_MspInit();
 8002860:	f7ff fd5e 	bl	8002320 <HAL_MspInit>
}
 8002864:	2000      	movs	r0, #0
 8002866:	bd08      	pop	{r3, pc}
 8002868:	40022000 	.word	0x40022000

0800286c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800286c:	4a03      	ldr	r2, [pc, #12]	@ (800287c <HAL_IncTick+0x10>)
 800286e:	6811      	ldr	r1, [r2, #0]
 8002870:	4b03      	ldr	r3, [pc, #12]	@ (8002880 <HAL_IncTick+0x14>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	440b      	add	r3, r1
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000594 	.word	0x20000594
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002884:	4b01      	ldr	r3, [pc, #4]	@ (800288c <HAL_GetTick+0x8>)
 8002886:	6818      	ldr	r0, [r3, #0]
}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000594 	.word	0x20000594

08002890 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002890:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002892:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002894:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002896:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800289a:	d11e      	bne.n	80028da <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800289c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800289e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	6892      	ldr	r2, [r2, #8]
 80028a8:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80028ac:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80028b0:	d003      	beq.n	80028ba <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f92c 	bl	8001b10 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80028b8:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028ba:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028bc:	2a00      	cmp	r2, #0
 80028be:	d1f8      	bne.n	80028b2 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028ca:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 80028ce:	d1f0      	bne.n	80028b2 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80028d8:	e7eb      	b.n	80028b2 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4798      	blx	r3
}
 80028e0:	e7ea      	b.n	80028b8 <ADC_DMAConvCplt+0x28>

080028e2 <HAL_ADC_ConvHalfCpltCallback>:
}
 80028e2:	4770      	bx	lr

080028e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028e4:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028e6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80028e8:	f7ff fffb 	bl	80028e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ec:	bd08      	pop	{r3, pc}

080028ee <HAL_ADC_ErrorCallback>:
}
 80028ee:	4770      	bx	lr

080028f0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028f0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028f2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80028f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028fa:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002904:	f7ff fff3 	bl	80028ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002908:	bd08      	pop	{r3, pc}
	...

0800290c <HAL_ADC_ConfigChannel>:
{ 
 800290c:	b430      	push	{r4, r5}
 800290e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002910:	2200      	movs	r2, #0
 8002912:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002914:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002918:	2a01      	cmp	r2, #1
 800291a:	f000 808f 	beq.w	8002a3c <HAL_ADC_ConfigChannel+0x130>
 800291e:	4603      	mov	r3, r0
 8002920:	2201      	movs	r2, #1
 8002922:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8002926:	684a      	ldr	r2, [r1, #4]
 8002928:	2a06      	cmp	r2, #6
 800292a:	d82d      	bhi.n	8002988 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800292c:	6804      	ldr	r4, [r0, #0]
 800292e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002930:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002934:	3a05      	subs	r2, #5
 8002936:	f04f 0c1f 	mov.w	ip, #31
 800293a:	fa0c fc02 	lsl.w	ip, ip, r2
 800293e:	ea20 000c 	bic.w	r0, r0, ip
 8002942:	680d      	ldr	r5, [r1, #0]
 8002944:	fa05 f202 	lsl.w	r2, r5, r2
 8002948:	4302      	orrs	r2, r0
 800294a:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800294c:	680a      	ldr	r2, [r1, #0]
 800294e:	2a09      	cmp	r2, #9
 8002950:	d938      	bls.n	80029c4 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002952:	681c      	ldr	r4, [r3, #0]
 8002954:	68e0      	ldr	r0, [r4, #12]
 8002956:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800295a:	3a1e      	subs	r2, #30
 800295c:	f04f 0c07 	mov.w	ip, #7
 8002960:	fa0c fc02 	lsl.w	ip, ip, r2
 8002964:	ea20 000c 	bic.w	r0, r0, ip
 8002968:	688d      	ldr	r5, [r1, #8]
 800296a:	fa05 f202 	lsl.w	r2, r5, r2
 800296e:	4302      	orrs	r2, r0
 8002970:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002972:	680a      	ldr	r2, [r1, #0]
 8002974:	3a10      	subs	r2, #16
 8002976:	2a01      	cmp	r2, #1
 8002978:	d934      	bls.n	80029e4 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002982:	b002      	add	sp, #8
 8002984:	bc30      	pop	{r4, r5}
 8002986:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002988:	2a0c      	cmp	r2, #12
 800298a:	d80d      	bhi.n	80029a8 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800298c:	6805      	ldr	r5, [r0, #0]
 800298e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002990:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002994:	3a23      	subs	r2, #35	@ 0x23
 8002996:	241f      	movs	r4, #31
 8002998:	4094      	lsls	r4, r2
 800299a:	ea20 0004 	bic.w	r0, r0, r4
 800299e:	680c      	ldr	r4, [r1, #0]
 80029a0:	4094      	lsls	r4, r2
 80029a2:	4320      	orrs	r0, r4
 80029a4:	6328      	str	r0, [r5, #48]	@ 0x30
 80029a6:	e7d1      	b.n	800294c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029a8:	6805      	ldr	r5, [r0, #0]
 80029aa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80029ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029b0:	3a41      	subs	r2, #65	@ 0x41
 80029b2:	241f      	movs	r4, #31
 80029b4:	4094      	lsls	r4, r2
 80029b6:	ea20 0004 	bic.w	r0, r0, r4
 80029ba:	680c      	ldr	r4, [r1, #0]
 80029bc:	4094      	lsls	r4, r2
 80029be:	4320      	orrs	r0, r4
 80029c0:	62e8      	str	r0, [r5, #44]	@ 0x2c
 80029c2:	e7c3      	b.n	800294c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029c4:	681c      	ldr	r4, [r3, #0]
 80029c6:	6920      	ldr	r0, [r4, #16]
 80029c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80029cc:	f04f 0c07 	mov.w	ip, #7
 80029d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80029d4:	ea20 000c 	bic.w	r0, r0, ip
 80029d8:	688d      	ldr	r5, [r1, #8]
 80029da:	fa05 f202 	lsl.w	r2, r5, r2
 80029de:	4302      	orrs	r2, r0
 80029e0:	6122      	str	r2, [r4, #16]
 80029e2:	e7c6      	b.n	8002972 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4816      	ldr	r0, [pc, #88]	@ (8002a40 <HAL_ADC_ConfigChannel+0x134>)
 80029e8:	4282      	cmp	r2, r0
 80029ea:	d005      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ee:	f042 0220 	orr.w	r2, r2, #32
 80029f2:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
 80029f6:	e7c1      	b.n	800297c <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029f8:	6890      	ldr	r0, [r2, #8]
 80029fa:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 80029fe:	d11b      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a00:	6890      	ldr	r0, [r2, #8]
 8002a02:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002a06:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a08:	680a      	ldr	r2, [r1, #0]
 8002a0a:	2a10      	cmp	r2, #16
 8002a0c:	d001      	beq.n	8002a12 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0e:	2000      	movs	r0, #0
 8002a10:	e7b4      	b.n	800297c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a12:	4a0c      	ldr	r2, [pc, #48]	@ (8002a44 <HAL_ADC_ConfigChannel+0x138>)
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	490c      	ldr	r1, [pc, #48]	@ (8002a48 <HAL_ADC_ConfigChannel+0x13c>)
 8002a18:	fba1 1202 	umull	r1, r2, r1, r2
 8002a1c:	0c92      	lsrs	r2, r2, #18
 8002a1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002a26:	e002      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8002a28:	9a01      	ldr	r2, [sp, #4]
 8002a2a:	3a01      	subs	r2, #1
 8002a2c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002a2e:	9a01      	ldr	r2, [sp, #4]
 8002a30:	2a00      	cmp	r2, #0
 8002a32:	d1f9      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a34:	2000      	movs	r0, #0
 8002a36:	e7a1      	b.n	800297c <HAL_ADC_ConfigChannel+0x70>
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e79f      	b.n	800297c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	e7a0      	b.n	8002982 <HAL_ADC_ConfigChannel+0x76>
 8002a40:	40012400 	.word	0x40012400
 8002a44:	20000004 	.word	0x20000004
 8002a48:	431bde83 	.word	0x431bde83

08002a4c <ADC_Enable>:
{
 8002a4c:	b530      	push	{r4, r5, lr}
 8002a4e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	f012 0f01 	tst.w	r2, #1
 8002a5c:	d133      	bne.n	8002ac6 <ADC_Enable+0x7a>
 8002a5e:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a68:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <ADC_Enable+0x80>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <ADC_Enable+0x84>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0c9b      	lsrs	r3, r3, #18
 8002a74:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002a76:	e002      	b.n	8002a7e <ADC_Enable+0x32>
      wait_loop_index--;
 8002a78:	9b01      	ldr	r3, [sp, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002a7e:	9b01      	ldr	r3, [sp, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f9      	bne.n	8002a78 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8002a84:	f7ff fefe 	bl	8002884 <HAL_GetTick>
 8002a88:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f013 0f01 	tst.w	r3, #1
 8002a92:	d116      	bne.n	8002ac2 <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a94:	f7ff fef6 	bl	8002884 <HAL_GetTick>
 8002a98:	1b43      	subs	r3, r0, r5
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d9f5      	bls.n	8002a8a <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f013 0f01 	tst.w	r3, #1
 8002aa6:	d1f0      	bne.n	8002a8a <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002aaa:	f043 0310 	orr.w	r3, r3, #16
 8002aae:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8002abe:	2001      	movs	r0, #1
 8002ac0:	e002      	b.n	8002ac8 <ADC_Enable+0x7c>
  return HAL_OK;
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	e000      	b.n	8002ac8 <ADC_Enable+0x7c>
 8002ac6:	2000      	movs	r0, #0
}
 8002ac8:	b003      	add	sp, #12
 8002aca:	bd30      	pop	{r4, r5, pc}
 8002acc:	20000004 	.word	0x20000004
 8002ad0:	431bde83 	.word	0x431bde83

08002ad4 <HAL_ADC_Start_DMA>:
{
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	460d      	mov	r5, r1
 8002ada:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002adc:	6801      	ldr	r1, [r0, #0]
 8002ade:	4844      	ldr	r0, [pc, #272]	@ (8002bf0 <HAL_ADC_Start_DMA+0x11c>)
 8002ae0:	4281      	cmp	r1, r0
 8002ae2:	d059      	beq.n	8002b98 <HAL_ADC_Start_DMA+0xc4>
 8002ae4:	4b43      	ldr	r3, [pc, #268]	@ (8002bf4 <HAL_ADC_Start_DMA+0x120>)
 8002ae6:	4299      	cmp	r1, r3
 8002ae8:	d056      	beq.n	8002b98 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8002aea:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d07c      	beq.n	8002bec <HAL_ADC_Start_DMA+0x118>
 8002af2:	2301      	movs	r3, #1
 8002af4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7ff ffa7 	bl	8002a4c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002afe:	4607      	mov	r7, r0
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d16e      	bne.n	8002be2 <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8002b04:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002b06:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8002b0a:	f021 0101 	bic.w	r1, r1, #1
 8002b0e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002b12:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b14:	6822      	ldr	r2, [r4, #0]
 8002b16:	4b37      	ldr	r3, [pc, #220]	@ (8002bf4 <HAL_ADC_Start_DMA+0x120>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d044      	beq.n	8002ba6 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b1e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b22:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b24:	6853      	ldr	r3, [r2, #4]
 8002b26:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002b2a:	d005      	beq.n	8002b38 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b36:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b3a:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002b3e:	d048      	beq.n	8002bd2 <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002b42:	f023 0306 	bic.w	r3, r3, #6
 8002b46:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b4e:	6a23      	ldr	r3, [r4, #32]
 8002b50:	4a29      	ldr	r2, [pc, #164]	@ (8002bf8 <HAL_ADC_Start_DMA+0x124>)
 8002b52:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b54:	6a23      	ldr	r3, [r4, #32]
 8002b56:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <HAL_ADC_Start_DMA+0x128>)
 8002b58:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b5a:	6a23      	ldr	r3, [r4, #32]
 8002b5c:	4a28      	ldr	r2, [pc, #160]	@ (8002c00 <HAL_ADC_Start_DMA+0x12c>)
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	f06f 0202 	mvn.w	r2, #2
 8002b66:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b68:	6822      	ldr	r2, [r4, #0]
 8002b6a:	6893      	ldr	r3, [r2, #8]
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b70:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b72:	6821      	ldr	r1, [r4, #0]
 8002b74:	4633      	mov	r3, r6
 8002b76:	462a      	mov	r2, r5
 8002b78:	314c      	adds	r1, #76	@ 0x4c
 8002b7a:	6a20      	ldr	r0, [r4, #32]
 8002b7c:	f000 f9e6 	bl	8002f4c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002b88:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002b8c:	d024      	beq.n	8002bd8 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	e027      	b.n	8002be8 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002b98:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_ADC_Start_DMA+0x11c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002ba0:	d0a3      	beq.n	8002aea <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8002ba2:	2701      	movs	r7, #1
 8002ba4:	e020      	b.n	8002be8 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ba6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002bb0:	d0b4      	beq.n	8002b1c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bb8:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_ADC_Start_DMA+0x11c>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002bc2:	d0b9      	beq.n	8002b38 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bc4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002bc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bd0:	e7b2      	b.n	8002b38 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bd6:	e7b7      	b.n	8002b48 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 8002be2:	2300      	movs	r3, #0
 8002be4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002be8:	4638      	mov	r0, r7
 8002bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002bec:	2702      	movs	r7, #2
 8002bee:	e7fb      	b.n	8002be8 <HAL_ADC_Start_DMA+0x114>
 8002bf0:	40012400 	.word	0x40012400
 8002bf4:	40012800 	.word	0x40012800
 8002bf8:	08002891 	.word	0x08002891
 8002bfc:	080028e5 	.word	0x080028e5
 8002c00:	080028f1 	.word	0x080028f1

08002c04 <ADC_ConversionStop_Disable>:
{
 8002c04:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c06:	6803      	ldr	r3, [r0, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	f012 0f01 	tst.w	r2, #1
 8002c0e:	d101      	bne.n	8002c14 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002c10:	2000      	movs	r0, #0
}
 8002c12:	bd38      	pop	{r3, r4, r5, pc}
 8002c14:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002c1e:	f7ff fe31 	bl	8002884 <HAL_GetTick>
 8002c22:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f013 0f01 	tst.w	r3, #1
 8002c2c:	d013      	beq.n	8002c56 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c2e:	f7ff fe29 	bl	8002884 <HAL_GetTick>
 8002c32:	1b43      	subs	r3, r0, r5
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d9f5      	bls.n	8002c24 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f013 0f01 	tst.w	r3, #1
 8002c40:	d0f0      	beq.n	8002c24 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c42:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c44:	f043 0310 	orr.w	r3, r3, #16
 8002c48:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8002c52:	2001      	movs	r0, #1
 8002c54:	e7dd      	b.n	8002c12 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002c56:	2000      	movs	r0, #0
 8002c58:	e7db      	b.n	8002c12 <ADC_ConversionStop_Disable+0xe>
	...

08002c5c <HAL_ADC_Init>:
  if(hadc == NULL)
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d07b      	beq.n	8002d58 <HAL_ADC_Init+0xfc>
{
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c64:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04d      	beq.n	8002d06 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7ff ffca 	bl	8002c04 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c72:	f013 0310 	ands.w	r3, r3, #16
 8002c76:	d169      	bne.n	8002d4c <HAL_ADC_Init+0xf0>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d167      	bne.n	8002d4c <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8002c7c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002c7e:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8002c82:	f022 0202 	bic.w	r2, r2, #2
 8002c86:	f042 0202 	orr.w	r2, r2, #2
 8002c8a:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c8c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c8e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c90:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c92:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c98:	68a5      	ldr	r5, [r4, #8]
 8002c9a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8002c9e:	d002      	beq.n	8002ca6 <HAL_ADC_Init+0x4a>
 8002ca0:	2d01      	cmp	r5, #1
 8002ca2:	d036      	beq.n	8002d12 <HAL_ADC_Init+0xb6>
 8002ca4:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca6:	7d26      	ldrb	r6, [r4, #20]
 8002ca8:	2e01      	cmp	r6, #1
 8002caa:	d035      	beq.n	8002d18 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8002cac:	6826      	ldr	r6, [r4, #0]
 8002cae:	6871      	ldr	r1, [r6, #4]
 8002cb0:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8002cb4:	4329      	orrs	r1, r5
 8002cb6:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002cb8:	6825      	ldr	r5, [r4, #0]
 8002cba:	68ae      	ldr	r6, [r5, #8]
 8002cbc:	4927      	ldr	r1, [pc, #156]	@ (8002d5c <HAL_ADC_Init+0x100>)
 8002cbe:	4031      	ands	r1, r6
 8002cc0:	4311      	orrs	r1, r2
 8002cc2:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002cc4:	68a1      	ldr	r1, [r4, #8]
 8002cc6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002cca:	d001      	beq.n	8002cd0 <HAL_ADC_Init+0x74>
 8002ccc:	2901      	cmp	r1, #1
 8002cce:	d102      	bne.n	8002cd6 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cd0:	6923      	ldr	r3, [r4, #16]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002cd6:	6825      	ldr	r5, [r4, #0]
 8002cd8:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8002cda:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <HAL_ADC_Init+0x104>)
 8002ce8:	400b      	ands	r3, r1
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d025      	beq.n	8002d3a <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8002cee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002cf0:	f023 0312 	bic.w	r3, r3, #18
 8002cf4:	f043 0310 	orr.w	r3, r3, #16
 8002cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
 8002d04:	e027      	b.n	8002d56 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d06:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002d08:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8002d0c:	f7ff fb2a 	bl	8002364 <HAL_ADC_MspInit>
 8002d10:	e7ab      	b.n	8002c6a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d12:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8002d16:	e7c6      	b.n	8002ca6 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d18:	b931      	cbnz	r1, 8002d28 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d1a:	69a1      	ldr	r1, [r4, #24]
 8002d1c:	3901      	subs	r1, #1
 8002d1e:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002d22:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8002d26:	e7c1      	b.n	8002cac <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d28:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002d2a:	f041 0120 	orr.w	r1, r1, #32
 8002d2e:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d30:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002d32:	f041 0101 	orr.w	r1, r1, #1
 8002d36:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8002d38:	e7b8      	b.n	8002cac <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002d3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d40:	f023 0303 	bic.w	r3, r3, #3
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d4a:	e004      	b.n	8002d56 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8002d54:	2001      	movs	r0, #1
}
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002d58:	2001      	movs	r0, #1
}
 8002d5a:	4770      	bx	lr
 8002d5c:	ffe1f7fd 	.word	0xffe1f7fd
 8002d60:	ff1f0efe 	.word	0xff1f0efe

08002d64 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8002d64:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d028      	beq.n	8002dbe <HAL_ADC_Stop_DMA+0x5a>
{
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002d70:	2301      	movs	r3, #1
 8002d72:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d76:	f7ff ff45 	bl	8002c04 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002d7a:	b950      	cbnz	r0, 8002d92 <HAL_ADC_Stop_DMA+0x2e>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	6893      	ldr	r3, [r2, #8]
 8002d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d84:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002d86:	6a22      	ldr	r2, [r4, #32]
 8002d88:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_ADC_Stop_DMA+0x36>
  __HAL_UNLOCK(hadc);
 8002d92:	2300      	movs	r3, #0
 8002d94:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002d98:	bd10      	pop	{r4, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 f911 	bl	8002fc2 <HAL_DMA_Abort>
      if (tmp_hal_status == HAL_OK)
 8002da0:	b940      	cbnz	r0, 8002db4 <HAL_ADC_Stop_DMA+0x50>
        ADC_STATE_CLR_SET(hadc->State,
 8002da2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002da4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002db2:	e7ee      	b.n	8002d92 <HAL_ADC_Stop_DMA+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002db4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002dbc:	e7e9      	b.n	8002d92 <HAL_ADC_Stop_DMA+0x2e>
  __HAL_LOCK(hadc);
 8002dbe:	2002      	movs	r0, #2
}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	db08      	blt.n	8002dda <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc8:	0109      	lsls	r1, r1, #4
 8002dca:	b2c9      	uxtb	r1, r1
 8002dcc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002dd0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002dd4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002dd8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	f000 000f 	and.w	r0, r0, #15
 8002dde:	0109      	lsls	r1, r1, #4
 8002de0:	b2c9      	uxtb	r1, r1
 8002de2:	4b01      	ldr	r3, [pc, #4]	@ (8002de8 <__NVIC_SetPriority+0x24>)
 8002de4:	5419      	strb	r1, [r3, r0]
  }
}
 8002de6:	4770      	bx	lr
 8002de8:	e000ed14 	.word	0xe000ed14

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dee:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df2:	f1c0 0c07 	rsb	ip, r0, #7
 8002df6:	f1bc 0f04 	cmp.w	ip, #4
 8002dfa:	bf28      	it	cs
 8002dfc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e00:	1d03      	adds	r3, r0, #4
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d90f      	bls.n	8002e26 <NVIC_EncodePriority+0x3a>
 8002e06:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 3eff 	mov.w	lr, #4294967295
 8002e0c:	fa0e f00c 	lsl.w	r0, lr, ip
 8002e10:	ea21 0100 	bic.w	r1, r1, r0
 8002e14:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e16:	fa0e fe03 	lsl.w	lr, lr, r3
 8002e1a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002e1e:	ea41 0002 	orr.w	r0, r1, r2
 8002e22:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	2300      	movs	r3, #0
 8002e28:	e7ee      	b.n	8002e08 <NVIC_EncodePriority+0x1c>
	...

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4a07      	ldr	r2, [pc, #28]	@ (8002e4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002e2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e38:	0200      	lsls	r0, r0, #8
 8002e3a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002e48:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e50:	b510      	push	{r4, lr}
 8002e52:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_NVIC_SetPriority+0x1c>)
 8002e56:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e58:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002e5c:	f7ff ffc6 	bl	8002dec <NVIC_EncodePriority>
 8002e60:	4601      	mov	r1, r0
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7ff ffae 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e70:	2800      	cmp	r0, #0
 8002e72:	db07      	blt.n	8002e84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e74:	f000 021f 	and.w	r2, r0, #31
 8002e78:	0940      	lsrs	r0, r0, #5
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4093      	lsls	r3, r2
 8002e7e:	4a02      	ldr	r2, [pc, #8]	@ (8002e88 <HAL_NVIC_EnableIRQ+0x18>)
 8002e80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000e100 	.word	0xe000e100

08002e8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	3801      	subs	r0, #1
 8002e8e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002e92:	d20b      	bcs.n	8002eac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002e98:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9a:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <HAL_SYSTICK_Config+0x24>)
 8002e9c:	21f0      	movs	r1, #240	@ 0xf0
 8002e9e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eaa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002eac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb4:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eb6:	2401      	movs	r4, #1
 8002eb8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002eba:	40ac      	lsls	r4, r5
 8002ebc:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8002ebe:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ec0:	6804      	ldr	r4, [r0, #0]
 8002ec2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ec4:	6843      	ldr	r3, [r0, #4]
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d005      	beq.n	8002ed6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002eca:	6803      	ldr	r3, [r0, #0]
 8002ecc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002ece:	6803      	ldr	r3, [r0, #0]
 8002ed0:	60da      	str	r2, [r3, #12]
  }
}
 8002ed2:	bc30      	pop	{r4, r5}
 8002ed4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002ed6:	6803      	ldr	r3, [r0, #0]
 8002ed8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002eda:	6803      	ldr	r3, [r0, #0]
 8002edc:	60d9      	str	r1, [r3, #12]
 8002ede:	e7f8      	b.n	8002ed2 <DMA_SetConfig+0x1e>

08002ee0 <HAL_DMA_Init>:
  if(hdma == NULL)
 8002ee0:	b360      	cbz	r0, 8002f3c <HAL_DMA_Init+0x5c>
{
 8002ee2:	b410      	push	{r4}
 8002ee4:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ee6:	6801      	ldr	r1, [r0, #0]
 8002ee8:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <HAL_DMA_Init+0x60>)
 8002eea:	440b      	add	r3, r1
 8002eec:	4815      	ldr	r0, [pc, #84]	@ (8002f44 <HAL_DMA_Init+0x64>)
 8002eee:	fba0 0303 	umull	r0, r3, r0, r3
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <HAL_DMA_Init+0x68>)
 8002efa:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8002f02:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f04:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 8002f08:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
  tmp |=  hdma->Init.Direction        |
 8002f0c:	6853      	ldr	r3, [r2, #4]
 8002f0e:	6894      	ldr	r4, [r2, #8]
 8002f10:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f12:	68d4      	ldr	r4, [r2, #12]
 8002f14:	4323      	orrs	r3, r4
 8002f16:	6914      	ldr	r4, [r2, #16]
 8002f18:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1a:	6954      	ldr	r4, [r2, #20]
 8002f1c:	4323      	orrs	r3, r4
 8002f1e:	6994      	ldr	r4, [r2, #24]
 8002f20:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f22:	69d4      	ldr	r4, [r2, #28]
 8002f24:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002f26:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8002f28:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002f34:	f882 0020 	strb.w	r0, [r2, #32]
}
 8002f38:	bc10      	pop	{r4}
 8002f3a:	4770      	bx	lr
    return HAL_ERROR;
 8002f3c:	2001      	movs	r0, #1
}
 8002f3e:	4770      	bx	lr
 8002f40:	bffdfff8 	.word	0xbffdfff8
 8002f44:	cccccccd 	.word	0xcccccccd
 8002f48:	40020000 	.word	0x40020000

08002f4c <HAL_DMA_Start_IT>:
{
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002f50:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002f54:	2801      	cmp	r0, #1
 8002f56:	d032      	beq.n	8002fbe <HAL_DMA_Start_IT+0x72>
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f5e:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8002f62:	b2c0      	uxtb	r0, r0
 8002f64:	2801      	cmp	r0, #1
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002f6e:	2002      	movs	r0, #2
}
 8002f70:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f72:	2002      	movs	r0, #2
 8002f74:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f78:	2000      	movs	r0, #0
 8002f7a:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8002f7c:	6825      	ldr	r5, [r4, #0]
 8002f7e:	6828      	ldr	r0, [r5, #0]
 8002f80:	f020 0001 	bic.w	r0, r0, #1
 8002f84:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff ff94 	bl	8002eb4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002f8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002f8e:	b15b      	cbz	r3, 8002fa8 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f90:	6822      	ldr	r2, [r4, #0]
 8002f92:	6813      	ldr	r3, [r2, #0]
 8002f94:	f043 030e 	orr.w	r3, r3, #14
 8002f98:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002f9a:	6822      	ldr	r2, [r4, #0]
 8002f9c:	6813      	ldr	r3, [r2, #0]
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	e7e3      	b.n	8002f70 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fa8:	6822      	ldr	r2, [r4, #0]
 8002faa:	6813      	ldr	r3, [r2, #0]
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	6813      	ldr	r3, [r2, #0]
 8002fb6:	f043 030a 	orr.w	r3, r3, #10
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	e7ed      	b.n	8002f9a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002fbe:	2002      	movs	r0, #2
 8002fc0:	e7d6      	b.n	8002f70 <HAL_DMA_Start_IT+0x24>

08002fc2 <HAL_DMA_Abort>:
{
 8002fc2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc4:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	2a02      	cmp	r2, #2
 8002fcc:	d006      	beq.n	8002fdc <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fce:	2204      	movs	r2, #4
 8002fd0:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8002fd8:	2001      	movs	r0, #1
 8002fda:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fdc:	6801      	ldr	r1, [r0, #0]
 8002fde:	680a      	ldr	r2, [r1, #0]
 8002fe0:	f022 020e 	bic.w	r2, r2, #14
 8002fe4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002fe6:	6801      	ldr	r1, [r0, #0]
 8002fe8:	680a      	ldr	r2, [r1, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ff0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002ff2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffa:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002ffc:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 8003000:	2000      	movs	r0, #0
 8003002:	f883 0020 	strb.w	r0, [r3, #32]
}
 8003006:	4770      	bx	lr

08003008 <HAL_DMA_IRQHandler>:
{
 8003008:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800300a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800300c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800300e:	6804      	ldr	r4, [r0, #0]
 8003010:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003012:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003014:	2304      	movs	r3, #4
 8003016:	408b      	lsls	r3, r1
 8003018:	4213      	tst	r3, r2
 800301a:	d035      	beq.n	8003088 <HAL_DMA_IRQHandler+0x80>
 800301c:	f015 0f04 	tst.w	r5, #4
 8003020:	d032      	beq.n	8003088 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	f013 0f20 	tst.w	r3, #32
 8003028:	d103      	bne.n	8003032 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003032:	6803      	ldr	r3, [r0, #0]
 8003034:	4a43      	ldr	r2, [pc, #268]	@ (8003144 <HAL_DMA_IRQHandler+0x13c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d014      	beq.n	8003064 <HAL_DMA_IRQHandler+0x5c>
 800303a:	3214      	adds	r2, #20
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_IRQHandler+0x6a>
 8003040:	3214      	adds	r2, #20
 8003042:	4293      	cmp	r3, r2
 8003044:	d017      	beq.n	8003076 <HAL_DMA_IRQHandler+0x6e>
 8003046:	3214      	adds	r2, #20
 8003048:	4293      	cmp	r3, r2
 800304a:	d017      	beq.n	800307c <HAL_DMA_IRQHandler+0x74>
 800304c:	3214      	adds	r2, #20
 800304e:	4293      	cmp	r3, r2
 8003050:	d017      	beq.n	8003082 <HAL_DMA_IRQHandler+0x7a>
 8003052:	3214      	adds	r2, #20
 8003054:	4293      	cmp	r3, r2
 8003056:	d002      	beq.n	800305e <HAL_DMA_IRQHandler+0x56>
 8003058:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800305c:	e003      	b.n	8003066 <HAL_DMA_IRQHandler+0x5e>
 800305e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003062:	e000      	b.n	8003066 <HAL_DMA_IRQHandler+0x5e>
 8003064:	2204      	movs	r2, #4
 8003066:	4b38      	ldr	r3, [pc, #224]	@ (8003148 <HAL_DMA_IRQHandler+0x140>)
 8003068:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800306a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800306c:	b103      	cbz	r3, 8003070 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 800306e:	4798      	blx	r3
}
 8003070:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003072:	2240      	movs	r2, #64	@ 0x40
 8003074:	e7f7      	b.n	8003066 <HAL_DMA_IRQHandler+0x5e>
 8003076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800307a:	e7f4      	b.n	8003066 <HAL_DMA_IRQHandler+0x5e>
 800307c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003080:	e7f1      	b.n	8003066 <HAL_DMA_IRQHandler+0x5e>
 8003082:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003086:	e7ee      	b.n	8003066 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003088:	2302      	movs	r3, #2
 800308a:	408b      	lsls	r3, r1
 800308c:	4213      	tst	r3, r2
 800308e:	d03c      	beq.n	800310a <HAL_DMA_IRQHandler+0x102>
 8003090:	f015 0f02 	tst.w	r5, #2
 8003094:	d039      	beq.n	800310a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	f013 0f20 	tst.w	r3, #32
 800309c:	d106      	bne.n	80030ac <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	f023 030a 	bic.w	r3, r3, #10
 80030a4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030ac:	6803      	ldr	r3, [r0, #0]
 80030ae:	4a25      	ldr	r2, [pc, #148]	@ (8003144 <HAL_DMA_IRQHandler+0x13c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d014      	beq.n	80030de <HAL_DMA_IRQHandler+0xd6>
 80030b4:	3214      	adds	r2, #20
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01c      	beq.n	80030f4 <HAL_DMA_IRQHandler+0xec>
 80030ba:	3214      	adds	r2, #20
 80030bc:	4293      	cmp	r3, r2
 80030be:	d01b      	beq.n	80030f8 <HAL_DMA_IRQHandler+0xf0>
 80030c0:	3214      	adds	r2, #20
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01b      	beq.n	80030fe <HAL_DMA_IRQHandler+0xf6>
 80030c6:	3214      	adds	r2, #20
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d01b      	beq.n	8003104 <HAL_DMA_IRQHandler+0xfc>
 80030cc:	3214      	adds	r2, #20
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d002      	beq.n	80030d8 <HAL_DMA_IRQHandler+0xd0>
 80030d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030d6:	e003      	b.n	80030e0 <HAL_DMA_IRQHandler+0xd8>
 80030d8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80030dc:	e000      	b.n	80030e0 <HAL_DMA_IRQHandler+0xd8>
 80030de:	2202      	movs	r2, #2
 80030e0:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <HAL_DMA_IRQHandler+0x140>)
 80030e2:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80030e4:	2300      	movs	r3, #0
 80030e6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80030ea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0bf      	beq.n	8003070 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 80030f0:	4798      	blx	r3
 80030f2:	e7bd      	b.n	8003070 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030f4:	2220      	movs	r2, #32
 80030f6:	e7f3      	b.n	80030e0 <HAL_DMA_IRQHandler+0xd8>
 80030f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fc:	e7f0      	b.n	80030e0 <HAL_DMA_IRQHandler+0xd8>
 80030fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003102:	e7ed      	b.n	80030e0 <HAL_DMA_IRQHandler+0xd8>
 8003104:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003108:	e7ea      	b.n	80030e0 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800310a:	2308      	movs	r3, #8
 800310c:	408b      	lsls	r3, r1
 800310e:	4213      	tst	r3, r2
 8003110:	d0ae      	beq.n	8003070 <HAL_DMA_IRQHandler+0x68>
 8003112:	f015 0f08 	tst.w	r5, #8
 8003116:	d0ab      	beq.n	8003070 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	f023 030e 	bic.w	r3, r3, #14
 800311e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003120:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003122:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003124:	2301      	movs	r3, #1
 8003126:	fa03 f202 	lsl.w	r2, r3, r2
 800312a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800312c:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800312e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003132:	2300      	movs	r3, #0
 8003134:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003138:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800313a:	2b00      	cmp	r3, #0
 800313c:	d098      	beq.n	8003070 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 800313e:	4798      	blx	r3
  return;
 8003140:	e796      	b.n	8003070 <HAL_DMA_IRQHandler+0x68>
 8003142:	bf00      	nop
 8003144:	40020008 	.word	0x40020008
 8003148:	40020000 	.word	0x40020000

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003150:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8003152:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003154:	e0a2      	b.n	800329c <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003156:	4d7e      	ldr	r5, [pc, #504]	@ (8003350 <HAL_GPIO_Init+0x204>)
 8003158:	42ab      	cmp	r3, r5
 800315a:	d010      	beq.n	800317e <HAL_GPIO_Init+0x32>
 800315c:	d907      	bls.n	800316e <HAL_GPIO_Init+0x22>
 800315e:	4d7d      	ldr	r5, [pc, #500]	@ (8003354 <HAL_GPIO_Init+0x208>)
 8003160:	42ab      	cmp	r3, r5
 8003162:	d00c      	beq.n	800317e <HAL_GPIO_Init+0x32>
 8003164:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8003168:	42ab      	cmp	r3, r5
 800316a:	d008      	beq.n	800317e <HAL_GPIO_Init+0x32>
 800316c:	e013      	b.n	8003196 <HAL_GPIO_Init+0x4a>
 800316e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003172:	42ab      	cmp	r3, r5
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x32>
 8003176:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 800317a:	42ab      	cmp	r3, r5
 800317c:	d107      	bne.n	800318e <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800317e:	688b      	ldr	r3, [r1, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d055      	beq.n	8003230 <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003184:	2b01      	cmp	r3, #1
 8003186:	d04e      	beq.n	8003226 <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8003188:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800318a:	2408      	movs	r4, #8
 800318c:	e003      	b.n	8003196 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800318e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003192:	42ab      	cmp	r3, r5
 8003194:	d0f3      	beq.n	800317e <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003196:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800319a:	d84b      	bhi.n	8003234 <HAL_GPIO_Init+0xe8>
 800319c:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800319e:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031a2:	6833      	ldr	r3, [r6, #0]
 80031a4:	250f      	movs	r5, #15
 80031a6:	4095      	lsls	r5, r2
 80031a8:	ea23 0305 	bic.w	r3, r3, r5
 80031ac:	fa04 f202 	lsl.w	r2, r4, r2
 80031b0:	4313      	orrs	r3, r2
 80031b2:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031b4:	684b      	ldr	r3, [r1, #4]
 80031b6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80031ba:	d06d      	beq.n	8003298 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031bc:	4b66      	ldr	r3, [pc, #408]	@ (8003358 <HAL_GPIO_Init+0x20c>)
 80031be:	699a      	ldr	r2, [r3, #24]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	619a      	str	r2, [r3, #24]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80031d0:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80031d4:	1c95      	adds	r5, r2, #2
 80031d6:	4b61      	ldr	r3, [pc, #388]	@ (800335c <HAL_GPIO_Init+0x210>)
 80031d8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031dc:	f00c 0503 	and.w	r5, ip, #3
 80031e0:	00ad      	lsls	r5, r5, #2
 80031e2:	230f      	movs	r3, #15
 80031e4:	40ab      	lsls	r3, r5
 80031e6:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003360 <HAL_GPIO_Init+0x214>)
 80031ec:	4298      	cmp	r0, r3
 80031ee:	d028      	beq.n	8003242 <HAL_GPIO_Init+0xf6>
 80031f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031f4:	4298      	cmp	r0, r3
 80031f6:	f000 808d 	beq.w	8003314 <HAL_GPIO_Init+0x1c8>
 80031fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031fe:	4298      	cmp	r0, r3
 8003200:	f000 808a 	beq.w	8003318 <HAL_GPIO_Init+0x1cc>
 8003204:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003208:	4298      	cmp	r0, r3
 800320a:	d018      	beq.n	800323e <HAL_GPIO_Init+0xf2>
 800320c:	2304      	movs	r3, #4
 800320e:	e019      	b.n	8003244 <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003210:	68cc      	ldr	r4, [r1, #12]
          break;
 8003212:	e7c0      	b.n	8003196 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003214:	68cc      	ldr	r4, [r1, #12]
 8003216:	3404      	adds	r4, #4
          break;
 8003218:	e7bd      	b.n	8003196 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800321a:	68cc      	ldr	r4, [r1, #12]
 800321c:	3408      	adds	r4, #8
          break;
 800321e:	e7ba      	b.n	8003196 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003220:	68cc      	ldr	r4, [r1, #12]
 8003222:	340c      	adds	r4, #12
          break;
 8003224:	e7b7      	b.n	8003196 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8003226:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003228:	2408      	movs	r4, #8
 800322a:	e7b4      	b.n	8003196 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800322c:	2400      	movs	r4, #0
 800322e:	e7b2      	b.n	8003196 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003230:	2404      	movs	r4, #4
 8003232:	e7b0      	b.n	8003196 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003234:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003236:	f1ac 0208 	sub.w	r2, ip, #8
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	e7b1      	b.n	80031a2 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800323e:	2303      	movs	r3, #3
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0xf8>
 8003242:	2300      	movs	r3, #0
 8003244:	40ab      	lsls	r3, r5
 8003246:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8003248:	3202      	adds	r2, #2
 800324a:	4d44      	ldr	r5, [pc, #272]	@ (800335c <HAL_GPIO_Init+0x210>)
 800324c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003250:	684b      	ldr	r3, [r1, #4]
 8003252:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003256:	d061      	beq.n	800331c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003258:	4a42      	ldr	r2, [pc, #264]	@ (8003364 <HAL_GPIO_Init+0x218>)
 800325a:	6893      	ldr	r3, [r2, #8]
 800325c:	ea43 030e 	orr.w	r3, r3, lr
 8003260:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003262:	684b      	ldr	r3, [r1, #4]
 8003264:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8003268:	d05e      	beq.n	8003328 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800326a:	4a3e      	ldr	r2, [pc, #248]	@ (8003364 <HAL_GPIO_Init+0x218>)
 800326c:	68d3      	ldr	r3, [r2, #12]
 800326e:	ea43 030e 	orr.w	r3, r3, lr
 8003272:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003274:	684b      	ldr	r3, [r1, #4]
 8003276:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800327a:	d05b      	beq.n	8003334 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800327c:	4a39      	ldr	r2, [pc, #228]	@ (8003364 <HAL_GPIO_Init+0x218>)
 800327e:	6853      	ldr	r3, [r2, #4]
 8003280:	ea43 030e 	orr.w	r3, r3, lr
 8003284:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003286:	684b      	ldr	r3, [r1, #4]
 8003288:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800328c:	d058      	beq.n	8003340 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800328e:	4a35      	ldr	r2, [pc, #212]	@ (8003364 <HAL_GPIO_Init+0x218>)
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	ea43 030e 	orr.w	r3, r3, lr
 8003296:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8003298:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800329c:	680b      	ldr	r3, [r1, #0]
 800329e:	fa33 f20c 	lsrs.w	r2, r3, ip
 80032a2:	d053      	beq.n	800334c <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80032a4:	2201      	movs	r2, #1
 80032a6:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032aa:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 80032ae:	ea32 0303 	bics.w	r3, r2, r3
 80032b2:	d1f1      	bne.n	8003298 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80032b4:	684b      	ldr	r3, [r1, #4]
 80032b6:	2b12      	cmp	r3, #18
 80032b8:	f63f af4d 	bhi.w	8003156 <HAL_GPIO_Init+0xa>
 80032bc:	2b12      	cmp	r3, #18
 80032be:	f63f af6a 	bhi.w	8003196 <HAL_GPIO_Init+0x4a>
 80032c2:	a501      	add	r5, pc, #4	@ (adr r5, 80032c8 <HAL_GPIO_Init+0x17c>)
 80032c4:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80032c8:	0800317f 	.word	0x0800317f
 80032cc:	08003211 	.word	0x08003211
 80032d0:	0800321b 	.word	0x0800321b
 80032d4:	0800322d 	.word	0x0800322d
 80032d8:	08003197 	.word	0x08003197
 80032dc:	08003197 	.word	0x08003197
 80032e0:	08003197 	.word	0x08003197
 80032e4:	08003197 	.word	0x08003197
 80032e8:	08003197 	.word	0x08003197
 80032ec:	08003197 	.word	0x08003197
 80032f0:	08003197 	.word	0x08003197
 80032f4:	08003197 	.word	0x08003197
 80032f8:	08003197 	.word	0x08003197
 80032fc:	08003197 	.word	0x08003197
 8003300:	08003197 	.word	0x08003197
 8003304:	08003197 	.word	0x08003197
 8003308:	08003197 	.word	0x08003197
 800330c:	08003215 	.word	0x08003215
 8003310:	08003221 	.word	0x08003221
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003314:	2301      	movs	r3, #1
 8003316:	e795      	b.n	8003244 <HAL_GPIO_Init+0xf8>
 8003318:	2302      	movs	r3, #2
 800331a:	e793      	b.n	8003244 <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800331c:	4a11      	ldr	r2, [pc, #68]	@ (8003364 <HAL_GPIO_Init+0x218>)
 800331e:	6893      	ldr	r3, [r2, #8]
 8003320:	ea23 030e 	bic.w	r3, r3, lr
 8003324:	6093      	str	r3, [r2, #8]
 8003326:	e79c      	b.n	8003262 <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003328:	4a0e      	ldr	r2, [pc, #56]	@ (8003364 <HAL_GPIO_Init+0x218>)
 800332a:	68d3      	ldr	r3, [r2, #12]
 800332c:	ea23 030e 	bic.w	r3, r3, lr
 8003330:	60d3      	str	r3, [r2, #12]
 8003332:	e79f      	b.n	8003274 <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003334:	4a0b      	ldr	r2, [pc, #44]	@ (8003364 <HAL_GPIO_Init+0x218>)
 8003336:	6853      	ldr	r3, [r2, #4]
 8003338:	ea23 030e 	bic.w	r3, r3, lr
 800333c:	6053      	str	r3, [r2, #4]
 800333e:	e7a2      	b.n	8003286 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003340:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <HAL_GPIO_Init+0x218>)
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	ea23 030e 	bic.w	r3, r3, lr
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e7a5      	b.n	8003298 <HAL_GPIO_Init+0x14c>
  }
}
 800334c:	b002      	add	sp, #8
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	10220000 	.word	0x10220000
 8003354:	10310000 	.word	0x10310000
 8003358:	40021000 	.word	0x40021000
 800335c:	40010000 	.word	0x40010000
 8003360:	40010800 	.word	0x40010800
 8003364:	40010400 	.word	0x40010400

08003368 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003368:	6883      	ldr	r3, [r0, #8]
 800336a:	4219      	tst	r1, r3
 800336c:	d001      	beq.n	8003372 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800336e:	2001      	movs	r0, #1
 8003370:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003372:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003374:	4770      	bx	lr

08003376 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003376:	b10a      	cbz	r2, 800337c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003378:	6101      	str	r1, [r0, #16]
 800337a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800337c:	0409      	lsls	r1, r1, #16
 800337e:	6101      	str	r1, [r0, #16]
  }
}
 8003380:	4770      	bx	lr

08003382 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003382:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003384:	ea01 0203 	and.w	r2, r1, r3
 8003388:	ea21 0103 	bic.w	r1, r1, r3
 800338c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003390:	6101      	str	r1, [r0, #16]
}
 8003392:	4770      	bx	lr

08003394 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003394:	6803      	ldr	r3, [r0, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800339c:	d101      	bne.n	80033a2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800339e:	2000      	movs	r0, #0
}
 80033a0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033a6:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033ac:	2220      	movs	r2, #32
 80033ae:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033b6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80033b8:	f042 0204 	orr.w	r2, r2, #4
 80033bc:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80033be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80033c2:	2001      	movs	r0, #1
 80033c4:	4770      	bx	lr

080033c6 <I2C_WaitOnFlagUntilTimeout>:
{
 80033c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ca:	4606      	mov	r6, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	4617      	mov	r7, r2
 80033d0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d2:	e03b      	b.n	800344c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7ff fa56 	bl	8002884 <HAL_GetTick>
 80033d8:	9b06      	ldr	r3, [sp, #24]
 80033da:	1ac0      	subs	r0, r0, r3
 80033dc:	4540      	cmp	r0, r8
 80033de:	d802      	bhi.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x20>
 80033e0:	f1b8 0f00 	cmp.w	r8, #0
 80033e4:	d132      	bne.n	800344c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033e6:	2d01      	cmp	r5, #1
 80033e8:	d018      	beq.n	800341c <I2C_WaitOnFlagUntilTimeout+0x56>
 80033ea:	6833      	ldr	r3, [r6, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	ea24 0303 	bic.w	r3, r4, r3
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	429f      	cmp	r7, r3
 80033fc:	d126      	bne.n	800344c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033fe:	2300      	movs	r3, #0
 8003400:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003402:	2220      	movs	r2, #32
 8003404:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003408:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800340e:	f042 0220 	orr.w	r2, r2, #32
 8003412:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003414:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
 800341a:	e027      	b.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800341c:	6833      	ldr	r3, [r6, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	ea24 0303 	bic.w	r3, r4, r3
 8003424:	b29b      	uxth	r3, r3
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	e7e5      	b.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342e:	6833      	ldr	r3, [r6, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	ea24 0c03 	bic.w	ip, r4, r3
 8003436:	fa1f fc8c 	uxth.w	ip, ip
 800343a:	fabc fc8c 	clz	ip, ip
 800343e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003442:	4567      	cmp	r7, ip
 8003444:	d111      	bne.n	800346a <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8003446:	f1b8 3fff 	cmp.w	r8, #4294967295
 800344a:	d1c3      	bne.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8003450:	2d01      	cmp	r5, #1
 8003452:	d0ec      	beq.n	800342e <I2C_WaitOnFlagUntilTimeout+0x68>
 8003454:	6833      	ldr	r3, [r6, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	ea24 0c03 	bic.w	ip, r4, r3
 800345c:	fa1f fc8c 	uxth.w	ip, ip
 8003460:	fabc fc8c 	clz	ip, ip
 8003464:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003468:	e7eb      	b.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 800346a:	2000      	movs	r0, #0
}
 800346c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003470 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003474:	4605      	mov	r5, r0
 8003476:	460e      	mov	r6, r1
 8003478:	4690      	mov	r8, r2
 800347a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800347c:	e053      	b.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003484:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003486:	682b      	ldr	r3, [r5, #0]
 8003488:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800348c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	2300      	movs	r3, #0
 8003490:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003492:	2220      	movs	r2, #32
 8003494:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003498:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800349e:	f042 0204 	orr.w	r2, r2, #4
 80034a2:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80034a4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80034a8:	2001      	movs	r0, #1
 80034aa:	e04a      	b.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7ff f9ea 	bl	8002884 <HAL_GetTick>
 80034b0:	eba0 0009 	sub.w	r0, r0, r9
 80034b4:	4540      	cmp	r0, r8
 80034b6:	d802      	bhi.n	80034be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80034b8:	f1b8 0f00 	cmp.w	r8, #0
 80034bc:	d133      	bne.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034be:	2f01      	cmp	r7, #1
 80034c0:	d017      	beq.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80034c2:	682b      	ldr	r3, [r5, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	ea26 0303 	bic.w	r3, r6, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b00      	subs	r3, #0
 80034ce:	bf18      	it	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	b343      	cbz	r3, 8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d8:	2220      	movs	r2, #32
 80034da:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034de:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80034e4:	f042 0220 	orr.w	r2, r2, #32
 80034e8:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80034ea:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80034ee:	2001      	movs	r0, #1
 80034f0:	e027      	b.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034f2:	682b      	ldr	r3, [r5, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	ea26 0303 	bic.w	r3, r6, r3
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b00      	subs	r3, #0
 80034fe:	bf18      	it	ne
 8003500:	2301      	movne	r3, #1
 8003502:	e7e6      	b.n	80034d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	699c      	ldr	r4, [r3, #24]
 8003508:	ea26 0404 	bic.w	r4, r6, r4
 800350c:	b2a4      	uxth	r4, r4
 800350e:	3c00      	subs	r4, #0
 8003510:	bf18      	it	ne
 8003512:	2401      	movne	r4, #1
 8003514:	b1a4      	cbz	r4, 8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800351e:	d1ae      	bne.n	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003520:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003524:	d1c2      	bne.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003526:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800352a:	2f01      	cmp	r7, #1
 800352c:	d1ea      	bne.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 800352e:	682b      	ldr	r3, [r5, #0]
 8003530:	695c      	ldr	r4, [r3, #20]
 8003532:	ea26 0404 	bic.w	r4, r6, r4
 8003536:	b2a4      	uxth	r4, r4
 8003538:	3c00      	subs	r4, #0
 800353a:	bf18      	it	ne
 800353c:	2401      	movne	r4, #1
 800353e:	e7e9      	b.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8003540:	2000      	movs	r0, #0
}
 8003542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003546 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003546:	b570      	push	{r4, r5, r6, lr}
 8003548:	4604      	mov	r4, r0
 800354a:	460d      	mov	r5, r1
 800354c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003556:	d121      	bne.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003558:	4620      	mov	r0, r4
 800355a:	f7ff ff1b 	bl	8003394 <I2C_IsAcknowledgeFailed>
 800355e:	b9f8      	cbnz	r0, 80035a0 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003560:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003564:	d0f3      	beq.n	800354e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7ff f98d 	bl	8002884 <HAL_GetTick>
 800356a:	1b80      	subs	r0, r0, r6
 800356c:	42a8      	cmp	r0, r5
 800356e:	d801      	bhi.n	8003574 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003570:	2d00      	cmp	r5, #0
 8003572:	d1ec      	bne.n	800354e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800357c:	d1e7      	bne.n	800354e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800357e:	2300      	movs	r3, #0
 8003580:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003582:	2220      	movs	r2, #32
 8003584:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003588:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800358e:	f042 0220 	orr.w	r2, r2, #32
 8003592:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003594:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
 800359a:	e000      	b.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 800359c:	2000      	movs	r0, #0
}
 800359e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
 80035a2:	e7fc      	b.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080035a4 <I2C_RequestMemoryWrite>:
{
 80035a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035a8:	b085      	sub	sp, #20
 80035aa:	4604      	mov	r4, r0
 80035ac:	460d      	mov	r5, r1
 80035ae:	4691      	mov	r9, r2
 80035b0:	461f      	mov	r7, r3
 80035b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80035b6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b8:	6803      	ldr	r3, [r0, #0]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80035c0:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c2:	9600      	str	r6, [sp, #0]
 80035c4:	4643      	mov	r3, r8
 80035c6:	2200      	movs	r2, #0
 80035c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035cc:	f7ff fefb 	bl	80033c6 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	b960      	cbnz	r0, 80035ec <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80035d8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035da:	4633      	mov	r3, r6
 80035dc:	4642      	mov	r2, r8
 80035de:	4926      	ldr	r1, [pc, #152]	@ (8003678 <I2C_RequestMemoryWrite+0xd4>)
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7ff ff45 	bl	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e6:	b168      	cbz	r0, 8003604 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80035e8:	2001      	movs	r0, #1
 80035ea:	e008      	b.n	80035fe <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80035f4:	d002      	beq.n	80035fc <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035fa:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80035fc:	2003      	movs	r0, #3
}
 80035fe:	b005      	add	sp, #20
 8003600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	9303      	str	r3, [sp, #12]
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	9203      	str	r2, [sp, #12]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	9303      	str	r3, [sp, #12]
 8003612:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003614:	4632      	mov	r2, r6
 8003616:	4641      	mov	r1, r8
 8003618:	4620      	mov	r0, r4
 800361a:	f7ff ff94 	bl	8003546 <I2C_WaitOnTXEFlagUntilTimeout>
 800361e:	b930      	cbnz	r0, 800362e <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003620:	2f01      	cmp	r7, #1
 8003622:	d10f      	bne.n	8003644 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	fa5f f689 	uxtb.w	r6, r9
 800362a:	611e      	str	r6, [r3, #16]
 800362c:	e7e7      	b.n	80035fe <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003630:	2b04      	cmp	r3, #4
 8003632:	d001      	beq.n	8003638 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8003634:	2001      	movs	r0, #1
 8003636:	e7e2      	b.n	80035fe <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e7f7      	b.n	8003634 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800364a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364c:	4632      	mov	r2, r6
 800364e:	4641      	mov	r1, r8
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff ff78 	bl	8003546 <I2C_WaitOnTXEFlagUntilTimeout>
 8003656:	b920      	cbnz	r0, 8003662 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	fa5f f689 	uxtb.w	r6, r9
 800365e:	611e      	str	r6, [r3, #16]
 8003660:	e7cd      	b.n	80035fe <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003662:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003664:	2b04      	cmp	r3, #4
 8003666:	d001      	beq.n	800366c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8003668:	2001      	movs	r0, #1
 800366a:	e7c8      	b.n	80035fe <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e7f7      	b.n	8003668 <I2C_RequestMemoryWrite+0xc4>
 8003678:	00010002 	.word	0x00010002

0800367c <I2C_RequestMemoryRead>:
{
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	4604      	mov	r4, r0
 8003684:	460d      	mov	r5, r1
 8003686:	4616      	mov	r6, r2
 8003688:	4699      	mov	r9, r3
 800368a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800368c:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003690:	6802      	ldr	r2, [r0, #0]
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003698:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80036a2:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036a4:	f8cd 8000 	str.w	r8, [sp]
 80036a8:	463b      	mov	r3, r7
 80036aa:	2200      	movs	r2, #0
 80036ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036b0:	f7ff fe89 	bl	80033c6 <I2C_WaitOnFlagUntilTimeout>
 80036b4:	b970      	cbnz	r0, 80036d4 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036b6:	fa5f fa85 	uxtb.w	sl, r5
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80036c0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c2:	4643      	mov	r3, r8
 80036c4:	463a      	mov	r2, r7
 80036c6:	4941      	ldr	r1, [pc, #260]	@ (80037cc <I2C_RequestMemoryRead+0x150>)
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7ff fed1 	bl	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ce:	b168      	cbz	r0, 80036ec <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80036d0:	2001      	movs	r0, #1
 80036d2:	e008      	b.n	80036e6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80036dc:	d002      	beq.n	80036e4 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036e2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80036e4:	2003      	movs	r0, #3
}
 80036e6:	b004      	add	sp, #16
 80036e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ec:	2300      	movs	r3, #0
 80036ee:	9303      	str	r3, [sp, #12]
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	9203      	str	r2, [sp, #12]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fc:	4642      	mov	r2, r8
 80036fe:	4639      	mov	r1, r7
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff ff20 	bl	8003546 <I2C_WaitOnTXEFlagUntilTimeout>
 8003706:	b980      	cbnz	r0, 800372a <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003708:	f1b9 0f01 	cmp.w	r9, #1
 800370c:	d118      	bne.n	8003740 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	b2f6      	uxtb	r6, r6
 8003712:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003714:	4642      	mov	r2, r8
 8003716:	4639      	mov	r1, r7
 8003718:	4620      	mov	r0, r4
 800371a:	f7ff ff14 	bl	8003546 <I2C_WaitOnTXEFlagUntilTimeout>
 800371e:	b368      	cbz	r0, 800377c <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003720:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003722:	2b04      	cmp	r3, #4
 8003724:	d024      	beq.n	8003770 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8003726:	2001      	movs	r0, #1
 8003728:	e7dd      	b.n	80036e6 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800372c:	2b04      	cmp	r3, #4
 800372e:	d001      	beq.n	8003734 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8003730:	2001      	movs	r0, #1
 8003732:	e7d8      	b.n	80036e6 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e7f7      	b.n	8003730 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	0a32      	lsrs	r2, r6, #8
 8003744:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003746:	4642      	mov	r2, r8
 8003748:	4639      	mov	r1, r7
 800374a:	4620      	mov	r0, r4
 800374c:	f7ff fefb 	bl	8003546 <I2C_WaitOnTXEFlagUntilTimeout>
 8003750:	b918      	cbnz	r0, 800375a <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	b2f6      	uxtb	r6, r6
 8003756:	611e      	str	r6, [r3, #16]
 8003758:	e7dc      	b.n	8003714 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800375c:	2b04      	cmp	r3, #4
 800375e:	d001      	beq.n	8003764 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8003760:	2001      	movs	r0, #1
 8003762:	e7c0      	b.n	80036e6 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	6822      	ldr	r2, [r4, #0]
 8003766:	6813      	ldr	r3, [r2, #0]
 8003768:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e7f7      	b.n	8003760 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	6822      	ldr	r2, [r4, #0]
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e7d4      	b.n	8003726 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	6813      	ldr	r3, [r2, #0]
 8003780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003784:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003786:	f8cd 8000 	str.w	r8, [sp]
 800378a:	463b      	mov	r3, r7
 800378c:	2200      	movs	r2, #0
 800378e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff fe17 	bl	80033c6 <I2C_WaitOnFlagUntilTimeout>
 8003798:	b968      	cbnz	r0, 80037b6 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	f04a 0301 	orr.w	r3, sl, #1
 80037a0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a2:	4643      	mov	r3, r8
 80037a4:	463a      	mov	r2, r7
 80037a6:	4909      	ldr	r1, [pc, #36]	@ (80037cc <I2C_RequestMemoryRead+0x150>)
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7ff fe61 	bl	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d099      	beq.n	80036e6 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 80037b2:	2001      	movs	r0, #1
 80037b4:	e797      	b.n	80036e6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80037be:	d002      	beq.n	80037c6 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037c4:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80037c6:	2003      	movs	r0, #3
 80037c8:	e78d      	b.n	80036e6 <I2C_RequestMemoryRead+0x6a>
 80037ca:	bf00      	nop
 80037cc:	00010002 	.word	0x00010002

080037d0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	4604      	mov	r4, r0
 80037d4:	460d      	mov	r5, r1
 80037d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f013 0f04 	tst.w	r3, #4
 80037e0:	d121      	bne.n	8003826 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7ff fdd6 	bl	8003394 <I2C_IsAcknowledgeFailed>
 80037e8:	b9f8      	cbnz	r0, 800382a <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037ee:	d0f3      	beq.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f0:	f7ff f848 	bl	8002884 <HAL_GetTick>
 80037f4:	1b80      	subs	r0, r0, r6
 80037f6:	42a8      	cmp	r0, r5
 80037f8:	d801      	bhi.n	80037fe <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	d1ec      	bne.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f013 0f04 	tst.w	r3, #4
 8003806:	d1e7      	bne.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003808:	2300      	movs	r3, #0
 800380a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	2220      	movs	r2, #32
 800380e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003812:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003816:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003818:	f042 0220 	orr.w	r2, r2, #32
 800381c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800381e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8003822:	2001      	movs	r0, #1
 8003824:	e000      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8003826:	2000      	movs	r0, #0
}
 8003828:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800382a:	2001      	movs	r0, #1
 800382c:	e7fc      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0800382e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800382e:	b570      	push	{r4, r5, r6, lr}
 8003830:	4604      	mov	r4, r0
 8003832:	460d      	mov	r5, r1
 8003834:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003836:	e014      	b.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003838:	f06f 0210 	mvn.w	r2, #16
 800383c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800383e:	2300      	movs	r3, #0
 8003840:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003842:	2220      	movs	r2, #32
 8003844:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800384c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800384e:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8003850:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8003854:	2001      	movs	r0, #1
 8003856:	e025      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003860:	d010      	beq.n	8003884 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	6958      	ldr	r0, [r3, #20]
 8003866:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800386a:	d11a      	bne.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800386c:	6958      	ldr	r0, [r3, #20]
 800386e:	f010 0f10 	tst.w	r0, #16
 8003872:	d1e1      	bne.n	8003838 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003874:	f7ff f806 	bl	8002884 <HAL_GetTick>
 8003878:	1b80      	subs	r0, r0, r6
 800387a:	42a8      	cmp	r0, r5
 800387c:	d8ec      	bhi.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 800387e:	2d00      	cmp	r5, #0
 8003880:	d1ef      	bne.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8003882:	e7e9      	b.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003884:	2300      	movs	r3, #0
 8003886:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003888:	2220      	movs	r2, #32
 800388a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003892:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003894:	f042 0220 	orr.w	r2, r2, #32
 8003898:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800389a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 800389e:	2001      	movs	r0, #1
 80038a0:	e000      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 80038a2:	2000      	movs	r0, #0
}
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080038a8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80038a8:	2800      	cmp	r0, #0
 80038aa:	f000 80cc 	beq.w	8003a46 <HAL_I2C_Init+0x19e>
{
 80038ae:	b570      	push	{r4, r5, r6, lr}
 80038b0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d077      	beq.n	80039aa <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ba:	2324      	movs	r3, #36	@ 0x24
 80038bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	6813      	ldr	r3, [r2, #0]
 80038ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	6813      	ldr	r3, [r2, #0]
 80038d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038dc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038de:	f000 fe25 	bl	800452c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038e2:	6862      	ldr	r2, [r4, #4]
 80038e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a50 <HAL_I2C_Init+0x1a8>)
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d864      	bhi.n	80039b4 <HAL_I2C_Init+0x10c>
 80038ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003a54 <HAL_I2C_Init+0x1ac>)
 80038ec:	4298      	cmp	r0, r3
 80038ee:	bf8c      	ite	hi
 80038f0:	2300      	movhi	r3, #0
 80038f2:	2301      	movls	r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 80a8 	bne.w	8003a4a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80038fa:	4957      	ldr	r1, [pc, #348]	@ (8003a58 <HAL_I2C_Init+0x1b0>)
 80038fc:	fba1 3100 	umull	r3, r1, r1, r0
 8003900:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003902:	6825      	ldr	r5, [r4, #0]
 8003904:	686a      	ldr	r2, [r5, #4]
 8003906:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800390a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800390e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003910:	6821      	ldr	r1, [r4, #0]
 8003912:	6a0a      	ldr	r2, [r1, #32]
 8003914:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003918:	6866      	ldr	r6, [r4, #4]
 800391a:	4d4d      	ldr	r5, [pc, #308]	@ (8003a50 <HAL_I2C_Init+0x1a8>)
 800391c:	42ae      	cmp	r6, r5
 800391e:	d84f      	bhi.n	80039c0 <HAL_I2C_Init+0x118>
 8003920:	3301      	adds	r3, #1
 8003922:	4313      	orrs	r3, r2
 8003924:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003926:	6821      	ldr	r1, [r4, #0]
 8003928:	69ca      	ldr	r2, [r1, #28]
 800392a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800392e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003932:	6865      	ldr	r5, [r4, #4]
 8003934:	4b46      	ldr	r3, [pc, #280]	@ (8003a50 <HAL_I2C_Init+0x1a8>)
 8003936:	429d      	cmp	r5, r3
 8003938:	d84c      	bhi.n	80039d4 <HAL_I2C_Init+0x12c>
 800393a:	1e43      	subs	r3, r0, #1
 800393c:	006d      	lsls	r5, r5, #1
 800393e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003942:	3301      	adds	r3, #1
 8003944:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8003948:	4203      	tst	r3, r0
 800394a:	d078      	beq.n	8003a3e <HAL_I2C_Init+0x196>
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	431a      	orrs	r2, r3
 8003952:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003954:	6821      	ldr	r1, [r4, #0]
 8003956:	680b      	ldr	r3, [r1, #0]
 8003958:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800395c:	69e2      	ldr	r2, [r4, #28]
 800395e:	6a20      	ldr	r0, [r4, #32]
 8003960:	4302      	orrs	r2, r0
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003966:	6821      	ldr	r1, [r4, #0]
 8003968:	688b      	ldr	r3, [r1, #8]
 800396a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800396e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003972:	6922      	ldr	r2, [r4, #16]
 8003974:	68e0      	ldr	r0, [r4, #12]
 8003976:	4302      	orrs	r2, r0
 8003978:	4313      	orrs	r3, r2
 800397a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800397c:	6821      	ldr	r1, [r4, #0]
 800397e:	68cb      	ldr	r3, [r1, #12]
 8003980:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003984:	6962      	ldr	r2, [r4, #20]
 8003986:	69a0      	ldr	r0, [r4, #24]
 8003988:	4302      	orrs	r2, r0
 800398a:	4313      	orrs	r3, r2
 800398c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	6813      	ldr	r3, [r2, #0]
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003998:	2000      	movs	r0, #0
 800399a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800399c:	2320      	movs	r3, #32
 800399e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80039a8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80039aa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80039ae:	f7fe fd27 	bl	8002400 <HAL_I2C_MspInit>
 80039b2:	e782      	b.n	80038ba <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039b4:	4b29      	ldr	r3, [pc, #164]	@ (8003a5c <HAL_I2C_Init+0x1b4>)
 80039b6:	4298      	cmp	r0, r3
 80039b8:	bf8c      	ite	hi
 80039ba:	2300      	movhi	r3, #0
 80039bc:	2301      	movls	r3, #1
 80039be:	e799      	b.n	80038f4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039c0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80039c4:	fb05 f303 	mul.w	r3, r5, r3
 80039c8:	4d25      	ldr	r5, [pc, #148]	@ (8003a60 <HAL_I2C_Init+0x1b8>)
 80039ca:	fba5 5303 	umull	r5, r3, r5, r3
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	3301      	adds	r3, #1
 80039d2:	e7a6      	b.n	8003922 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d4:	68a6      	ldr	r6, [r4, #8]
 80039d6:	b9be      	cbnz	r6, 8003a08 <HAL_I2C_Init+0x160>
 80039d8:	1e43      	subs	r3, r0, #1
 80039da:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80039de:	fbb3 f3fc 	udiv	r3, r3, ip
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	bb43      	cbnz	r3, 8003a42 <HAL_I2C_Init+0x19a>
 80039f0:	b9c6      	cbnz	r6, 8003a24 <HAL_I2C_Init+0x17c>
 80039f2:	1e43      	subs	r3, r0, #1
 80039f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039f8:	fbb3 f3f5 	udiv	r3, r3, r5
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a06:	e7a3      	b.n	8003950 <HAL_I2C_Init+0xa8>
 8003a08:	1e43      	subs	r3, r0, #1
 8003a0a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8003a0e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003a12:	fbb3 f3fc 	udiv	r3, r3, ip
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	e7e4      	b.n	80039ee <HAL_I2C_Init+0x146>
 8003a24:	1e43      	subs	r3, r0, #1
 8003a26:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003a2a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003a2e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a3c:	e788      	b.n	8003950 <HAL_I2C_Init+0xa8>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e786      	b.n	8003950 <HAL_I2C_Init+0xa8>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e784      	b.n	8003950 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8003a46:	2001      	movs	r0, #1
}
 8003a48:	4770      	bx	lr
    return HAL_ERROR;
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	e7ac      	b.n	80039a8 <HAL_I2C_Init+0x100>
 8003a4e:	bf00      	nop
 8003a50:	000186a0 	.word	0x000186a0
 8003a54:	001e847f 	.word	0x001e847f
 8003a58:	431bde83 	.word	0x431bde83
 8003a5c:	003d08ff 	.word	0x003d08ff
 8003a60:	10624dd3 	.word	0x10624dd3

08003a64 <HAL_I2C_Mem_Write>:
{
 8003a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	4690      	mov	r8, r2
 8003a70:	4699      	mov	r9, r3
 8003a72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8003a74:	f7fe ff06 	bl	8002884 <HAL_GetTick>
 8003a78:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8003a7e:	b2c0      	uxtb	r0, r0
 8003a80:	2820      	cmp	r0, #32
 8003a82:	d003      	beq.n	8003a8c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8003a84:	2002      	movs	r0, #2
}
 8003a86:	b003      	add	sp, #12
 8003a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a8c:	9500      	str	r5, [sp, #0]
 8003a8e:	2319      	movs	r3, #25
 8003a90:	2201      	movs	r2, #1
 8003a92:	494b      	ldr	r1, [pc, #300]	@ (8003bc0 <HAL_I2C_Mem_Write+0x15c>)
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff fc96 	bl	80033c6 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	f040 8089 	bne.w	8003bb2 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8003aa0:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f000 8086 	beq.w	8003bb6 <HAL_I2C_Mem_Write+0x152>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	f012 0f01 	tst.w	r2, #1
 8003ab8:	d103      	bne.n	8003ac2 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	6813      	ldr	r3, [r2, #0]
 8003ac6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aca:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003acc:	2321      	movs	r3, #33	@ 0x21
 8003ace:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad2:	2340      	movs	r3, #64	@ 0x40
 8003ad4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8003adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ade:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ae0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8003ae4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ae6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ae8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aea:	4b36      	ldr	r3, [pc, #216]	@ (8003bc4 <HAL_I2C_Mem_Write+0x160>)
 8003aec:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aee:	9501      	str	r5, [sp, #4]
 8003af0:	9600      	str	r6, [sp, #0]
 8003af2:	464b      	mov	r3, r9
 8003af4:	4642      	mov	r2, r8
 8003af6:	4639      	mov	r1, r7
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7ff fd53 	bl	80035a4 <I2C_RequestMemoryWrite>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d15b      	bne.n	8003bba <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8003b02:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d035      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b08:	462a      	mov	r2, r5
 8003b0a:	4631      	mov	r1, r6
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f7ff fd1a 	bl	8003546 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b12:	bb20      	cbnz	r0, 8003b5e <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b14:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	7812      	ldrb	r2, [r2, #0]
 8003b1a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003b1e:	1c53      	adds	r3, r2, #1
 8003b20:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003b22:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8003b24:	3901      	subs	r1, #1
 8003b26:	b289      	uxth	r1, r1
 8003b28:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003b2a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	6958      	ldr	r0, [r3, #20]
 8003b38:	f010 0f04 	tst.w	r0, #4
 8003b3c:	d0e1      	beq.n	8003b02 <HAL_I2C_Mem_Write+0x9e>
 8003b3e:	2900      	cmp	r1, #0
 8003b40:	d0df      	beq.n	8003b02 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b42:	7852      	ldrb	r2, [r2, #1]
 8003b44:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003b48:	3301      	adds	r3, #1
 8003b4a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8003b4c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003b52:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003b5c:	e7d1      	b.n	8003b02 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8003b64:	2001      	movs	r0, #1
 8003b66:	e78e      	b.n	8003a86 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e7f7      	b.n	8003b64 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b74:	462a      	mov	r2, r5
 8003b76:	4631      	mov	r1, r6
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7ff fe29 	bl	80037d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b7e:	b150      	cbz	r0, 8003b96 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8003b86:	2001      	movs	r0, #1
 8003b88:	e77d      	b.n	8003a86 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e7f7      	b.n	8003b86 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	6813      	ldr	r3, [r2, #0]
 8003b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b9e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8003bac:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8003bb0:	e769      	b.n	8003a86 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	e767      	b.n	8003a86 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8003bb6:	2002      	movs	r0, #2
 8003bb8:	e765      	b.n	8003a86 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8003bba:	2001      	movs	r0, #1
 8003bbc:	e763      	b.n	8003a86 <HAL_I2C_Mem_Write+0x22>
 8003bbe:	bf00      	nop
 8003bc0:	00100002 	.word	0x00100002
 8003bc4:	ffff0000 	.word	0xffff0000

08003bc8 <HAL_I2C_Mem_Read>:
{
 8003bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bcc:	b089      	sub	sp, #36	@ 0x24
 8003bce:	4604      	mov	r4, r0
 8003bd0:	460f      	mov	r7, r1
 8003bd2:	4690      	mov	r8, r2
 8003bd4:	4699      	mov	r9, r3
 8003bd6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
  __IO uint32_t count = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7fe fe52 	bl	8002884 <HAL_GetTick>
 8003be0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be2:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8003be6:	b2c0      	uxtb	r0, r0
 8003be8:	2820      	cmp	r0, #32
 8003bea:	d004      	beq.n	8003bf6 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8003bec:	2702      	movs	r7, #2
}
 8003bee:	4638      	mov	r0, r7
 8003bf0:	b009      	add	sp, #36	@ 0x24
 8003bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf6:	9500      	str	r5, [sp, #0]
 8003bf8:	2319      	movs	r3, #25
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4981      	ldr	r1, [pc, #516]	@ (8003e04 <HAL_I2C_Mem_Read+0x23c>)
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f7ff fbe1 	bl	80033c6 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	f040 817c 	bne.w	8003f02 <HAL_I2C_Mem_Read+0x33a>
    __HAL_LOCK(hi2c);
 8003c0a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	f000 8179 	beq.w	8003f06 <HAL_I2C_Mem_Read+0x33e>
 8003c14:	2301      	movs	r3, #1
 8003c16:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	f012 0f01 	tst.w	r2, #1
 8003c22:	d103      	bne.n	8003c2c <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c34:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c36:	2322      	movs	r3, #34	@ 0x22
 8003c38:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c3c:	2340      	movs	r3, #64	@ 0x40
 8003c3e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8003c46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003c48:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c4a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8003c4e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c50:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003c52:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c54:	4b6c      	ldr	r3, [pc, #432]	@ (8003e08 <HAL_I2C_Mem_Read+0x240>)
 8003c56:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c58:	9501      	str	r5, [sp, #4]
 8003c5a:	9600      	str	r6, [sp, #0]
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	4642      	mov	r2, r8
 8003c60:	4639      	mov	r1, r7
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7ff fd0a 	bl	800367c <I2C_RequestMemoryRead>
 8003c68:	4607      	mov	r7, r0
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	f040 814d 	bne.w	8003f0a <HAL_I2C_Mem_Read+0x342>
    if (hi2c->XferSize == 0U)
 8003c70:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003c72:	b95b      	cbnz	r3, 8003c8c <HAL_I2C_Mem_Read+0xc4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c74:	9303      	str	r3, [sp, #12]
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	9203      	str	r2, [sp, #12]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	9203      	str	r2, [sp, #12]
 8003c80:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e0f2      	b.n	8003e72 <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d00f      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0xe8>
    else if (hi2c->XferSize == 2U)
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d021      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	6813      	ldr	r3, [r2, #0]
 8003c98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c9c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9306      	str	r3, [sp, #24]
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	9206      	str	r2, [sp, #24]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	9306      	str	r3, [sp, #24]
 8003cac:	9b06      	ldr	r3, [sp, #24]
 8003cae:	e0e0      	b.n	8003e72 <HAL_I2C_Mem_Read+0x2aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb0:	6822      	ldr	r2, [r4, #0]
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9304      	str	r3, [sp, #16]
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	9204      	str	r2, [sp, #16]
 8003cc6:	699a      	ldr	r2, [r3, #24]
 8003cc8:	9204      	str	r2, [sp, #16]
 8003cca:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cd4:	b662      	cpsie	i
}
 8003cd6:	e0cc      	b.n	8003e72 <HAL_I2C_Mem_Read+0x2aa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd8:	6822      	ldr	r2, [r4, #0]
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ce0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9305      	str	r3, [sp, #20]
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	9205      	str	r2, [sp, #20]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	9205      	str	r2, [sp, #20]
 8003cf2:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cfc:	b662      	cpsie	i
}
 8003cfe:	e0b8      	b.n	8003e72 <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d00:	462a      	mov	r2, r5
 8003d02:	4631      	mov	r1, r6
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7ff fd92 	bl	800382e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	f040 80ff 	bne.w	8003f0e <HAL_I2C_Mem_Read+0x346>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d16:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003d18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003d1e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003d20:	3b01      	subs	r3, #1
 8003d22:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003d24:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003d2e:	e0a0      	b.n	8003e72 <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d30:	9500      	str	r5, [sp, #0]
 8003d32:	4633      	mov	r3, r6
 8003d34:	2200      	movs	r2, #0
 8003d36:	4935      	ldr	r1, [pc, #212]	@ (8003e0c <HAL_I2C_Mem_Read+0x244>)
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7ff fb44 	bl	80033c6 <I2C_WaitOnFlagUntilTimeout>
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	f040 80e9 	bne.w	8003f16 <HAL_I2C_Mem_Read+0x34e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d44:	6822      	ldr	r2, [r4, #0]
 8003d46:	6813      	ldr	r3, [r2, #0]
 8003d48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d4e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d56:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003d58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003d5e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003d64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d6e:	4b28      	ldr	r3, [pc, #160]	@ (8003e10 <HAL_I2C_Mem_Read+0x248>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	08db      	lsrs	r3, r3, #3
 8003d74:	4a27      	ldr	r2, [pc, #156]	@ (8003e14 <HAL_I2C_Mem_Read+0x24c>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d80:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003d84:	9307      	str	r3, [sp, #28]
            count--;
 8003d86:	9b07      	ldr	r3, [sp, #28]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 8003d8c:	9b07      	ldr	r3, [sp, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d028      	beq.n	8003de4 <HAL_I2C_Mem_Read+0x21c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	f012 0f04 	tst.w	r2, #4
 8003d9a:	d0f4      	beq.n	8003d86 <HAL_I2C_Mem_Read+0x1be>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003daa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003dac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dae:	3301      	adds	r3, #1
 8003db0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003db2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003db4:	3b01      	subs	r3, #1
 8003db6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003db8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc2:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dca:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003dcc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003dd2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003de2:	e046      	b.n	8003e72 <HAL_I2C_Mem_Read+0x2aa>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003de4:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003de6:	2220      	movs	r2, #32
 8003de8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dec:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003df2:	f042 0220 	orr.w	r2, r2, #32
 8003df6:	6422      	str	r2, [r4, #64]	@ 0x40
 8003df8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003dfa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 8003dfe:	2701      	movs	r7, #1
 8003e00:	e6f5      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
 8003e02:	bf00      	nop
 8003e04:	00100002 	.word	0x00100002
 8003e08:	ffff0000 	.word	0xffff0000
 8003e0c:	00010004 	.word	0x00010004
 8003e10:	20000004 	.word	0x20000004
 8003e14:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e18:	462a      	mov	r2, r5
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff fd06 	bl	800382e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d179      	bne.n	8003f1a <HAL_I2C_Mem_Read+0x352>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e30:	3301      	adds	r3, #1
 8003e32:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8003e34:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8003e36:	3a01      	subs	r2, #1
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003e3c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6959      	ldr	r1, [r3, #20]
 8003e4a:	f011 0f04 	tst.w	r1, #4
 8003e4e:	d010      	beq.n	8003e72 <HAL_I2C_Mem_Read+0x2aa>
          if (hi2c->XferSize == 3U)
 8003e50:	2a03      	cmp	r2, #3
 8003e52:	d048      	beq.n	8003ee6 <HAL_I2C_Mem_Read+0x31e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e5a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003e5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e5e:	3301      	adds	r3, #1
 8003e60:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003e62:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003e64:	3b01      	subs	r3, #1
 8003e66:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003e68:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e72:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d03b      	beq.n	8003ef0 <HAL_I2C_Mem_Read+0x328>
      if (hi2c->XferSize <= 3U)
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d8cd      	bhi.n	8003e18 <HAL_I2C_Mem_Read+0x250>
        if (hi2c->XferSize == 1U)
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f43f af3f 	beq.w	8003d00 <HAL_I2C_Mem_Read+0x138>
        else if (hi2c->XferSize == 2U)
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	f47f af54 	bne.w	8003d30 <HAL_I2C_Mem_Read+0x168>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e88:	9500      	str	r5, [sp, #0]
 8003e8a:	4633      	mov	r3, r6
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	4924      	ldr	r1, [pc, #144]	@ (8003f20 <HAL_I2C_Mem_Read+0x358>)
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7ff fa98 	bl	80033c6 <I2C_WaitOnFlagUntilTimeout>
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d13b      	bne.n	8003f12 <HAL_I2C_Mem_Read+0x34a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003e9a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ea4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003eac:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003eae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003eb4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003eba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ec4:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ecc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003ece:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003ed4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003eda:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003ee4:	e7c5      	b.n	8003e72 <HAL_I2C_Mem_Read+0x2aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e7b1      	b.n	8003e54 <HAL_I2C_Mem_Read+0x28c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8003efc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8003f00:	e675      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 8003f02:	2702      	movs	r7, #2
 8003f04:	e673      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8003f06:	2702      	movs	r7, #2
 8003f08:	e671      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8003f0a:	2701      	movs	r7, #1
 8003f0c:	e66f      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8003f0e:	2701      	movs	r7, #1
 8003f10:	e66d      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8003f12:	2701      	movs	r7, #1
 8003f14:	e66b      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8003f16:	2701      	movs	r7, #1
 8003f18:	e669      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8003f1a:	2701      	movs	r7, #1
 8003f1c:	e667      	b.n	8003bee <HAL_I2C_Mem_Read+0x26>
 8003f1e:	bf00      	nop
 8003f20:	00010004 	.word	0x00010004

08003f24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f24:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f26:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <RCC_Delay+0x24>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a08      	ldr	r2, [pc, #32]	@ (8003f4c <RCC_Delay+0x28>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	0a5b      	lsrs	r3, r3, #9
 8003f32:	fb00 f303 	mul.w	r3, r0, r3
 8003f36:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003f38:	bf00      	nop
  }
  while (Delay --);
 8003f3a:	9b01      	ldr	r3, [sp, #4]
 8003f3c:	1e5a      	subs	r2, r3, #1
 8003f3e:	9201      	str	r2, [sp, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f9      	bne.n	8003f38 <RCC_Delay+0x14>
}
 8003f44:	b002      	add	sp, #8
 8003f46:	4770      	bx	lr
 8003f48:	20000004 	.word	0x20000004
 8003f4c:	10624dd3 	.word	0x10624dd3

08003f50 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003f50:	2800      	cmp	r0, #0
 8003f52:	f000 81f1 	beq.w	8004338 <HAL_RCC_OscConfig+0x3e8>
{
 8003f56:	b570      	push	{r4, r5, r6, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5c:	6803      	ldr	r3, [r0, #0]
 8003f5e:	f013 0f01 	tst.w	r3, #1
 8003f62:	d02c      	beq.n	8003fbe <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f64:	4b99      	ldr	r3, [pc, #612]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d01d      	beq.n	8003fac <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f70:	4b96      	ldr	r3, [pc, #600]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d012      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7c:	6863      	ldr	r3, [r4, #4]
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f82:	d041      	beq.n	8004008 <HAL_RCC_OscConfig+0xb8>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d155      	bne.n	8004034 <HAL_RCC_OscConfig+0xe4>
 8003f88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f8c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e037      	b.n	8004012 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fa2:	4b8a      	ldr	r3, [pc, #552]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003faa:	d0e7      	beq.n	8003f7c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b87      	ldr	r3, [pc, #540]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_OscConfig+0x6e>
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 81bf 	beq.w	800433c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	f013 0f02 	tst.w	r3, #2
 8003fc4:	d075      	beq.n	80040b2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fc6:	4b81      	ldr	r3, [pc, #516]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f013 0f0c 	tst.w	r3, #12
 8003fce:	d05f      	beq.n	8004090 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d054      	beq.n	8004086 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fdc:	6923      	ldr	r3, [r4, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 808a 	beq.w	80040f8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	4b7a      	ldr	r3, [pc, #488]	@ (80041d0 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fea:	f7fe fc4b 	bl	8002884 <HAL_GetTick>
 8003fee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	4b76      	ldr	r3, [pc, #472]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f013 0f02 	tst.w	r3, #2
 8003ff8:	d175      	bne.n	80040e6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffa:	f7fe fc43 	bl	8002884 <HAL_GetTick>
 8003ffe:	1b40      	subs	r0, r0, r5
 8004000:	2802      	cmp	r0, #2
 8004002:	d9f5      	bls.n	8003ff0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8004004:	2003      	movs	r0, #3
 8004006:	e19e      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004008:	4a70      	ldr	r2, [pc, #448]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004010:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004012:	6863      	ldr	r3, [r4, #4]
 8004014:	b343      	cbz	r3, 8004068 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8004016:	f7fe fc35 	bl	8002884 <HAL_GetTick>
 800401a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401c:	4b6b      	ldr	r3, [pc, #428]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004024:	d1cb      	bne.n	8003fbe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004026:	f7fe fc2d 	bl	8002884 <HAL_GetTick>
 800402a:	1b40      	subs	r0, r0, r5
 800402c:	2864      	cmp	r0, #100	@ 0x64
 800402e:	d9f5      	bls.n	800401c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004030:	2003      	movs	r0, #3
 8004032:	e188      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004038:	d009      	beq.n	800404e <HAL_RCC_OscConfig+0xfe>
 800403a:	4b64      	ldr	r3, [pc, #400]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e7e1      	b.n	8004012 <HAL_RCC_OscConfig+0xc2>
 800404e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004052:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	e7d4      	b.n	8004012 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8004068:	f7fe fc0c 	bl	8002884 <HAL_GetTick>
 800406c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406e:	4b57      	ldr	r3, [pc, #348]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004076:	d0a2      	beq.n	8003fbe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004078:	f7fe fc04 	bl	8002884 <HAL_GetTick>
 800407c:	1b40      	subs	r0, r0, r5
 800407e:	2864      	cmp	r0, #100	@ 0x64
 8004080:	d9f5      	bls.n	800406e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8004082:	2003      	movs	r0, #3
 8004084:	e15f      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004086:	4b51      	ldr	r3, [pc, #324]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800408e:	d1a5      	bne.n	8003fdc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004090:	4b4e      	ldr	r3, [pc, #312]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f013 0f02 	tst.w	r3, #2
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	2b01      	cmp	r3, #1
 800409e:	f040 814f 	bne.w	8004340 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4a4a      	ldr	r2, [pc, #296]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 80040a4:	6813      	ldr	r3, [r2, #0]
 80040a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80040aa:	6961      	ldr	r1, [r4, #20]
 80040ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040b0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f013 0f08 	tst.w	r3, #8
 80040b8:	d033      	beq.n	8004122 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ba:	69a3      	ldr	r3, [r4, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d05c      	beq.n	800417a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80040c0:	4b43      	ldr	r3, [pc, #268]	@ (80041d0 <HAL_RCC_OscConfig+0x280>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80040c8:	f7fe fbdc 	bl	8002884 <HAL_GetTick>
 80040cc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	4b3f      	ldr	r3, [pc, #252]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	f013 0f02 	tst.w	r3, #2
 80040d6:	d121      	bne.n	800411c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d8:	f7fe fbd4 	bl	8002884 <HAL_GetTick>
 80040dc:	1b40      	subs	r0, r0, r5
 80040de:	2802      	cmp	r0, #2
 80040e0:	d9f5      	bls.n	80040ce <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80040e2:	2003      	movs	r0, #3
 80040e4:	e12f      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4a39      	ldr	r2, [pc, #228]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 80040e8:	6813      	ldr	r3, [r2, #0]
 80040ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80040ee:	6961      	ldr	r1, [r4, #20]
 80040f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e7dc      	b.n	80040b2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80040f8:	4b35      	ldr	r3, [pc, #212]	@ (80041d0 <HAL_RCC_OscConfig+0x280>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040fe:	f7fe fbc1 	bl	8002884 <HAL_GetTick>
 8004102:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004104:	4b31      	ldr	r3, [pc, #196]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f013 0f02 	tst.w	r3, #2
 800410c:	d0d1      	beq.n	80040b2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410e:	f7fe fbb9 	bl	8002884 <HAL_GetTick>
 8004112:	1b40      	subs	r0, r0, r5
 8004114:	2802      	cmp	r0, #2
 8004116:	d9f5      	bls.n	8004104 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8004118:	2003      	movs	r0, #3
 800411a:	e114      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800411c:	2001      	movs	r0, #1
 800411e:	f7ff ff01 	bl	8003f24 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	f013 0f04 	tst.w	r3, #4
 8004128:	f000 8096 	beq.w	8004258 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412c:	4b27      	ldr	r3, [pc, #156]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004134:	d134      	bne.n	80041a0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004136:	4b25      	ldr	r3, [pc, #148]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800413e:	61da      	str	r2, [r3, #28]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800414a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <HAL_RCC_OscConfig+0x284>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004154:	d026      	beq.n	80041a4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004156:	68e3      	ldr	r3, [r4, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d03d      	beq.n	80041d8 <HAL_RCC_OscConfig+0x288>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d153      	bne.n	8004208 <HAL_RCC_OscConfig+0x2b8>
 8004160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004164:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	621a      	str	r2, [r3, #32]
 8004170:	6a1a      	ldr	r2, [r3, #32]
 8004172:	f022 0204 	bic.w	r2, r2, #4
 8004176:	621a      	str	r2, [r3, #32]
 8004178:	e033      	b.n	80041e2 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <HAL_RCC_OscConfig+0x280>)
 800417c:	2200      	movs	r2, #0
 800417e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004182:	f7fe fb7f 	bl	8002884 <HAL_GetTick>
 8004186:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004188:	4b10      	ldr	r3, [pc, #64]	@ (80041cc <HAL_RCC_OscConfig+0x27c>)
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	f013 0f02 	tst.w	r3, #2
 8004190:	d0c7      	beq.n	8004122 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fe fb77 	bl	8002884 <HAL_GetTick>
 8004196:	1b40      	subs	r0, r0, r5
 8004198:	2802      	cmp	r0, #2
 800419a:	d9f5      	bls.n	8004188 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 800419c:	2003      	movs	r0, #3
 800419e:	e0d2      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80041a0:	2500      	movs	r5, #0
 80041a2:	e7d3      	b.n	800414c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a4:	4a0b      	ldr	r2, [pc, #44]	@ (80041d4 <HAL_RCC_OscConfig+0x284>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80041ae:	f7fe fb69 	bl	8002884 <HAL_GetTick>
 80041b2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <HAL_RCC_OscConfig+0x284>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80041bc:	d1cb      	bne.n	8004156 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fe fb61 	bl	8002884 <HAL_GetTick>
 80041c2:	1b80      	subs	r0, r0, r6
 80041c4:	2864      	cmp	r0, #100	@ 0x64
 80041c6:	d9f5      	bls.n	80041b4 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80041c8:	2003      	movs	r0, #3
 80041ca:	e0bc      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
 80041cc:	40021000 	.word	0x40021000
 80041d0:	42420000 	.word	0x42420000
 80041d4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 80041da:	6a13      	ldr	r3, [r2, #32]
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041e2:	68e3      	ldr	r3, [r4, #12]
 80041e4:	b333      	cbz	r3, 8004234 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80041e6:	f7fe fb4d 	bl	8002884 <HAL_GetTick>
 80041ea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f013 0f02 	tst.w	r3, #2
 80041f4:	d12f      	bne.n	8004256 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fe fb45 	bl	8002884 <HAL_GetTick>
 80041fa:	1b80      	subs	r0, r0, r6
 80041fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004200:	4298      	cmp	r0, r3
 8004202:	d9f3      	bls.n	80041ec <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8004204:	2003      	movs	r0, #3
 8004206:	e09e      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004208:	2b05      	cmp	r3, #5
 800420a:	d009      	beq.n	8004220 <HAL_RCC_OscConfig+0x2d0>
 800420c:	4b52      	ldr	r3, [pc, #328]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	621a      	str	r2, [r3, #32]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	f022 0204 	bic.w	r2, r2, #4
 800421c:	621a      	str	r2, [r3, #32]
 800421e:	e7e0      	b.n	80041e2 <HAL_RCC_OscConfig+0x292>
 8004220:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	f042 0204 	orr.w	r2, r2, #4
 8004228:	621a      	str	r2, [r3, #32]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	621a      	str	r2, [r3, #32]
 8004232:	e7d6      	b.n	80041e2 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8004234:	f7fe fb26 	bl	8002884 <HAL_GetTick>
 8004238:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423a:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f013 0f02 	tst.w	r3, #2
 8004242:	d008      	beq.n	8004256 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004244:	f7fe fb1e 	bl	8002884 <HAL_GetTick>
 8004248:	1b80      	subs	r0, r0, r6
 800424a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800424e:	4298      	cmp	r0, r3
 8004250:	d9f3      	bls.n	800423a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8004252:	2003      	movs	r0, #3
 8004254:	e077      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8004256:	b9e5      	cbnz	r5, 8004292 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004258:	69e3      	ldr	r3, [r4, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d072      	beq.n	8004344 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425e:	4a3e      	ldr	r2, [pc, #248]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 8004260:	6852      	ldr	r2, [r2, #4]
 8004262:	f002 020c 	and.w	r2, r2, #12
 8004266:	2a08      	cmp	r2, #8
 8004268:	d056      	beq.n	8004318 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426a:	2b02      	cmp	r3, #2
 800426c:	d017      	beq.n	800429e <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800426e:	4b3b      	ldr	r3, [pc, #236]	@ (800435c <HAL_RCC_OscConfig+0x40c>)
 8004270:	2200      	movs	r2, #0
 8004272:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004274:	f7fe fb06 	bl	8002884 <HAL_GetTick>
 8004278:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427a:	4b37      	ldr	r3, [pc, #220]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004282:	d047      	beq.n	8004314 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fe fafe 	bl	8002884 <HAL_GetTick>
 8004288:	1b00      	subs	r0, r0, r4
 800428a:	2802      	cmp	r0, #2
 800428c:	d9f5      	bls.n	800427a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800428e:	2003      	movs	r0, #3
 8004290:	e059      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004292:	4a31      	ldr	r2, [pc, #196]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 8004294:	69d3      	ldr	r3, [r2, #28]
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800429a:	61d3      	str	r3, [r2, #28]
 800429c:	e7dc      	b.n	8004258 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800429e:	4b2f      	ldr	r3, [pc, #188]	@ (800435c <HAL_RCC_OscConfig+0x40c>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80042a4:	f7fe faee 	bl	8002884 <HAL_GetTick>
 80042a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80042b2:	d006      	beq.n	80042c2 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fe fae6 	bl	8002884 <HAL_GetTick>
 80042b8:	1b40      	subs	r0, r0, r5
 80042ba:	2802      	cmp	r0, #2
 80042bc:	d9f5      	bls.n	80042aa <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80042be:	2003      	movs	r0, #3
 80042c0:	e041      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042c2:	6a23      	ldr	r3, [r4, #32]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c8:	d01a      	beq.n	8004300 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ca:	4923      	ldr	r1, [pc, #140]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 80042cc:	684b      	ldr	r3, [r1, #4]
 80042ce:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80042d2:	6a22      	ldr	r2, [r4, #32]
 80042d4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80042d6:	4302      	orrs	r2, r0
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80042dc:	4b1f      	ldr	r3, [pc, #124]	@ (800435c <HAL_RCC_OscConfig+0x40c>)
 80042de:	2201      	movs	r2, #1
 80042e0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80042e2:	f7fe facf 	bl	8002884 <HAL_GetTick>
 80042e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80042f0:	d10e      	bne.n	8004310 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f2:	f7fe fac7 	bl	8002884 <HAL_GetTick>
 80042f6:	1b00      	subs	r0, r0, r4
 80042f8:	2802      	cmp	r0, #2
 80042fa:	d9f5      	bls.n	80042e8 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80042fc:	2003      	movs	r0, #3
 80042fe:	e022      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004300:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 8004302:	6853      	ldr	r3, [r2, #4]
 8004304:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004308:	68a1      	ldr	r1, [r4, #8]
 800430a:	430b      	orrs	r3, r1
 800430c:	6053      	str	r3, [r2, #4]
 800430e:	e7dc      	b.n	80042ca <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8004310:	2000      	movs	r0, #0
 8004312:	e018      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
 8004314:	2000      	movs	r0, #0
 8004316:	e016      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004318:	2b01      	cmp	r3, #1
 800431a:	d016      	beq.n	800434a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800431c:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <HAL_RCC_OscConfig+0x408>)
 800431e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004320:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8004324:	6a22      	ldr	r2, [r4, #32]
 8004326:	4291      	cmp	r1, r2
 8004328:	d111      	bne.n	800434e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800432a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800432e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004330:	4293      	cmp	r3, r2
 8004332:	d10e      	bne.n	8004352 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8004334:	2000      	movs	r0, #0
 8004336:	e006      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8004338:	2001      	movs	r0, #1
}
 800433a:	4770      	bx	lr
        return HAL_ERROR;
 800433c:	2001      	movs	r0, #1
 800433e:	e002      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8004340:	2001      	movs	r0, #1
 8004342:	e000      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8004344:	2000      	movs	r0, #0
}
 8004346:	b002      	add	sp, #8
 8004348:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800434a:	2001      	movs	r0, #1
 800434c:	e7fb      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800434e:	2001      	movs	r0, #1
 8004350:	e7f9      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
 8004352:	2001      	movs	r0, #1
 8004354:	e7f7      	b.n	8004346 <HAL_RCC_OscConfig+0x3f6>
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	42420000 	.word	0x42420000

08004360 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004360:	4b0f      	ldr	r3, [pc, #60]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x40>)
 8004362:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004364:	f003 020c 	and.w	r2, r3, #12
 8004368:	2a08      	cmp	r2, #8
 800436a:	d001      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 800436c:	480d      	ldr	r0, [pc, #52]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800436e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004370:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004374:	490c      	ldr	r1, [pc, #48]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x48>)
 8004376:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004378:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800437c:	d00b      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800437e:	4b08      	ldr	r3, [pc, #32]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x40>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004386:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x4c>)
 8004388:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800438a:	4a06      	ldr	r2, [pc, #24]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x44>)
 800438c:	fb02 f000 	mul.w	r0, r2, r0
 8004390:	fbb0 f0f3 	udiv	r0, r0, r3
 8004394:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004396:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x50>)
 8004398:	fb03 f000 	mul.w	r0, r3, r0
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	007a1200 	.word	0x007a1200
 80043a8:	08007c88 	.word	0x08007c88
 80043ac:	08007c84 	.word	0x08007c84
 80043b0:	003d0900 	.word	0x003d0900

080043b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80043b4:	2800      	cmp	r0, #0
 80043b6:	f000 80a0 	beq.w	80044fa <HAL_RCC_ClockConfig+0x146>
{
 80043ba:	b570      	push	{r4, r5, r6, lr}
 80043bc:	460d      	mov	r5, r1
 80043be:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c0:	4b52      	ldr	r3, [pc, #328]	@ (800450c <HAL_RCC_ClockConfig+0x158>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d20b      	bcs.n	80043e4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043cc:	4a4f      	ldr	r2, [pc, #316]	@ (800450c <HAL_RCC_ClockConfig+0x158>)
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	f023 0307 	bic.w	r3, r3, #7
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d8:	6813      	ldr	r3, [r2, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	428b      	cmp	r3, r1
 80043e0:	f040 808d 	bne.w	80044fe <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	f013 0f02 	tst.w	r3, #2
 80043ea:	d017      	beq.n	800441c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	f013 0f04 	tst.w	r3, #4
 80043f0:	d004      	beq.n	80043fc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f2:	4a47      	ldr	r2, [pc, #284]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 80043f4:	6853      	ldr	r3, [r2, #4]
 80043f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043fa:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	f013 0f08 	tst.w	r3, #8
 8004402:	d004      	beq.n	800440e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004404:	4a42      	ldr	r2, [pc, #264]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 8004406:	6853      	ldr	r3, [r2, #4]
 8004408:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800440c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440e:	4a40      	ldr	r2, [pc, #256]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 8004410:	6853      	ldr	r3, [r2, #4]
 8004412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004416:	68a1      	ldr	r1, [r4, #8]
 8004418:	430b      	orrs	r3, r1
 800441a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	f013 0f01 	tst.w	r3, #1
 8004422:	d031      	beq.n	8004488 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004424:	6863      	ldr	r3, [r4, #4]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d020      	beq.n	800446c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800442a:	2b02      	cmp	r3, #2
 800442c:	d025      	beq.n	800447a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	4a38      	ldr	r2, [pc, #224]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	f012 0f02 	tst.w	r2, #2
 8004436:	d064      	beq.n	8004502 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004438:	4935      	ldr	r1, [pc, #212]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 800443a:	684a      	ldr	r2, [r1, #4]
 800443c:	f022 0203 	bic.w	r2, r2, #3
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004444:	f7fe fa1e 	bl	8002884 <HAL_GetTick>
 8004448:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b31      	ldr	r3, [pc, #196]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	6862      	ldr	r2, [r4, #4]
 8004454:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004458:	d016      	beq.n	8004488 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445a:	f7fe fa13 	bl	8002884 <HAL_GetTick>
 800445e:	1b80      	subs	r0, r0, r6
 8004460:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004464:	4298      	cmp	r0, r3
 8004466:	d9f0      	bls.n	800444a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004468:	2003      	movs	r0, #3
 800446a:	e045      	b.n	80044f8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446c:	4a28      	ldr	r2, [pc, #160]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004474:	d1e0      	bne.n	8004438 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004476:	2001      	movs	r0, #1
 8004478:	e03e      	b.n	80044f8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447a:	4a25      	ldr	r2, [pc, #148]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004482:	d1d9      	bne.n	8004438 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004484:	2001      	movs	r0, #1
 8004486:	e037      	b.n	80044f8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004488:	4b20      	ldr	r3, [pc, #128]	@ (800450c <HAL_RCC_ClockConfig+0x158>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	42ab      	cmp	r3, r5
 8004492:	d90a      	bls.n	80044aa <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004494:	4a1d      	ldr	r2, [pc, #116]	@ (800450c <HAL_RCC_ClockConfig+0x158>)
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	f023 0307 	bic.w	r3, r3, #7
 800449c:	432b      	orrs	r3, r5
 800449e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	42ab      	cmp	r3, r5
 80044a8:	d12d      	bne.n	8004506 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	f013 0f04 	tst.w	r3, #4
 80044b0:	d006      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b2:	4a17      	ldr	r2, [pc, #92]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 80044b4:	6853      	ldr	r3, [r2, #4]
 80044b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80044ba:	68e1      	ldr	r1, [r4, #12]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	f013 0f08 	tst.w	r3, #8
 80044c6:	d007      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044c8:	4a11      	ldr	r2, [pc, #68]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 80044ca:	6853      	ldr	r3, [r2, #4]
 80044cc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80044d0:	6921      	ldr	r1, [r4, #16]
 80044d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044d6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044d8:	f7ff ff42 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 80044dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <HAL_RCC_ClockConfig+0x15c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004514 <HAL_RCC_ClockConfig+0x160>)
 80044e6:	5cd3      	ldrb	r3, [r2, r3]
 80044e8:	40d8      	lsrs	r0, r3
 80044ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <HAL_RCC_ClockConfig+0x164>)
 80044ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80044ee:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <HAL_RCC_ClockConfig+0x168>)
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	f7fe f983 	bl	80027fc <HAL_InitTick>
  return HAL_OK;
 80044f6:	2000      	movs	r0, #0
}
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80044fa:	2001      	movs	r0, #1
}
 80044fc:	4770      	bx	lr
    return HAL_ERROR;
 80044fe:	2001      	movs	r0, #1
 8004500:	e7fa      	b.n	80044f8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004502:	2001      	movs	r0, #1
 8004504:	e7f8      	b.n	80044f8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004506:	2001      	movs	r0, #1
 8004508:	e7f6      	b.n	80044f8 <HAL_RCC_ClockConfig+0x144>
 800450a:	bf00      	nop
 800450c:	40022000 	.word	0x40022000
 8004510:	40021000 	.word	0x40021000
 8004514:	08007c74 	.word	0x08007c74
 8004518:	20000004 	.word	0x20000004
 800451c:	2000000c 	.word	0x2000000c

08004520 <HAL_RCC_GetHCLKFreq>:
}
 8004520:	4b01      	ldr	r3, [pc, #4]	@ (8004528 <HAL_RCC_GetHCLKFreq+0x8>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000004 	.word	0x20000004

0800452c <HAL_RCC_GetPCLK1Freq>:
{
 800452c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800452e:	f7ff fff7 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004532:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800453a:	4a03      	ldr	r2, [pc, #12]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800453c:	5cd3      	ldrb	r3, [r2, r3]
}
 800453e:	40d8      	lsrs	r0, r3
 8004540:	bd08      	pop	{r3, pc}
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	08007c6c 	.word	0x08007c6c

0800454c <HAL_RCC_GetPCLK2Freq>:
{
 800454c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800454e:	f7ff ffe7 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004552:	4b04      	ldr	r3, [pc, #16]	@ (8004564 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800455a:	4a03      	ldr	r2, [pc, #12]	@ (8004568 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800455c:	5cd3      	ldrb	r3, [r2, r3]
}
 800455e:	40d8      	lsrs	r0, r3
 8004560:	bd08      	pop	{r3, pc}
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	08007c6c 	.word	0x08007c6c

0800456c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004572:	6803      	ldr	r3, [r0, #0]
 8004574:	f013 0f01 	tst.w	r3, #1
 8004578:	d036      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4b3f      	ldr	r3, [pc, #252]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004582:	d149      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004584:	4b3c      	ldr	r3, [pc, #240]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800458c:	61da      	str	r2, [r3, #28]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004598:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459a:	4b38      	ldr	r3, [pc, #224]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80045a2:	d03b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045a4:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80045ac:	d013      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d00e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80045ba:	6a13      	ldr	r3, [r2, #32]
 80045bc:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c0:	492f      	ldr	r1, [pc, #188]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80045c2:	2601      	movs	r6, #1
 80045c4:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045c8:	2600      	movs	r6, #0
 80045ca:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045ce:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045d0:	f013 0f01 	tst.w	r3, #1
 80045d4:	d136      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d6:	4a28      	ldr	r2, [pc, #160]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80045d8:	6a13      	ldr	r3, [r2, #32]
 80045da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045de:	6861      	ldr	r1, [r4, #4]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e4:	2d00      	cmp	r5, #0
 80045e6:	d13e      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f013 0f02 	tst.w	r3, #2
 80045ee:	d006      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045f0:	4a21      	ldr	r2, [pc, #132]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80045f2:	6853      	ldr	r3, [r2, #4]
 80045f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80045f8:	68a1      	ldr	r1, [r4, #8]
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	f013 0f10 	tst.w	r3, #16
 8004604:	d034      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004606:	4a1c      	ldr	r2, [pc, #112]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004608:	6853      	ldr	r3, [r2, #4]
 800460a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800460e:	68e1      	ldr	r1, [r4, #12]
 8004610:	430b      	orrs	r3, r1
 8004612:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004614:	2000      	movs	r0, #0
 8004616:	e02c      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004618:	2500      	movs	r5, #0
 800461a:	e7be      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461c:	4a17      	ldr	r2, [pc, #92]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004624:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004626:	f7fe f92d 	bl	8002884 <HAL_GetTick>
 800462a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	4b13      	ldr	r3, [pc, #76]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004634:	d1b6      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004636:	f7fe f925 	bl	8002884 <HAL_GetTick>
 800463a:	1b80      	subs	r0, r0, r6
 800463c:	2864      	cmp	r0, #100	@ 0x64
 800463e:	d9f5      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004640:	2003      	movs	r0, #3
 8004642:	e016      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8004644:	f7fe f91e 	bl	8002884 <HAL_GetTick>
 8004648:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464a:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f013 0f02 	tst.w	r3, #2
 8004652:	d1c0      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe f916 	bl	8002884 <HAL_GetTick>
 8004658:	1b80      	subs	r0, r0, r6
 800465a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800465e:	4298      	cmp	r0, r3
 8004660:	d9f3      	bls.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8004662:	2003      	movs	r0, #3
 8004664:	e005      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	69d3      	ldr	r3, [r2, #28]
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800466c:	61d3      	str	r3, [r2, #28]
 800466e:	e7bb      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8004670:	2000      	movs	r0, #0
}
 8004672:	b002      	add	sp, #8
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
 8004680:	42420000 	.word	0x42420000

08004684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004688:	6a03      	ldr	r3, [r0, #32]
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004692:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004694:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004698:	680c      	ldr	r4, [r1, #0]
 800469a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800469c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046a0:	688b      	ldr	r3, [r1, #8]
 80046a2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a4:	4a0b      	ldr	r2, [pc, #44]	@ (80046d4 <TIM_OC1_SetConfig+0x50>)
 80046a6:	4290      	cmp	r0, r2
 80046a8:	d006      	beq.n	80046b8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046aa:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ac:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ae:	684a      	ldr	r2, [r1, #4]
 80046b0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b2:	6203      	str	r3, [r0, #32]
}
 80046b4:	bc30      	pop	{r4, r5}
 80046b6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80046b8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80046bc:	68ca      	ldr	r2, [r1, #12]
 80046be:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80046c0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046c4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80046c8:	694a      	ldr	r2, [r1, #20]
 80046ca:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80046cc:	698d      	ldr	r5, [r1, #24]
 80046ce:	4315      	orrs	r5, r2
 80046d0:	e7eb      	b.n	80046aa <TIM_OC1_SetConfig+0x26>
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00

080046d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046da:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046dc:	6a02      	ldr	r2, [r0, #32]
 80046de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046e2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ec:	680d      	ldr	r5, [r1, #0]
 80046ee:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046f4:	688a      	ldr	r2, [r1, #8]
 80046f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004730 <TIM_OC3_SetConfig+0x58>)
 80046fc:	4290      	cmp	r0, r2
 80046fe:	d006      	beq.n	800470e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004700:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004702:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004704:	684a      	ldr	r2, [r1, #4]
 8004706:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004708:	6203      	str	r3, [r0, #32]
}
 800470a:	bc30      	pop	{r4, r5}
 800470c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800470e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004712:	68ca      	ldr	r2, [r1, #12]
 8004714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004718:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800471c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004720:	694a      	ldr	r2, [r1, #20]
 8004722:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004726:	698a      	ldr	r2, [r1, #24]
 8004728:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800472c:	e7e8      	b.n	8004700 <TIM_OC3_SetConfig+0x28>
 800472e:	bf00      	nop
 8004730:	40012c00 	.word	0x40012c00

08004734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004738:	6a02      	ldr	r2, [r0, #32]
 800473a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800473e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004740:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004744:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004748:	680d      	ldr	r5, [r1, #0]
 800474a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800474e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004752:	688d      	ldr	r5, [r1, #8]
 8004754:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004758:	4d07      	ldr	r5, [pc, #28]	@ (8004778 <TIM_OC4_SetConfig+0x44>)
 800475a:	42a8      	cmp	r0, r5
 800475c:	d006      	beq.n	800476c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004760:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004762:	684a      	ldr	r2, [r1, #4]
 8004764:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004766:	6203      	str	r3, [r0, #32]
}
 8004768:	bc30      	pop	{r4, r5}
 800476a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800476c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004770:	694d      	ldr	r5, [r1, #20]
 8004772:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004776:	e7f2      	b.n	800475e <TIM_OC4_SetConfig+0x2a>
 8004778:	40012c00 	.word	0x40012c00

0800477c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800477c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800477e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004780:	6a04      	ldr	r4, [r0, #32]
 8004782:	f024 0401 	bic.w	r4, r4, #1
 8004786:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004788:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800478a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800478e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004792:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004796:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004798:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800479a:	6203      	str	r3, [r0, #32]
}
 800479c:	bc10      	pop	{r4}
 800479e:	4770      	bx	lr

080047a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047a2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a4:	6a04      	ldr	r4, [r0, #32]
 80047a6:	f024 0410 	bic.w	r4, r4, #16
 80047aa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ac:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ae:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80047c0:	6203      	str	r3, [r0, #32]
}
 80047c2:	bc10      	pop	{r4}
 80047c4:	4770      	bx	lr

080047c6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047cc:	430b      	orrs	r3, r1
 80047ce:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d2:	6083      	str	r3, [r0, #8]
}
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80047d8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d127      	bne.n	8004832 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e8:	6802      	ldr	r2, [r0, #0]
 80047ea:	68d3      	ldr	r3, [r2, #12]
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f2:	6803      	ldr	r3, [r0, #0]
 80047f4:	4a11      	ldr	r2, [pc, #68]	@ (800483c <HAL_TIM_Base_Start_IT+0x64>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d010      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x44>
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fe:	d00d      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x44>
 8004800:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004804:	4293      	cmp	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x44>
 8004808:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800480c:	4293      	cmp	r3, r2
 800480e:	d005      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004818:	2000      	movs	r0, #0
 800481a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004822:	2a06      	cmp	r2, #6
 8004824:	d007      	beq.n	8004836 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800482e:	2000      	movs	r0, #0
 8004830:	4770      	bx	lr
    return HAL_ERROR;
 8004832:	2001      	movs	r0, #1
 8004834:	4770      	bx	lr
  return HAL_OK;
 8004836:	2000      	movs	r0, #0
}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00

08004840 <HAL_TIM_PWM_MspInit>:
}
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004842:	4770      	bx	lr

08004844 <HAL_TIM_IC_CaptureCallback>:
}
 8004844:	4770      	bx	lr

08004846 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_TriggerCallback>:
}
 8004848:	4770      	bx	lr

0800484a <HAL_TIM_IRQHandler>:
{
 800484a:	b570      	push	{r4, r5, r6, lr}
 800484c:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800484e:	6803      	ldr	r3, [r0, #0]
 8004850:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004852:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004854:	f015 0f02 	tst.w	r5, #2
 8004858:	d010      	beq.n	800487c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800485a:	f016 0f02 	tst.w	r6, #2
 800485e:	d00d      	beq.n	800487c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004860:	f06f 0202 	mvn.w	r2, #2
 8004864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004866:	2301      	movs	r3, #1
 8004868:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486a:	6803      	ldr	r3, [r0, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f013 0f03 	tst.w	r3, #3
 8004872:	d05e      	beq.n	8004932 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004874:	f7ff ffe6 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004878:	2300      	movs	r3, #0
 800487a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800487c:	f015 0f04 	tst.w	r5, #4
 8004880:	d012      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004882:	f016 0f04 	tst.w	r6, #4
 8004886:	d00f      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	f06f 0204 	mvn.w	r2, #4
 800488e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004890:	2302      	movs	r3, #2
 8004892:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800489c:	d04f      	beq.n	800493e <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800489e:	4620      	mov	r0, r4
 80048a0:	f7ff ffd0 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a4:	2300      	movs	r3, #0
 80048a6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048a8:	f015 0f08 	tst.w	r5, #8
 80048ac:	d012      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ae:	f016 0f08 	tst.w	r6, #8
 80048b2:	d00f      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	f06f 0208 	mvn.w	r2, #8
 80048ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048bc:	2304      	movs	r3, #4
 80048be:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f013 0f03 	tst.w	r3, #3
 80048c8:	d040      	beq.n	800494c <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7ff ffba 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d0:	2300      	movs	r3, #0
 80048d2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048d4:	f015 0f10 	tst.w	r5, #16
 80048d8:	d012      	beq.n	8004900 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048da:	f016 0f10 	tst.w	r6, #16
 80048de:	d00f      	beq.n	8004900 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	f06f 0210 	mvn.w	r2, #16
 80048e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e8:	2308      	movs	r3, #8
 80048ea:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80048f4:	d031      	beq.n	800495a <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff ffa4 	bl	8004844 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fc:	2300      	movs	r3, #0
 80048fe:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004900:	f015 0f01 	tst.w	r5, #1
 8004904:	d002      	beq.n	800490c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004906:	f016 0f01 	tst.w	r6, #1
 800490a:	d12d      	bne.n	8004968 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800490c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8004910:	d002      	beq.n	8004918 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004912:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004916:	d12f      	bne.n	8004978 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004918:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800491c:	d002      	beq.n	8004924 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800491e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004922:	d131      	bne.n	8004988 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004924:	f015 0f20 	tst.w	r5, #32
 8004928:	d002      	beq.n	8004930 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800492a:	f016 0f20 	tst.w	r6, #32
 800492e:	d133      	bne.n	8004998 <HAL_TIM_IRQHandler+0x14e>
}
 8004930:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	f7ff ff86 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004936:	4620      	mov	r0, r4
 8004938:	f7ff ff85 	bl	8004846 <HAL_TIM_PWM_PulseFinishedCallback>
 800493c:	e79c      	b.n	8004878 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff ff7f 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	4620      	mov	r0, r4
 8004946:	f7ff ff7e 	bl	8004846 <HAL_TIM_PWM_PulseFinishedCallback>
 800494a:	e7ab      	b.n	80048a4 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494c:	4620      	mov	r0, r4
 800494e:	f7ff ff78 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004952:	4620      	mov	r0, r4
 8004954:	f7ff ff77 	bl	8004846 <HAL_TIM_PWM_PulseFinishedCallback>
 8004958:	e7ba      	b.n	80048d0 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	4620      	mov	r0, r4
 800495c:	f7ff ff71 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	4620      	mov	r0, r4
 8004962:	f7ff ff70 	bl	8004846 <HAL_TIM_PWM_PulseFinishedCallback>
 8004966:	e7c9      	b.n	80048fc <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	f06f 0201 	mvn.w	r2, #1
 800496e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004970:	4620      	mov	r0, r4
 8004972:	f7fd f8bb 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
 8004976:	e7c9      	b.n	800490c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800497e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004980:	4620      	mov	r0, r4
 8004982:	f000 fb71 	bl	8005068 <HAL_TIMEx_BreakCallback>
 8004986:	e7c7      	b.n	8004918 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800498e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff ff59 	bl	8004848 <HAL_TIM_TriggerCallback>
 8004996:	e7c5      	b.n	8004924 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	f06f 0220 	mvn.w	r2, #32
 800499e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 fb60 	bl	8005066 <HAL_TIMEx_CommutCallback>
}
 80049a6:	e7c3      	b.n	8004930 <HAL_TIM_IRQHandler+0xe6>

080049a8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80049a8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <TIM_Base_SetConfig+0x80>)
 80049ac:	4290      	cmp	r0, r2
 80049ae:	d00a      	beq.n	80049c6 <TIM_Base_SetConfig+0x1e>
 80049b0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0x1e>
 80049b6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80049ba:	4290      	cmp	r0, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0x1e>
 80049be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80049c2:	4290      	cmp	r0, r2
 80049c4:	d103      	bne.n	80049ce <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80049ca:	684a      	ldr	r2, [r1, #4]
 80049cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ce:	4a16      	ldr	r2, [pc, #88]	@ (8004a28 <TIM_Base_SetConfig+0x80>)
 80049d0:	4290      	cmp	r0, r2
 80049d2:	d00a      	beq.n	80049ea <TIM_Base_SetConfig+0x42>
 80049d4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0x42>
 80049da:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80049de:	4290      	cmp	r0, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0x42>
 80049e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80049e6:	4290      	cmp	r0, r2
 80049e8:	d103      	bne.n	80049f2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ee:	68ca      	ldr	r2, [r1, #12]
 80049f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049f6:	694a      	ldr	r2, [r1, #20]
 80049f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80049fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049fc:	688b      	ldr	r3, [r1, #8]
 80049fe:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a00:	680b      	ldr	r3, [r1, #0]
 8004a02:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a04:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <TIM_Base_SetConfig+0x80>)
 8004a06:	4298      	cmp	r0, r3
 8004a08:	d00a      	beq.n	8004a20 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a0e:	6903      	ldr	r3, [r0, #16]
 8004a10:	f013 0f01 	tst.w	r3, #1
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a16:	6903      	ldr	r3, [r0, #16]
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	6103      	str	r3, [r0, #16]
}
 8004a1e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004a20:	690b      	ldr	r3, [r1, #16]
 8004a22:	6303      	str	r3, [r0, #48]	@ 0x30
 8004a24:	e7f1      	b.n	8004a0a <TIM_Base_SetConfig+0x62>
 8004a26:	bf00      	nop
 8004a28:	40012c00 	.word	0x40012c00

08004a2c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004a2c:	b340      	cbz	r0, 8004a80 <HAL_TIM_Base_Init+0x54>
{
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a32:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004a36:	b1f3      	cbz	r3, 8004a76 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a3e:	4621      	mov	r1, r4
 8004a40:	f851 0b04 	ldr.w	r0, [r1], #4
 8004a44:	f7ff ffb0 	bl	80049a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004a52:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004a56:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004a5a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a66:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004a6a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004a72:	2000      	movs	r0, #0
}
 8004a74:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004a76:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a7a:	f7fd fcf3 	bl	8002464 <HAL_TIM_Base_MspInit>
 8004a7e:	e7db      	b.n	8004a38 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004a80:	2001      	movs	r0, #1
}
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004a84:	b340      	cbz	r0, 8004ad8 <HAL_TIM_PWM_Init+0x54>
{
 8004a86:	b510      	push	{r4, lr}
 8004a88:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004a8e:	b1f3      	cbz	r3, 8004ace <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	2302      	movs	r3, #2
 8004a92:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a96:	4621      	mov	r1, r4
 8004a98:	f851 0b04 	ldr.w	r0, [r1], #4
 8004a9c:	f7ff ff84 	bl	80049a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004aaa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004aae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004ab2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004abe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004ac2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004ac6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004aca:	2000      	movs	r0, #0
}
 8004acc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004ace:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004ad2:	f7ff feb5 	bl	8004840 <HAL_TIM_PWM_MspInit>
 8004ad6:	e7db      	b.n	8004a90 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004ad8:	2001      	movs	r0, #1
}
 8004ada:	4770      	bx	lr

08004adc <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d056      	beq.n	8004b8e <HAL_TIM_Encoder_Init+0xb2>
{
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	460d      	mov	r5, r1
 8004ae4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04a      	beq.n	8004b84 <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 8004aee:	2302      	movs	r3, #2
 8004af0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004af4:	6822      	ldr	r2, [r4, #0]
 8004af6:	6893      	ldr	r3, [r2, #8]
 8004af8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004afc:	f023 0307 	bic.w	r3, r3, #7
 8004b00:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b02:	4621      	mov	r1, r4
 8004b04:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b08:	f7ff ff4e 	bl	80049a8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004b0c:	6821      	ldr	r1, [r4, #0]
 8004b0e:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004b10:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8004b12:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8004b14:	6828      	ldr	r0, [r5, #0]
 8004b16:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b18:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b1c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b20:	68ab      	ldr	r3, [r5, #8]
 8004b22:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8004b26:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004b2a:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b2c:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8004b30:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b34:	68ea      	ldr	r2, [r5, #12]
 8004b36:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8004b3a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8004b3e:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b40:	6a2b      	ldr	r3, [r5, #32]
 8004b42:	031b      	lsls	r3, r3, #12
 8004b44:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8004b48:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8004b4c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b4e:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b52:	686a      	ldr	r2, [r5, #4]
 8004b54:	696d      	ldr	r5, [r5, #20]
 8004b56:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004b5a:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8004b5c:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8004b5e:	6821      	ldr	r1, [r4, #0]
 8004b60:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b70:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004b80:	2000      	movs	r0, #0
}
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b84:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8004b88:	f7fd fc9c 	bl	80024c4 <HAL_TIM_Encoder_MspInit>
 8004b8c:	e7af      	b.n	8004aee <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8004b8e:	2001      	movs	r0, #1
}
 8004b90:	4770      	bx	lr
	...

08004b94 <TIM_OC2_SetConfig>:
{
 8004b94:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8004b96:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b98:	6a02      	ldr	r2, [r0, #32]
 8004b9a:	f022 0210 	bic.w	r2, r2, #16
 8004b9e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004ba0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004ba2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ba4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba8:	680d      	ldr	r5, [r1, #0]
 8004baa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004bae:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb2:	688d      	ldr	r5, [r1, #8]
 8004bb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb8:	4d0c      	ldr	r5, [pc, #48]	@ (8004bec <TIM_OC2_SetConfig+0x58>)
 8004bba:	42a8      	cmp	r0, r5
 8004bbc:	d006      	beq.n	8004bcc <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8004bbe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004bc0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004bc2:	684a      	ldr	r2, [r1, #4]
 8004bc4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004bc6:	6203      	str	r3, [r0, #32]
}
 8004bc8:	bc30      	pop	{r4, r5}
 8004bca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd0:	68cd      	ldr	r5, [r1, #12]
 8004bd2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bda:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bde:	694d      	ldr	r5, [r1, #20]
 8004be0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004be4:	698d      	ldr	r5, [r1, #24]
 8004be6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004bea:	e7e8      	b.n	8004bbe <TIM_OC2_SetConfig+0x2a>
 8004bec:	40012c00 	.word	0x40012c00

08004bf0 <HAL_TIM_PWM_ConfigChannel>:
{
 8004bf0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004bf2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d066      	beq.n	8004cc8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	460d      	mov	r5, r1
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004c04:	2a0c      	cmp	r2, #12
 8004c06:	d85a      	bhi.n	8004cbe <HAL_TIM_PWM_ConfigChannel+0xce>
 8004c08:	e8df f002 	tbb	[pc, r2]
 8004c0c:	59595907 	.word	0x59595907
 8004c10:	5959591b 	.word	0x5959591b
 8004c14:	59595930 	.word	0x59595930
 8004c18:	44          	.byte	0x44
 8004c19:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	f7ff fd32 	bl	8004684 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c20:	6822      	ldr	r2, [r4, #0]
 8004c22:	6993      	ldr	r3, [r2, #24]
 8004c24:	f043 0308 	orr.w	r3, r3, #8
 8004c28:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	6993      	ldr	r3, [r2, #24]
 8004c2e:	f023 0304 	bic.w	r3, r3, #4
 8004c32:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c34:	6822      	ldr	r2, [r4, #0]
 8004c36:	6993      	ldr	r3, [r2, #24]
 8004c38:	6929      	ldr	r1, [r5, #16]
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3e:	2000      	movs	r0, #0
      break;
 8004c40:	e03e      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c42:	6800      	ldr	r0, [r0, #0]
 8004c44:	f7ff ffa6 	bl	8004b94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	6993      	ldr	r3, [r2, #24]
 8004c4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	6993      	ldr	r3, [r2, #24]
 8004c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c5a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	6993      	ldr	r3, [r2, #24]
 8004c60:	6929      	ldr	r1, [r5, #16]
 8004c62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c66:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004c68:	2000      	movs	r0, #0
      break;
 8004c6a:	e029      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f7ff fd33 	bl	80046d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c72:	6822      	ldr	r2, [r4, #0]
 8004c74:	69d3      	ldr	r3, [r2, #28]
 8004c76:	f043 0308 	orr.w	r3, r3, #8
 8004c7a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	69d3      	ldr	r3, [r2, #28]
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	69d3      	ldr	r3, [r2, #28]
 8004c8a:	6929      	ldr	r1, [r5, #16]
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2000      	movs	r0, #0
      break;
 8004c92:	e015      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c94:	6800      	ldr	r0, [r0, #0]
 8004c96:	f7ff fd4d 	bl	8004734 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	69d3      	ldr	r3, [r2, #28]
 8004c9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ca2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca4:	6822      	ldr	r2, [r4, #0]
 8004ca6:	69d3      	ldr	r3, [r2, #28]
 8004ca8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cae:	6822      	ldr	r2, [r4, #0]
 8004cb0:	69d3      	ldr	r3, [r2, #28]
 8004cb2:	6929      	ldr	r1, [r5, #16]
 8004cb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004cb8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2000      	movs	r0, #0
      break;
 8004cbc:	e000      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8004cbe:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004cc8:	2002      	movs	r0, #2
 8004cca:	e7fc      	b.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0xd6>

08004ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ccc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd0:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cde:	6082      	str	r2, [r0, #8]
}
 8004ce0:	bc10      	pop	{r4}
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004ce4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d078      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0xfa>
{
 8004cec:	b510      	push	{r4, lr}
 8004cee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004cfc:	6802      	ldr	r2, [r0, #0]
 8004cfe:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d04:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004d08:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004d0a:	680b      	ldr	r3, [r1, #0]
 8004d0c:	2b60      	cmp	r3, #96	@ 0x60
 8004d0e:	d04c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0xc6>
 8004d10:	d829      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x82>
 8004d12:	2b40      	cmp	r3, #64	@ 0x40
 8004d14:	d054      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0xdc>
 8004d16:	d90c      	bls.n	8004d32 <HAL_TIM_ConfigClockSource+0x4e>
 8004d18:	2b50      	cmp	r3, #80	@ 0x50
 8004d1a:	d122      	bne.n	8004d62 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1c:	68ca      	ldr	r2, [r1, #12]
 8004d1e:	6849      	ldr	r1, [r1, #4]
 8004d20:	6800      	ldr	r0, [r0, #0]
 8004d22:	f7ff fd2b 	bl	800477c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d26:	2150      	movs	r1, #80	@ 0x50
 8004d28:	6820      	ldr	r0, [r4, #0]
 8004d2a:	f7ff fd4c 	bl	80047c6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004d2e:	2000      	movs	r0, #0
      break;
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d00d      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x6e>
 8004d36:	d909      	bls.n	8004d4c <HAL_TIM_ConfigClockSource+0x68>
 8004d38:	2b30      	cmp	r3, #48	@ 0x30
 8004d3a:	d00a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8004d3c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004d44:	2300      	movs	r3, #0
 8004d46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004d4a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004d4c:	b10b      	cbz	r3, 8004d52 <HAL_TIM_ConfigClockSource+0x6e>
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d105      	bne.n	8004d5e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d52:	4619      	mov	r1, r3
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	f7ff fd36 	bl	80047c6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2000      	movs	r0, #0
      break;
 8004d5c:	e7ef      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004d5e:	2001      	movs	r0, #1
 8004d60:	e7ed      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
 8004d62:	2001      	movs	r0, #1
 8004d64:	e7eb      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6a:	d034      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0xf2>
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d70:	d10c      	bne.n	8004d8c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8004d72:	68cb      	ldr	r3, [r1, #12]
 8004d74:	684a      	ldr	r2, [r1, #4]
 8004d76:	6889      	ldr	r1, [r1, #8]
 8004d78:	6800      	ldr	r0, [r0, #0]
 8004d7a:	f7ff ffa7 	bl	8004ccc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	6893      	ldr	r3, [r2, #8]
 8004d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d86:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2000      	movs	r0, #0
      break;
 8004d8a:	e7d8      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004d8c:	2b70      	cmp	r3, #112	@ 0x70
 8004d8e:	d124      	bne.n	8004dda <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004d90:	68cb      	ldr	r3, [r1, #12]
 8004d92:	684a      	ldr	r2, [r1, #4]
 8004d94:	6889      	ldr	r1, [r1, #8]
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	f7ff ff98 	bl	8004ccc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004da0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004da4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004da6:	2000      	movs	r0, #0
      break;
 8004da8:	e7c9      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004daa:	68ca      	ldr	r2, [r1, #12]
 8004dac:	6849      	ldr	r1, [r1, #4]
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	f7ff fcf6 	bl	80047a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db4:	2160      	movs	r1, #96	@ 0x60
 8004db6:	6820      	ldr	r0, [r4, #0]
 8004db8:	f7ff fd05 	bl	80047c6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2000      	movs	r0, #0
      break;
 8004dbe:	e7be      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc0:	68ca      	ldr	r2, [r1, #12]
 8004dc2:	6849      	ldr	r1, [r1, #4]
 8004dc4:	6800      	ldr	r0, [r0, #0]
 8004dc6:	f7ff fcd9 	bl	800477c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dca:	2140      	movs	r1, #64	@ 0x40
 8004dcc:	6820      	ldr	r0, [r4, #0]
 8004dce:	f7ff fcfa 	bl	80047c6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2000      	movs	r0, #0
      break;
 8004dd4:	e7b3      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e7b1      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004dda:	2001      	movs	r0, #1
 8004ddc:	e7af      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004dde:	2002      	movs	r0, #2
}
 8004de0:	4770      	bx	lr

08004de2 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de2:	f001 011f 	and.w	r1, r1, #31
 8004de6:	f04f 0c01 	mov.w	ip, #1
 8004dea:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dee:	6a03      	ldr	r3, [r0, #32]
 8004df0:	ea23 030c 	bic.w	r3, r3, ip
 8004df4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004df6:	6a03      	ldr	r3, [r0, #32]
 8004df8:	408a      	lsls	r2, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	6203      	str	r3, [r0, #32]
}
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_PWM_Start>:
{
 8004e00:	b510      	push	{r4, lr}
 8004e02:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e04:	4608      	mov	r0, r1
 8004e06:	bb51      	cbnz	r1, 8004e5e <HAL_TIM_PWM_Start+0x5e>
 8004e08:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	bf18      	it	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d15b      	bne.n	8004ed0 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d139      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x90>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e22:	2201      	movs	r2, #1
 8004e24:	4601      	mov	r1, r0
 8004e26:	6820      	ldr	r0, [r4, #0]
 8004e28:	f7ff ffdb 	bl	8004de2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed8 <HAL_TIM_PWM_Start+0xd8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d03d      	beq.n	8004eb0 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	4a28      	ldr	r2, [pc, #160]	@ (8004ed8 <HAL_TIM_PWM_Start+0xd8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03e      	beq.n	8004eba <HAL_TIM_PWM_Start+0xba>
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e40:	d03b      	beq.n	8004eba <HAL_TIM_PWM_Start+0xba>
 8004e42:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d037      	beq.n	8004eba <HAL_TIM_PWM_Start+0xba>
 8004e4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d033      	beq.n	8004eba <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e039      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e5e:	2904      	cmp	r1, #4
 8004e60:	d008      	beq.n	8004e74 <HAL_TIM_PWM_Start+0x74>
 8004e62:	2908      	cmp	r1, #8
 8004e64:	d00d      	beq.n	8004e82 <HAL_TIM_PWM_Start+0x82>
 8004e66:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	bf18      	it	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	e7cf      	b.n	8004e14 <HAL_TIM_PWM_Start+0x14>
 8004e74:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	bf18      	it	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	e7c8      	b.n	8004e14 <HAL_TIM_PWM_Start+0x14>
 8004e82:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	bf18      	it	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	e7c1      	b.n	8004e14 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e90:	2804      	cmp	r0, #4
 8004e92:	d005      	beq.n	8004ea0 <HAL_TIM_PWM_Start+0xa0>
 8004e94:	2808      	cmp	r0, #8
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_PWM_Start+0xa8>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004e9e:	e7c0      	b.n	8004e22 <HAL_TIM_PWM_Start+0x22>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004ea6:	e7bc      	b.n	8004e22 <HAL_TIM_PWM_Start+0x22>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004eae:	e7b8      	b.n	8004e22 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eb6:	645a      	str	r2, [r3, #68]	@ 0x44
 8004eb8:	e7bc      	b.n	8004e34 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	2a06      	cmp	r2, #6
 8004ec2:	d007      	beq.n	8004ed4 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ecc:	2000      	movs	r0, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8004ed0:	2001      	movs	r0, #1
}
 8004ed2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e7fc      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xd2>
 8004ed8:	40012c00 	.word	0x40012c00

08004edc <HAL_TIM_Encoder_Start>:
{
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ee0:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8004ee4:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ee6:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eea:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8004eee:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ef0:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
  if (Channel == TIM_CHANNEL_1)
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	b9b1      	cbnz	r1, 8004f26 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ef8:	2801      	cmp	r0, #1
 8004efa:	d149      	bne.n	8004f90 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004efc:	2a01      	cmp	r2, #1
 8004efe:	d148      	bne.n	8004f92 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f00:	2302      	movs	r3, #2
 8004f02:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f06:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 8004f0a:	b37d      	cbz	r5, 8004f6c <HAL_TIM_Encoder_Start+0x90>
 8004f0c:	2d04      	cmp	r5, #4
 8004f0e:	d039      	beq.n	8004f84 <HAL_TIM_Encoder_Start+0xa8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f10:	2201      	movs	r2, #1
 8004f12:	2100      	movs	r1, #0
 8004f14:	6820      	ldr	r0, [r4, #0]
 8004f16:	f7ff ff64 	bl	8004de2 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	f7ff ff5f 	bl	8004de2 <TIM_CCxChannelCmd>
      break;
 8004f24:	e027      	b.n	8004f76 <HAL_TIM_Encoder_Start+0x9a>
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 8004f2c:	2904      	cmp	r1, #4
 8004f2e:	d012      	beq.n	8004f56 <HAL_TIM_Encoder_Start+0x7a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f30:	2801      	cmp	r0, #1
 8004f32:	d133      	bne.n	8004f9c <HAL_TIM_Encoder_Start+0xc0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d12c      	bne.n	8004f92 <HAL_TIM_Encoder_Start+0xb6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f38:	2a01      	cmp	r2, #1
 8004f3a:	d131      	bne.n	8004fa0 <HAL_TIM_Encoder_Start+0xc4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f3c:	f1bc 0f01 	cmp.w	ip, #1
 8004f40:	d130      	bne.n	8004fa4 <HAL_TIM_Encoder_Start+0xc8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f42:	2302      	movs	r3, #2
 8004f44:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f48:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f54:	e7d9      	b.n	8004f0a <HAL_TIM_Encoder_Start+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d11c      	bne.n	8004f94 <HAL_TIM_Encoder_Start+0xb8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f5a:	f1bc 0f01 	cmp.w	ip, #1
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f60:	2302      	movs	r3, #2
 8004f62:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f6a:	e7ce      	b.n	8004f0a <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	2100      	movs	r1, #0
 8004f70:	6820      	ldr	r0, [r4, #0]
 8004f72:	f7ff ff36 	bl	8004de2 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004f80:	2000      	movs	r0, #0
 8004f82:	e006      	b.n	8004f92 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f84:	2201      	movs	r2, #1
 8004f86:	2104      	movs	r1, #4
 8004f88:	6820      	ldr	r0, [r4, #0]
 8004f8a:	f7ff ff2a 	bl	8004de2 <TIM_CCxChannelCmd>
      break;
 8004f8e:	e7f2      	b.n	8004f76 <HAL_TIM_Encoder_Start+0x9a>
      return HAL_ERROR;
 8004f90:	2001      	movs	r0, #1
}
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004f94:	2001      	movs	r0, #1
 8004f96:	e7fc      	b.n	8004f92 <HAL_TIM_Encoder_Start+0xb6>
 8004f98:	4618      	mov	r0, r3
 8004f9a:	e7fa      	b.n	8004f92 <HAL_TIM_Encoder_Start+0xb6>
      return HAL_ERROR;
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	e7f8      	b.n	8004f92 <HAL_TIM_Encoder_Start+0xb6>
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	e7f6      	b.n	8004f92 <HAL_TIM_Encoder_Start+0xb6>
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	e7f4      	b.n	8004f92 <HAL_TIM_Encoder_Start+0xb6>

08004fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fa8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004fac:	2a01      	cmp	r2, #1
 8004fae:	d02c      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004fb0:	b410      	push	{r4}
 8004fb2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fc0:	6802      	ldr	r2, [r0, #0]
 8004fc2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fca:	6808      	ldr	r0, [r1, #0]
 8004fcc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fd0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	480e      	ldr	r0, [pc, #56]	@ (8005010 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004fd6:	4282      	cmp	r2, r0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004fda:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004fde:	d007      	beq.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004fe0:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004fe4:	4282      	cmp	r2, r0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004fe8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004fec:	4282      	cmp	r2, r0
 8004fee:	d104      	bne.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ff4:	6849      	ldr	r1, [r1, #4]
 8004ff6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005000:	2000      	movs	r0, #0
 8005002:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005006:	bc10      	pop	{r4}
 8005008:	4770      	bx	lr
  __HAL_LOCK(htim);
 800500a:	2002      	movs	r0, #2
}
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40012c00 	.word	0x40012c00

08005014 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005014:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005016:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d021      	beq.n	8005062 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800501e:	2301      	movs	r3, #1
 8005020:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005024:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502a:	6888      	ldr	r0, [r1, #8]
 800502c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800502e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005032:	6848      	ldr	r0, [r1, #4]
 8005034:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800503a:	6808      	ldr	r0, [r1, #0]
 800503c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800503e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005042:	6908      	ldr	r0, [r1, #16]
 8005044:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800504a:	6948      	ldr	r0, [r1, #20]
 800504c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800504e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005052:	69c9      	ldr	r1, [r1, #28]
 8005054:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005056:	6811      	ldr	r1, [r2, #0]
 8005058:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800505a:	2000      	movs	r0, #0
 800505c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005060:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005062:	2002      	movs	r0, #2
}
 8005064:	4770      	bx	lr

08005066 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005066:	4770      	bx	lr

08005068 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005068:	4770      	bx	lr

0800506a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	f102 030c 	add.w	r3, r2, #12
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	320c      	adds	r2, #12
 800507a:	e842 3100 	strex	r1, r3, [r2]
 800507e:	2900      	cmp	r1, #0
 8005080:	d1f3      	bne.n	800506a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	f102 0314 	add.w	r3, r2, #20
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	3214      	adds	r2, #20
 8005092:	e842 3100 	strex	r1, r3, [r2]
 8005096:	2900      	cmp	r1, #0
 8005098:	d1f3      	bne.n	8005082 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800509a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800509c:	2b01      	cmp	r3, #1
 800509e:	d005      	beq.n	80050ac <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a0:	2320      	movs	r3, #32
 80050a2:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a6:	2300      	movs	r3, #0
 80050a8:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80050aa:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	f102 030c 	add.w	r3, r2, #12
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	320c      	adds	r2, #12
 80050bc:	e842 3100 	strex	r1, r3, [r2]
 80050c0:	2900      	cmp	r1, #0
 80050c2:	d1f3      	bne.n	80050ac <UART_EndRxTransfer+0x42>
 80050c4:	e7ec      	b.n	80050a0 <UART_EndRxTransfer+0x36>
	...

080050c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b510      	push	{r4, lr}
 80050ca:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050cc:	6802      	ldr	r2, [r0, #0]
 80050ce:	6913      	ldr	r3, [r2, #16]
 80050d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80050d4:	68c1      	ldr	r1, [r0, #12]
 80050d6:	430b      	orrs	r3, r1
 80050d8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050da:	6883      	ldr	r3, [r0, #8]
 80050dc:	6902      	ldr	r2, [r0, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	6942      	ldr	r2, [r0, #20]
 80050e2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80050e4:	6801      	ldr	r1, [r0, #0]
 80050e6:	68cb      	ldr	r3, [r1, #12]
 80050e8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80050ec:	f023 030c 	bic.w	r3, r3, #12
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050f4:	6802      	ldr	r2, [r0, #0]
 80050f6:	6953      	ldr	r3, [r2, #20]
 80050f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050fc:	6981      	ldr	r1, [r0, #24]
 80050fe:	430b      	orrs	r3, r1
 8005100:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8005102:	6802      	ldr	r2, [r0, #0]
 8005104:	4b13      	ldr	r3, [pc, #76]	@ (8005154 <UART_SetConfig+0x8c>)
 8005106:	429a      	cmp	r2, r3
 8005108:	d020      	beq.n	800514c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800510a:	f7ff fa0f 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 800510e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005110:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005114:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005120:	480d      	ldr	r0, [pc, #52]	@ (8005158 <UART_SetConfig+0x90>)
 8005122:	fba0 3102 	umull	r3, r1, r0, r2
 8005126:	0949      	lsrs	r1, r1, #5
 8005128:	2364      	movs	r3, #100	@ 0x64
 800512a:	fb03 2311 	mls	r3, r3, r1, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	3332      	adds	r3, #50	@ 0x32
 8005132:	fba0 0303 	umull	r0, r3, r0, r3
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800513c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	6821      	ldr	r1, [r4, #0]
 8005146:	4413      	add	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800514a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800514c:	f7ff f9fe 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8005150:	4602      	mov	r2, r0
 8005152:	e7dd      	b.n	8005110 <UART_SetConfig+0x48>
 8005154:	40013800 	.word	0x40013800
 8005158:	51eb851f 	.word	0x51eb851f

0800515c <UART_WaitOnFlagUntilTimeout>:
{
 800515c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005160:	b083      	sub	sp, #12
 8005162:	4605      	mov	r5, r0
 8005164:	460e      	mov	r6, r1
 8005166:	4617      	mov	r7, r2
 8005168:	4699      	mov	r9, r3
 800516a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516e:	682b      	ldr	r3, [r5, #0]
 8005170:	681c      	ldr	r4, [r3, #0]
 8005172:	ea36 0404 	bics.w	r4, r6, r4
 8005176:	bf0c      	ite	eq
 8005178:	2401      	moveq	r4, #1
 800517a:	2400      	movne	r4, #0
 800517c:	42bc      	cmp	r4, r7
 800517e:	d128      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8005180:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005184:	d0f3      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fd fb7d 	bl	8002884 <HAL_GetTick>
 800518a:	eba0 0009 	sub.w	r0, r0, r9
 800518e:	4540      	cmp	r0, r8
 8005190:	d823      	bhi.n	80051da <UART_WaitOnFlagUntilTimeout+0x7e>
 8005192:	f1b8 0f00 	cmp.w	r8, #0
 8005196:	d022      	beq.n	80051de <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	f012 0f04 	tst.w	r2, #4
 80051a0:	d0e5      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x12>
 80051a2:	2e80      	cmp	r6, #128	@ 0x80
 80051a4:	d0e3      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x12>
 80051a6:	2e40      	cmp	r6, #64	@ 0x40
 80051a8:	d0e1      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	f012 0f08 	tst.w	r2, #8
 80051b0:	d0dd      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051b2:	2400      	movs	r4, #0
 80051b4:	9401      	str	r4, [sp, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	9201      	str	r2, [sp, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80051c0:	4628      	mov	r0, r5
 80051c2:	f7ff ff52 	bl	800506a <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c6:	2308      	movs	r3, #8
 80051c8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80051ca:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80051ce:	2001      	movs	r0, #1
 80051d0:	e000      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80051d2:	2000      	movs	r0, #0
}
 80051d4:	b003      	add	sp, #12
 80051d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80051da:	2003      	movs	r0, #3
 80051dc:	e7fa      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x78>
 80051de:	2003      	movs	r0, #3
 80051e0:	e7f8      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x78>

080051e2 <HAL_UART_Init>:
  if (huart == NULL)
 80051e2:	b360      	cbz	r0, 800523e <HAL_UART_Init+0x5c>
{
 80051e4:	b510      	push	{r4, lr}
 80051e6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80051e8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80051ec:	b313      	cbz	r3, 8005234 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80051ee:	2324      	movs	r3, #36	@ 0x24
 80051f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	68d3      	ldr	r3, [r2, #12]
 80051f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80051fe:	4620      	mov	r0, r4
 8005200:	f7ff ff62 	bl	80050c8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	6913      	ldr	r3, [r2, #16]
 8005208:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800520c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	6953      	ldr	r3, [r2, #20]
 8005212:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005216:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	68d3      	ldr	r3, [r2, #12]
 800521c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005220:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005222:	2000      	movs	r0, #0
 8005224:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005226:	2320      	movs	r3, #32
 8005228:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800522c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005230:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8005232:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005234:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8005238:	f7fd f9f2 	bl	8002620 <HAL_UART_MspInit>
 800523c:	e7d7      	b.n	80051ee <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800523e:	2001      	movs	r0, #1
}
 8005240:	4770      	bx	lr

08005242 <HAL_UART_Transmit>:
{
 8005242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800524a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b20      	cmp	r3, #32
 8005252:	d156      	bne.n	8005302 <HAL_UART_Transmit+0xc0>
 8005254:	4604      	mov	r4, r0
 8005256:	460d      	mov	r5, r1
 8005258:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800525a:	2900      	cmp	r1, #0
 800525c:	d055      	beq.n	800530a <HAL_UART_Transmit+0xc8>
 800525e:	b90a      	cbnz	r2, 8005264 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8005260:	2001      	movs	r0, #1
 8005262:	e04f      	b.n	8005304 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	2300      	movs	r3, #0
 8005266:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005268:	2321      	movs	r3, #33	@ 0x21
 800526a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800526e:	f7fd fb09 	bl	8002884 <HAL_GetTick>
 8005272:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005274:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005278:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527c:	68a3      	ldr	r3, [r4, #8]
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005282:	d002      	beq.n	800528a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8005284:	f04f 0800 	mov.w	r8, #0
 8005288:	e014      	b.n	80052b4 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800528a:	6923      	ldr	r3, [r4, #16]
 800528c:	b32b      	cbz	r3, 80052da <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800528e:	f04f 0800 	mov.w	r8, #0
 8005292:	e00f      	b.n	80052b4 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8005294:	2320      	movs	r3, #32
 8005296:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800529a:	2003      	movs	r0, #3
 800529c:	e032      	b.n	8005304 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800529e:	f838 3b02 	ldrh.w	r3, [r8], #2
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80052aa:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80052ac:	b292      	uxth	r2, r2
 80052ae:	3a01      	subs	r2, #1
 80052b0:	b292      	uxth	r2, r2
 80052b2:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052b4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	b193      	cbz	r3, 80052e0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ba:	9600      	str	r6, [sp, #0]
 80052bc:	463b      	mov	r3, r7
 80052be:	2200      	movs	r2, #0
 80052c0:	2180      	movs	r1, #128	@ 0x80
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7ff ff4a 	bl	800515c <UART_WaitOnFlagUntilTimeout>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d1e3      	bne.n	8005294 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	d0e6      	beq.n	800529e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052d8:	e7e7      	b.n	80052aa <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80052da:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80052dc:	2500      	movs	r5, #0
 80052de:	e7e9      	b.n	80052b4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e0:	9600      	str	r6, [sp, #0]
 80052e2:	463b      	mov	r3, r7
 80052e4:	2200      	movs	r2, #0
 80052e6:	2140      	movs	r1, #64	@ 0x40
 80052e8:	4620      	mov	r0, r4
 80052ea:	f7ff ff37 	bl	800515c <UART_WaitOnFlagUntilTimeout>
 80052ee:	b918      	cbnz	r0, 80052f8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80052f0:	2320      	movs	r3, #32
 80052f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80052f6:	e005      	b.n	8005304 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80052f8:	2320      	movs	r3, #32
 80052fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80052fe:	2003      	movs	r0, #3
 8005300:	e000      	b.n	8005304 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8005302:	2002      	movs	r0, #2
}
 8005304:	b002      	add	sp, #8
 8005306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800530a:	2001      	movs	r0, #1
 800530c:	e7fa      	b.n	8005304 <HAL_UART_Transmit+0xc2>

0800530e <__cvt>:
 800530e:	2b00      	cmp	r3, #0
 8005310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	461d      	mov	r5, r3
 8005316:	bfbb      	ittet	lt
 8005318:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800531c:	461d      	movlt	r5, r3
 800531e:	2300      	movge	r3, #0
 8005320:	232d      	movlt	r3, #45	@ 0x2d
 8005322:	b088      	sub	sp, #32
 8005324:	4614      	mov	r4, r2
 8005326:	bfb8      	it	lt
 8005328:	4614      	movlt	r4, r2
 800532a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800532c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800532e:	7013      	strb	r3, [r2, #0]
 8005330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005332:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005336:	f023 0820 	bic.w	r8, r3, #32
 800533a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800533e:	d005      	beq.n	800534c <__cvt+0x3e>
 8005340:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005344:	d100      	bne.n	8005348 <__cvt+0x3a>
 8005346:	3601      	adds	r6, #1
 8005348:	2302      	movs	r3, #2
 800534a:	e000      	b.n	800534e <__cvt+0x40>
 800534c:	2303      	movs	r3, #3
 800534e:	aa07      	add	r2, sp, #28
 8005350:	9204      	str	r2, [sp, #16]
 8005352:	aa06      	add	r2, sp, #24
 8005354:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005358:	e9cd 3600 	strd	r3, r6, [sp]
 800535c:	4622      	mov	r2, r4
 800535e:	462b      	mov	r3, r5
 8005360:	f000 fe62 	bl	8006028 <_dtoa_r>
 8005364:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005368:	4607      	mov	r7, r0
 800536a:	d119      	bne.n	80053a0 <__cvt+0x92>
 800536c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800536e:	07db      	lsls	r3, r3, #31
 8005370:	d50e      	bpl.n	8005390 <__cvt+0x82>
 8005372:	eb00 0906 	add.w	r9, r0, r6
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	f7fb fb13 	bl	80009a8 <__aeabi_dcmpeq>
 8005382:	b108      	cbz	r0, 8005388 <__cvt+0x7a>
 8005384:	f8cd 901c 	str.w	r9, [sp, #28]
 8005388:	2230      	movs	r2, #48	@ 0x30
 800538a:	9b07      	ldr	r3, [sp, #28]
 800538c:	454b      	cmp	r3, r9
 800538e:	d31e      	bcc.n	80053ce <__cvt+0xc0>
 8005390:	4638      	mov	r0, r7
 8005392:	9b07      	ldr	r3, [sp, #28]
 8005394:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005396:	1bdb      	subs	r3, r3, r7
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	b008      	add	sp, #32
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053a4:	eb00 0906 	add.w	r9, r0, r6
 80053a8:	d1e5      	bne.n	8005376 <__cvt+0x68>
 80053aa:	7803      	ldrb	r3, [r0, #0]
 80053ac:	2b30      	cmp	r3, #48	@ 0x30
 80053ae:	d10a      	bne.n	80053c6 <__cvt+0xb8>
 80053b0:	2200      	movs	r2, #0
 80053b2:	2300      	movs	r3, #0
 80053b4:	4620      	mov	r0, r4
 80053b6:	4629      	mov	r1, r5
 80053b8:	f7fb faf6 	bl	80009a8 <__aeabi_dcmpeq>
 80053bc:	b918      	cbnz	r0, 80053c6 <__cvt+0xb8>
 80053be:	f1c6 0601 	rsb	r6, r6, #1
 80053c2:	f8ca 6000 	str.w	r6, [sl]
 80053c6:	f8da 3000 	ldr.w	r3, [sl]
 80053ca:	4499      	add	r9, r3
 80053cc:	e7d3      	b.n	8005376 <__cvt+0x68>
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	9107      	str	r1, [sp, #28]
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e7d9      	b.n	800538a <__cvt+0x7c>

080053d6 <__exponent>:
 80053d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053d8:	2900      	cmp	r1, #0
 80053da:	bfb6      	itet	lt
 80053dc:	232d      	movlt	r3, #45	@ 0x2d
 80053de:	232b      	movge	r3, #43	@ 0x2b
 80053e0:	4249      	neglt	r1, r1
 80053e2:	2909      	cmp	r1, #9
 80053e4:	7002      	strb	r2, [r0, #0]
 80053e6:	7043      	strb	r3, [r0, #1]
 80053e8:	dd29      	ble.n	800543e <__exponent+0x68>
 80053ea:	f10d 0307 	add.w	r3, sp, #7
 80053ee:	461d      	mov	r5, r3
 80053f0:	270a      	movs	r7, #10
 80053f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80053f6:	461a      	mov	r2, r3
 80053f8:	fb07 1416 	mls	r4, r7, r6, r1
 80053fc:	3430      	adds	r4, #48	@ 0x30
 80053fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005402:	460c      	mov	r4, r1
 8005404:	2c63      	cmp	r4, #99	@ 0x63
 8005406:	4631      	mov	r1, r6
 8005408:	f103 33ff 	add.w	r3, r3, #4294967295
 800540c:	dcf1      	bgt.n	80053f2 <__exponent+0x1c>
 800540e:	3130      	adds	r1, #48	@ 0x30
 8005410:	1e94      	subs	r4, r2, #2
 8005412:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005416:	4623      	mov	r3, r4
 8005418:	1c41      	adds	r1, r0, #1
 800541a:	42ab      	cmp	r3, r5
 800541c:	d30a      	bcc.n	8005434 <__exponent+0x5e>
 800541e:	f10d 0309 	add.w	r3, sp, #9
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	42ac      	cmp	r4, r5
 8005426:	bf88      	it	hi
 8005428:	2300      	movhi	r3, #0
 800542a:	3302      	adds	r3, #2
 800542c:	4403      	add	r3, r0
 800542e:	1a18      	subs	r0, r3, r0
 8005430:	b003      	add	sp, #12
 8005432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005434:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005438:	f801 6f01 	strb.w	r6, [r1, #1]!
 800543c:	e7ed      	b.n	800541a <__exponent+0x44>
 800543e:	2330      	movs	r3, #48	@ 0x30
 8005440:	3130      	adds	r1, #48	@ 0x30
 8005442:	7083      	strb	r3, [r0, #2]
 8005444:	70c1      	strb	r1, [r0, #3]
 8005446:	1d03      	adds	r3, r0, #4
 8005448:	e7f1      	b.n	800542e <__exponent+0x58>
	...

0800544c <_printf_float>:
 800544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005450:	b091      	sub	sp, #68	@ 0x44
 8005452:	460c      	mov	r4, r1
 8005454:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005458:	4616      	mov	r6, r2
 800545a:	461f      	mov	r7, r3
 800545c:	4605      	mov	r5, r0
 800545e:	f000 fcd3 	bl	8005e08 <_localeconv_r>
 8005462:	6803      	ldr	r3, [r0, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	9308      	str	r3, [sp, #32]
 8005468:	f7fa fe72 	bl	8000150 <strlen>
 800546c:	2300      	movs	r3, #0
 800546e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005470:	f8d8 3000 	ldr.w	r3, [r8]
 8005474:	9009      	str	r0, [sp, #36]	@ 0x24
 8005476:	3307      	adds	r3, #7
 8005478:	f023 0307 	bic.w	r3, r3, #7
 800547c:	f103 0208 	add.w	r2, r3, #8
 8005480:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005484:	f8d4 b000 	ldr.w	fp, [r4]
 8005488:	f8c8 2000 	str.w	r2, [r8]
 800548c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005490:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005494:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005496:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800549a:	f04f 32ff 	mov.w	r2, #4294967295
 800549e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005718 <_printf_float+0x2cc>)
 80054a8:	f7fb fab0 	bl	8000a0c <__aeabi_dcmpun>
 80054ac:	bb70      	cbnz	r0, 800550c <_printf_float+0xc0>
 80054ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054b2:	f04f 32ff 	mov.w	r2, #4294967295
 80054b6:	4b98      	ldr	r3, [pc, #608]	@ (8005718 <_printf_float+0x2cc>)
 80054b8:	f7fb fa8a 	bl	80009d0 <__aeabi_dcmple>
 80054bc:	bb30      	cbnz	r0, 800550c <_printf_float+0xc0>
 80054be:	2200      	movs	r2, #0
 80054c0:	2300      	movs	r3, #0
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f7fb fa79 	bl	80009bc <__aeabi_dcmplt>
 80054ca:	b110      	cbz	r0, 80054d2 <_printf_float+0x86>
 80054cc:	232d      	movs	r3, #45	@ 0x2d
 80054ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d2:	4a92      	ldr	r2, [pc, #584]	@ (800571c <_printf_float+0x2d0>)
 80054d4:	4b92      	ldr	r3, [pc, #584]	@ (8005720 <_printf_float+0x2d4>)
 80054d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054da:	bf94      	ite	ls
 80054dc:	4690      	movls	r8, r2
 80054de:	4698      	movhi	r8, r3
 80054e0:	2303      	movs	r3, #3
 80054e2:	f04f 0900 	mov.w	r9, #0
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	f02b 0304 	bic.w	r3, fp, #4
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	4633      	mov	r3, r6
 80054f0:	4621      	mov	r1, r4
 80054f2:	4628      	mov	r0, r5
 80054f4:	9700      	str	r7, [sp, #0]
 80054f6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80054f8:	f000 f9d4 	bl	80058a4 <_printf_common>
 80054fc:	3001      	adds	r0, #1
 80054fe:	f040 8090 	bne.w	8005622 <_printf_float+0x1d6>
 8005502:	f04f 30ff 	mov.w	r0, #4294967295
 8005506:	b011      	add	sp, #68	@ 0x44
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550c:	4642      	mov	r2, r8
 800550e:	464b      	mov	r3, r9
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fb fa7a 	bl	8000a0c <__aeabi_dcmpun>
 8005518:	b148      	cbz	r0, 800552e <_printf_float+0xe2>
 800551a:	464b      	mov	r3, r9
 800551c:	2b00      	cmp	r3, #0
 800551e:	bfb8      	it	lt
 8005520:	232d      	movlt	r3, #45	@ 0x2d
 8005522:	4a80      	ldr	r2, [pc, #512]	@ (8005724 <_printf_float+0x2d8>)
 8005524:	bfb8      	it	lt
 8005526:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800552a:	4b7f      	ldr	r3, [pc, #508]	@ (8005728 <_printf_float+0x2dc>)
 800552c:	e7d3      	b.n	80054d6 <_printf_float+0x8a>
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	d13f      	bne.n	80055b8 <_printf_float+0x16c>
 8005538:	2306      	movs	r3, #6
 800553a:	6063      	str	r3, [r4, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	9206      	str	r2, [sp, #24]
 8005546:	aa0e      	add	r2, sp, #56	@ 0x38
 8005548:	e9cd a204 	strd	sl, r2, [sp, #16]
 800554c:	aa0d      	add	r2, sp, #52	@ 0x34
 800554e:	9203      	str	r2, [sp, #12]
 8005550:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005554:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	4642      	mov	r2, r8
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4628      	mov	r0, r5
 8005560:	464b      	mov	r3, r9
 8005562:	910a      	str	r1, [sp, #40]	@ 0x28
 8005564:	f7ff fed3 	bl	800530e <__cvt>
 8005568:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800556a:	4680      	mov	r8, r0
 800556c:	2947      	cmp	r1, #71	@ 0x47
 800556e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005570:	d128      	bne.n	80055c4 <_printf_float+0x178>
 8005572:	1cc8      	adds	r0, r1, #3
 8005574:	db02      	blt.n	800557c <_printf_float+0x130>
 8005576:	6863      	ldr	r3, [r4, #4]
 8005578:	4299      	cmp	r1, r3
 800557a:	dd40      	ble.n	80055fe <_printf_float+0x1b2>
 800557c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005580:	fa5f fa8a 	uxtb.w	sl, sl
 8005584:	4652      	mov	r2, sl
 8005586:	3901      	subs	r1, #1
 8005588:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800558c:	910d      	str	r1, [sp, #52]	@ 0x34
 800558e:	f7ff ff22 	bl	80053d6 <__exponent>
 8005592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005594:	4681      	mov	r9, r0
 8005596:	1813      	adds	r3, r2, r0
 8005598:	2a01      	cmp	r2, #1
 800559a:	6123      	str	r3, [r4, #16]
 800559c:	dc02      	bgt.n	80055a4 <_printf_float+0x158>
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	07d2      	lsls	r2, r2, #31
 80055a2:	d501      	bpl.n	80055a8 <_printf_float+0x15c>
 80055a4:	3301      	adds	r3, #1
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d09e      	beq.n	80054ee <_printf_float+0xa2>
 80055b0:	232d      	movs	r3, #45	@ 0x2d
 80055b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055b6:	e79a      	b.n	80054ee <_printf_float+0xa2>
 80055b8:	2947      	cmp	r1, #71	@ 0x47
 80055ba:	d1bf      	bne.n	800553c <_printf_float+0xf0>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1bd      	bne.n	800553c <_printf_float+0xf0>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e7ba      	b.n	800553a <_printf_float+0xee>
 80055c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055c8:	d9dc      	bls.n	8005584 <_printf_float+0x138>
 80055ca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80055ce:	d118      	bne.n	8005602 <_printf_float+0x1b6>
 80055d0:	2900      	cmp	r1, #0
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	dd0b      	ble.n	80055ee <_printf_float+0x1a2>
 80055d6:	6121      	str	r1, [r4, #16]
 80055d8:	b913      	cbnz	r3, 80055e0 <_printf_float+0x194>
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	07d0      	lsls	r0, r2, #31
 80055de:	d502      	bpl.n	80055e6 <_printf_float+0x19a>
 80055e0:	3301      	adds	r3, #1
 80055e2:	440b      	add	r3, r1
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	f04f 0900 	mov.w	r9, #0
 80055ea:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055ec:	e7dc      	b.n	80055a8 <_printf_float+0x15c>
 80055ee:	b913      	cbnz	r3, 80055f6 <_printf_float+0x1aa>
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	07d2      	lsls	r2, r2, #31
 80055f4:	d501      	bpl.n	80055fa <_printf_float+0x1ae>
 80055f6:	3302      	adds	r3, #2
 80055f8:	e7f4      	b.n	80055e4 <_printf_float+0x198>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e7f2      	b.n	80055e4 <_printf_float+0x198>
 80055fe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005604:	4299      	cmp	r1, r3
 8005606:	db05      	blt.n	8005614 <_printf_float+0x1c8>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	6121      	str	r1, [r4, #16]
 800560c:	07d8      	lsls	r0, r3, #31
 800560e:	d5ea      	bpl.n	80055e6 <_printf_float+0x19a>
 8005610:	1c4b      	adds	r3, r1, #1
 8005612:	e7e7      	b.n	80055e4 <_printf_float+0x198>
 8005614:	2900      	cmp	r1, #0
 8005616:	bfcc      	ite	gt
 8005618:	2201      	movgt	r2, #1
 800561a:	f1c1 0202 	rsble	r2, r1, #2
 800561e:	4413      	add	r3, r2
 8005620:	e7e0      	b.n	80055e4 <_printf_float+0x198>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	055a      	lsls	r2, r3, #21
 8005626:	d407      	bmi.n	8005638 <_printf_float+0x1ec>
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	4642      	mov	r2, r8
 800562c:	4631      	mov	r1, r6
 800562e:	4628      	mov	r0, r5
 8005630:	47b8      	blx	r7
 8005632:	3001      	adds	r0, #1
 8005634:	d12b      	bne.n	800568e <_printf_float+0x242>
 8005636:	e764      	b.n	8005502 <_printf_float+0xb6>
 8005638:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800563c:	f240 80dc 	bls.w	80057f8 <_printf_float+0x3ac>
 8005640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	f7fb f9ae 	bl	80009a8 <__aeabi_dcmpeq>
 800564c:	2800      	cmp	r0, #0
 800564e:	d033      	beq.n	80056b8 <_printf_float+0x26c>
 8005650:	2301      	movs	r3, #1
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	4a35      	ldr	r2, [pc, #212]	@ (800572c <_printf_float+0x2e0>)
 8005658:	47b8      	blx	r7
 800565a:	3001      	adds	r0, #1
 800565c:	f43f af51 	beq.w	8005502 <_printf_float+0xb6>
 8005660:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005664:	4543      	cmp	r3, r8
 8005666:	db02      	blt.n	800566e <_printf_float+0x222>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	07d8      	lsls	r0, r3, #31
 800566c:	d50f      	bpl.n	800568e <_printf_float+0x242>
 800566e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005672:	4631      	mov	r1, r6
 8005674:	4628      	mov	r0, r5
 8005676:	47b8      	blx	r7
 8005678:	3001      	adds	r0, #1
 800567a:	f43f af42 	beq.w	8005502 <_printf_float+0xb6>
 800567e:	f04f 0900 	mov.w	r9, #0
 8005682:	f108 38ff 	add.w	r8, r8, #4294967295
 8005686:	f104 0a1a 	add.w	sl, r4, #26
 800568a:	45c8      	cmp	r8, r9
 800568c:	dc09      	bgt.n	80056a2 <_printf_float+0x256>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	079b      	lsls	r3, r3, #30
 8005692:	f100 8102 	bmi.w	800589a <_printf_float+0x44e>
 8005696:	68e0      	ldr	r0, [r4, #12]
 8005698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800569a:	4298      	cmp	r0, r3
 800569c:	bfb8      	it	lt
 800569e:	4618      	movlt	r0, r3
 80056a0:	e731      	b.n	8005506 <_printf_float+0xba>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4652      	mov	r2, sl
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b8      	blx	r7
 80056ac:	3001      	adds	r0, #1
 80056ae:	f43f af28 	beq.w	8005502 <_printf_float+0xb6>
 80056b2:	f109 0901 	add.w	r9, r9, #1
 80056b6:	e7e8      	b.n	800568a <_printf_float+0x23e>
 80056b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	dc38      	bgt.n	8005730 <_printf_float+0x2e4>
 80056be:	2301      	movs	r3, #1
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	4a19      	ldr	r2, [pc, #100]	@ (800572c <_printf_float+0x2e0>)
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	f43f af1a 	beq.w	8005502 <_printf_float+0xb6>
 80056ce:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80056d2:	ea59 0303 	orrs.w	r3, r9, r3
 80056d6:	d102      	bne.n	80056de <_printf_float+0x292>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	07d9      	lsls	r1, r3, #31
 80056dc:	d5d7      	bpl.n	800568e <_printf_float+0x242>
 80056de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	f43f af0a 	beq.w	8005502 <_printf_float+0xb6>
 80056ee:	f04f 0a00 	mov.w	sl, #0
 80056f2:	f104 0b1a 	add.w	fp, r4, #26
 80056f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056f8:	425b      	negs	r3, r3
 80056fa:	4553      	cmp	r3, sl
 80056fc:	dc01      	bgt.n	8005702 <_printf_float+0x2b6>
 80056fe:	464b      	mov	r3, r9
 8005700:	e793      	b.n	800562a <_printf_float+0x1de>
 8005702:	2301      	movs	r3, #1
 8005704:	465a      	mov	r2, fp
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	f43f aef8 	beq.w	8005502 <_printf_float+0xb6>
 8005712:	f10a 0a01 	add.w	sl, sl, #1
 8005716:	e7ee      	b.n	80056f6 <_printf_float+0x2aa>
 8005718:	7fefffff 	.word	0x7fefffff
 800571c:	08007c98 	.word	0x08007c98
 8005720:	08007c9c 	.word	0x08007c9c
 8005724:	08007ca0 	.word	0x08007ca0
 8005728:	08007ca4 	.word	0x08007ca4
 800572c:	08007ca8 	.word	0x08007ca8
 8005730:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005732:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005736:	4553      	cmp	r3, sl
 8005738:	bfa8      	it	ge
 800573a:	4653      	movge	r3, sl
 800573c:	2b00      	cmp	r3, #0
 800573e:	4699      	mov	r9, r3
 8005740:	dc36      	bgt.n	80057b0 <_printf_float+0x364>
 8005742:	f04f 0b00 	mov.w	fp, #0
 8005746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800574a:	f104 021a 	add.w	r2, r4, #26
 800574e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005750:	930a      	str	r3, [sp, #40]	@ 0x28
 8005752:	eba3 0309 	sub.w	r3, r3, r9
 8005756:	455b      	cmp	r3, fp
 8005758:	dc31      	bgt.n	80057be <_printf_float+0x372>
 800575a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800575c:	459a      	cmp	sl, r3
 800575e:	dc3a      	bgt.n	80057d6 <_printf_float+0x38a>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	07da      	lsls	r2, r3, #31
 8005764:	d437      	bmi.n	80057d6 <_printf_float+0x38a>
 8005766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005768:	ebaa 0903 	sub.w	r9, sl, r3
 800576c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800576e:	ebaa 0303 	sub.w	r3, sl, r3
 8005772:	4599      	cmp	r9, r3
 8005774:	bfa8      	it	ge
 8005776:	4699      	movge	r9, r3
 8005778:	f1b9 0f00 	cmp.w	r9, #0
 800577c:	dc33      	bgt.n	80057e6 <_printf_float+0x39a>
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005786:	f104 0b1a 	add.w	fp, r4, #26
 800578a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800578c:	ebaa 0303 	sub.w	r3, sl, r3
 8005790:	eba3 0309 	sub.w	r3, r3, r9
 8005794:	4543      	cmp	r3, r8
 8005796:	f77f af7a 	ble.w	800568e <_printf_float+0x242>
 800579a:	2301      	movs	r3, #1
 800579c:	465a      	mov	r2, fp
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f43f aeac 	beq.w	8005502 <_printf_float+0xb6>
 80057aa:	f108 0801 	add.w	r8, r8, #1
 80057ae:	e7ec      	b.n	800578a <_printf_float+0x33e>
 80057b0:	4642      	mov	r2, r8
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	d1c2      	bne.n	8005742 <_printf_float+0x2f6>
 80057bc:	e6a1      	b.n	8005502 <_printf_float+0xb6>
 80057be:	2301      	movs	r3, #1
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80057c6:	47b8      	blx	r7
 80057c8:	3001      	adds	r0, #1
 80057ca:	f43f ae9a 	beq.w	8005502 <_printf_float+0xb6>
 80057ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057d0:	f10b 0b01 	add.w	fp, fp, #1
 80057d4:	e7bb      	b.n	800574e <_printf_float+0x302>
 80057d6:	4631      	mov	r1, r6
 80057d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	d1c0      	bne.n	8005766 <_printf_float+0x31a>
 80057e4:	e68d      	b.n	8005502 <_printf_float+0xb6>
 80057e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057e8:	464b      	mov	r3, r9
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	4442      	add	r2, r8
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	d1c3      	bne.n	800577e <_printf_float+0x332>
 80057f6:	e684      	b.n	8005502 <_printf_float+0xb6>
 80057f8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057fc:	f1ba 0f01 	cmp.w	sl, #1
 8005800:	dc01      	bgt.n	8005806 <_printf_float+0x3ba>
 8005802:	07db      	lsls	r3, r3, #31
 8005804:	d536      	bpl.n	8005874 <_printf_float+0x428>
 8005806:	2301      	movs	r3, #1
 8005808:	4642      	mov	r2, r8
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae76 	beq.w	8005502 <_printf_float+0xb6>
 8005816:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae6e 	beq.w	8005502 <_printf_float+0xb6>
 8005826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800582a:	2200      	movs	r2, #0
 800582c:	2300      	movs	r3, #0
 800582e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005832:	f7fb f8b9 	bl	80009a8 <__aeabi_dcmpeq>
 8005836:	b9c0      	cbnz	r0, 800586a <_printf_float+0x41e>
 8005838:	4653      	mov	r3, sl
 800583a:	f108 0201 	add.w	r2, r8, #1
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	d10c      	bne.n	8005862 <_printf_float+0x416>
 8005848:	e65b      	b.n	8005502 <_printf_float+0xb6>
 800584a:	2301      	movs	r3, #1
 800584c:	465a      	mov	r2, fp
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f ae54 	beq.w	8005502 <_printf_float+0xb6>
 800585a:	f108 0801 	add.w	r8, r8, #1
 800585e:	45d0      	cmp	r8, sl
 8005860:	dbf3      	blt.n	800584a <_printf_float+0x3fe>
 8005862:	464b      	mov	r3, r9
 8005864:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005868:	e6e0      	b.n	800562c <_printf_float+0x1e0>
 800586a:	f04f 0800 	mov.w	r8, #0
 800586e:	f104 0b1a 	add.w	fp, r4, #26
 8005872:	e7f4      	b.n	800585e <_printf_float+0x412>
 8005874:	2301      	movs	r3, #1
 8005876:	4642      	mov	r2, r8
 8005878:	e7e1      	b.n	800583e <_printf_float+0x3f2>
 800587a:	2301      	movs	r3, #1
 800587c:	464a      	mov	r2, r9
 800587e:	4631      	mov	r1, r6
 8005880:	4628      	mov	r0, r5
 8005882:	47b8      	blx	r7
 8005884:	3001      	adds	r0, #1
 8005886:	f43f ae3c 	beq.w	8005502 <_printf_float+0xb6>
 800588a:	f108 0801 	add.w	r8, r8, #1
 800588e:	68e3      	ldr	r3, [r4, #12]
 8005890:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005892:	1a5b      	subs	r3, r3, r1
 8005894:	4543      	cmp	r3, r8
 8005896:	dcf0      	bgt.n	800587a <_printf_float+0x42e>
 8005898:	e6fd      	b.n	8005696 <_printf_float+0x24a>
 800589a:	f04f 0800 	mov.w	r8, #0
 800589e:	f104 0919 	add.w	r9, r4, #25
 80058a2:	e7f4      	b.n	800588e <_printf_float+0x442>

080058a4 <_printf_common>:
 80058a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	4616      	mov	r6, r2
 80058aa:	4698      	mov	r8, r3
 80058ac:	688a      	ldr	r2, [r1, #8]
 80058ae:	690b      	ldr	r3, [r1, #16]
 80058b0:	4607      	mov	r7, r0
 80058b2:	4293      	cmp	r3, r2
 80058b4:	bfb8      	it	lt
 80058b6:	4613      	movlt	r3, r2
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058be:	460c      	mov	r4, r1
 80058c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058c4:	b10a      	cbz	r2, 80058ca <_printf_common+0x26>
 80058c6:	3301      	adds	r3, #1
 80058c8:	6033      	str	r3, [r6, #0]
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	0699      	lsls	r1, r3, #26
 80058ce:	bf42      	ittt	mi
 80058d0:	6833      	ldrmi	r3, [r6, #0]
 80058d2:	3302      	addmi	r3, #2
 80058d4:	6033      	strmi	r3, [r6, #0]
 80058d6:	6825      	ldr	r5, [r4, #0]
 80058d8:	f015 0506 	ands.w	r5, r5, #6
 80058dc:	d106      	bne.n	80058ec <_printf_common+0x48>
 80058de:	f104 0a19 	add.w	sl, r4, #25
 80058e2:	68e3      	ldr	r3, [r4, #12]
 80058e4:	6832      	ldr	r2, [r6, #0]
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	42ab      	cmp	r3, r5
 80058ea:	dc2b      	bgt.n	8005944 <_printf_common+0xa0>
 80058ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	3b00      	subs	r3, #0
 80058f4:	bf18      	it	ne
 80058f6:	2301      	movne	r3, #1
 80058f8:	0692      	lsls	r2, r2, #26
 80058fa:	d430      	bmi.n	800595e <_printf_common+0xba>
 80058fc:	4641      	mov	r1, r8
 80058fe:	4638      	mov	r0, r7
 8005900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005904:	47c8      	blx	r9
 8005906:	3001      	adds	r0, #1
 8005908:	d023      	beq.n	8005952 <_printf_common+0xae>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	6922      	ldr	r2, [r4, #16]
 800590e:	f003 0306 	and.w	r3, r3, #6
 8005912:	2b04      	cmp	r3, #4
 8005914:	bf14      	ite	ne
 8005916:	2500      	movne	r5, #0
 8005918:	6833      	ldreq	r3, [r6, #0]
 800591a:	f04f 0600 	mov.w	r6, #0
 800591e:	bf08      	it	eq
 8005920:	68e5      	ldreq	r5, [r4, #12]
 8005922:	f104 041a 	add.w	r4, r4, #26
 8005926:	bf08      	it	eq
 8005928:	1aed      	subeq	r5, r5, r3
 800592a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800592e:	bf08      	it	eq
 8005930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005934:	4293      	cmp	r3, r2
 8005936:	bfc4      	itt	gt
 8005938:	1a9b      	subgt	r3, r3, r2
 800593a:	18ed      	addgt	r5, r5, r3
 800593c:	42b5      	cmp	r5, r6
 800593e:	d11a      	bne.n	8005976 <_printf_common+0xd2>
 8005940:	2000      	movs	r0, #0
 8005942:	e008      	b.n	8005956 <_printf_common+0xb2>
 8005944:	2301      	movs	r3, #1
 8005946:	4652      	mov	r2, sl
 8005948:	4641      	mov	r1, r8
 800594a:	4638      	mov	r0, r7
 800594c:	47c8      	blx	r9
 800594e:	3001      	adds	r0, #1
 8005950:	d103      	bne.n	800595a <_printf_common+0xb6>
 8005952:	f04f 30ff 	mov.w	r0, #4294967295
 8005956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595a:	3501      	adds	r5, #1
 800595c:	e7c1      	b.n	80058e2 <_printf_common+0x3e>
 800595e:	2030      	movs	r0, #48	@ 0x30
 8005960:	18e1      	adds	r1, r4, r3
 8005962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800596c:	4422      	add	r2, r4
 800596e:	3302      	adds	r3, #2
 8005970:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005974:	e7c2      	b.n	80058fc <_printf_common+0x58>
 8005976:	2301      	movs	r3, #1
 8005978:	4622      	mov	r2, r4
 800597a:	4641      	mov	r1, r8
 800597c:	4638      	mov	r0, r7
 800597e:	47c8      	blx	r9
 8005980:	3001      	adds	r0, #1
 8005982:	d0e6      	beq.n	8005952 <_printf_common+0xae>
 8005984:	3601      	adds	r6, #1
 8005986:	e7d9      	b.n	800593c <_printf_common+0x98>

08005988 <_printf_i>:
 8005988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	7e0f      	ldrb	r7, [r1, #24]
 800598e:	4691      	mov	r9, r2
 8005990:	2f78      	cmp	r7, #120	@ 0x78
 8005992:	4680      	mov	r8, r0
 8005994:	460c      	mov	r4, r1
 8005996:	469a      	mov	sl, r3
 8005998:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800599a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800599e:	d807      	bhi.n	80059b0 <_printf_i+0x28>
 80059a0:	2f62      	cmp	r7, #98	@ 0x62
 80059a2:	d80a      	bhi.n	80059ba <_printf_i+0x32>
 80059a4:	2f00      	cmp	r7, #0
 80059a6:	f000 80d3 	beq.w	8005b50 <_printf_i+0x1c8>
 80059aa:	2f58      	cmp	r7, #88	@ 0x58
 80059ac:	f000 80ba 	beq.w	8005b24 <_printf_i+0x19c>
 80059b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059b8:	e03a      	b.n	8005a30 <_printf_i+0xa8>
 80059ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059be:	2b15      	cmp	r3, #21
 80059c0:	d8f6      	bhi.n	80059b0 <_printf_i+0x28>
 80059c2:	a101      	add	r1, pc, #4	@ (adr r1, 80059c8 <_printf_i+0x40>)
 80059c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059c8:	08005a21 	.word	0x08005a21
 80059cc:	08005a35 	.word	0x08005a35
 80059d0:	080059b1 	.word	0x080059b1
 80059d4:	080059b1 	.word	0x080059b1
 80059d8:	080059b1 	.word	0x080059b1
 80059dc:	080059b1 	.word	0x080059b1
 80059e0:	08005a35 	.word	0x08005a35
 80059e4:	080059b1 	.word	0x080059b1
 80059e8:	080059b1 	.word	0x080059b1
 80059ec:	080059b1 	.word	0x080059b1
 80059f0:	080059b1 	.word	0x080059b1
 80059f4:	08005b37 	.word	0x08005b37
 80059f8:	08005a5f 	.word	0x08005a5f
 80059fc:	08005af1 	.word	0x08005af1
 8005a00:	080059b1 	.word	0x080059b1
 8005a04:	080059b1 	.word	0x080059b1
 8005a08:	08005b59 	.word	0x08005b59
 8005a0c:	080059b1 	.word	0x080059b1
 8005a10:	08005a5f 	.word	0x08005a5f
 8005a14:	080059b1 	.word	0x080059b1
 8005a18:	080059b1 	.word	0x080059b1
 8005a1c:	08005af9 	.word	0x08005af9
 8005a20:	6833      	ldr	r3, [r6, #0]
 8005a22:	1d1a      	adds	r2, r3, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6032      	str	r2, [r6, #0]
 8005a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a30:	2301      	movs	r3, #1
 8005a32:	e09e      	b.n	8005b72 <_printf_i+0x1ea>
 8005a34:	6833      	ldr	r3, [r6, #0]
 8005a36:	6820      	ldr	r0, [r4, #0]
 8005a38:	1d19      	adds	r1, r3, #4
 8005a3a:	6031      	str	r1, [r6, #0]
 8005a3c:	0606      	lsls	r6, r0, #24
 8005a3e:	d501      	bpl.n	8005a44 <_printf_i+0xbc>
 8005a40:	681d      	ldr	r5, [r3, #0]
 8005a42:	e003      	b.n	8005a4c <_printf_i+0xc4>
 8005a44:	0645      	lsls	r5, r0, #25
 8005a46:	d5fb      	bpl.n	8005a40 <_printf_i+0xb8>
 8005a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	da03      	bge.n	8005a58 <_printf_i+0xd0>
 8005a50:	232d      	movs	r3, #45	@ 0x2d
 8005a52:	426d      	negs	r5, r5
 8005a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a58:	230a      	movs	r3, #10
 8005a5a:	4859      	ldr	r0, [pc, #356]	@ (8005bc0 <_printf_i+0x238>)
 8005a5c:	e011      	b.n	8005a82 <_printf_i+0xfa>
 8005a5e:	6821      	ldr	r1, [r4, #0]
 8005a60:	6833      	ldr	r3, [r6, #0]
 8005a62:	0608      	lsls	r0, r1, #24
 8005a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a68:	d402      	bmi.n	8005a70 <_printf_i+0xe8>
 8005a6a:	0649      	lsls	r1, r1, #25
 8005a6c:	bf48      	it	mi
 8005a6e:	b2ad      	uxthmi	r5, r5
 8005a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a72:	6033      	str	r3, [r6, #0]
 8005a74:	bf14      	ite	ne
 8005a76:	230a      	movne	r3, #10
 8005a78:	2308      	moveq	r3, #8
 8005a7a:	4851      	ldr	r0, [pc, #324]	@ (8005bc0 <_printf_i+0x238>)
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a82:	6866      	ldr	r6, [r4, #4]
 8005a84:	2e00      	cmp	r6, #0
 8005a86:	bfa8      	it	ge
 8005a88:	6821      	ldrge	r1, [r4, #0]
 8005a8a:	60a6      	str	r6, [r4, #8]
 8005a8c:	bfa4      	itt	ge
 8005a8e:	f021 0104 	bicge.w	r1, r1, #4
 8005a92:	6021      	strge	r1, [r4, #0]
 8005a94:	b90d      	cbnz	r5, 8005a9a <_printf_i+0x112>
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	d04b      	beq.n	8005b32 <_printf_i+0x1aa>
 8005a9a:	4616      	mov	r6, r2
 8005a9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aa0:	fb03 5711 	mls	r7, r3, r1, r5
 8005aa4:	5dc7      	ldrb	r7, [r0, r7]
 8005aa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aaa:	462f      	mov	r7, r5
 8005aac:	42bb      	cmp	r3, r7
 8005aae:	460d      	mov	r5, r1
 8005ab0:	d9f4      	bls.n	8005a9c <_printf_i+0x114>
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d10b      	bne.n	8005ace <_printf_i+0x146>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	07df      	lsls	r7, r3, #31
 8005aba:	d508      	bpl.n	8005ace <_printf_i+0x146>
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	6861      	ldr	r1, [r4, #4]
 8005ac0:	4299      	cmp	r1, r3
 8005ac2:	bfde      	ittt	le
 8005ac4:	2330      	movle	r3, #48	@ 0x30
 8005ac6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ace:	1b92      	subs	r2, r2, r6
 8005ad0:	6122      	str	r2, [r4, #16]
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	f8cd a000 	str.w	sl, [sp]
 8005adc:	aa03      	add	r2, sp, #12
 8005ade:	f7ff fee1 	bl	80058a4 <_printf_common>
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d14a      	bne.n	8005b7c <_printf_i+0x1f4>
 8005ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aea:	b004      	add	sp, #16
 8005aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	f043 0320 	orr.w	r3, r3, #32
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	2778      	movs	r7, #120	@ 0x78
 8005afa:	4832      	ldr	r0, [pc, #200]	@ (8005bc4 <_printf_i+0x23c>)
 8005afc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	6831      	ldr	r1, [r6, #0]
 8005b04:	061f      	lsls	r7, r3, #24
 8005b06:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b0a:	d402      	bmi.n	8005b12 <_printf_i+0x18a>
 8005b0c:	065f      	lsls	r7, r3, #25
 8005b0e:	bf48      	it	mi
 8005b10:	b2ad      	uxthmi	r5, r5
 8005b12:	6031      	str	r1, [r6, #0]
 8005b14:	07d9      	lsls	r1, r3, #31
 8005b16:	bf44      	itt	mi
 8005b18:	f043 0320 	orrmi.w	r3, r3, #32
 8005b1c:	6023      	strmi	r3, [r4, #0]
 8005b1e:	b11d      	cbz	r5, 8005b28 <_printf_i+0x1a0>
 8005b20:	2310      	movs	r3, #16
 8005b22:	e7ab      	b.n	8005a7c <_printf_i+0xf4>
 8005b24:	4826      	ldr	r0, [pc, #152]	@ (8005bc0 <_printf_i+0x238>)
 8005b26:	e7e9      	b.n	8005afc <_printf_i+0x174>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	e7f6      	b.n	8005b20 <_printf_i+0x198>
 8005b32:	4616      	mov	r6, r2
 8005b34:	e7bd      	b.n	8005ab2 <_printf_i+0x12a>
 8005b36:	6833      	ldr	r3, [r6, #0]
 8005b38:	6825      	ldr	r5, [r4, #0]
 8005b3a:	1d18      	adds	r0, r3, #4
 8005b3c:	6961      	ldr	r1, [r4, #20]
 8005b3e:	6030      	str	r0, [r6, #0]
 8005b40:	062e      	lsls	r6, r5, #24
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	d501      	bpl.n	8005b4a <_printf_i+0x1c2>
 8005b46:	6019      	str	r1, [r3, #0]
 8005b48:	e002      	b.n	8005b50 <_printf_i+0x1c8>
 8005b4a:	0668      	lsls	r0, r5, #25
 8005b4c:	d5fb      	bpl.n	8005b46 <_printf_i+0x1be>
 8005b4e:	8019      	strh	r1, [r3, #0]
 8005b50:	2300      	movs	r3, #0
 8005b52:	4616      	mov	r6, r2
 8005b54:	6123      	str	r3, [r4, #16]
 8005b56:	e7bc      	b.n	8005ad2 <_printf_i+0x14a>
 8005b58:	6833      	ldr	r3, [r6, #0]
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	1d1a      	adds	r2, r3, #4
 8005b5e:	6032      	str	r2, [r6, #0]
 8005b60:	681e      	ldr	r6, [r3, #0]
 8005b62:	6862      	ldr	r2, [r4, #4]
 8005b64:	4630      	mov	r0, r6
 8005b66:	f000 f9c6 	bl	8005ef6 <memchr>
 8005b6a:	b108      	cbz	r0, 8005b70 <_printf_i+0x1e8>
 8005b6c:	1b80      	subs	r0, r0, r6
 8005b6e:	6060      	str	r0, [r4, #4]
 8005b70:	6863      	ldr	r3, [r4, #4]
 8005b72:	6123      	str	r3, [r4, #16]
 8005b74:	2300      	movs	r3, #0
 8005b76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b7a:	e7aa      	b.n	8005ad2 <_printf_i+0x14a>
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4640      	mov	r0, r8
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	47d0      	blx	sl
 8005b86:	3001      	adds	r0, #1
 8005b88:	d0ad      	beq.n	8005ae6 <_printf_i+0x15e>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	079b      	lsls	r3, r3, #30
 8005b8e:	d413      	bmi.n	8005bb8 <_printf_i+0x230>
 8005b90:	68e0      	ldr	r0, [r4, #12]
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	4298      	cmp	r0, r3
 8005b96:	bfb8      	it	lt
 8005b98:	4618      	movlt	r0, r3
 8005b9a:	e7a6      	b.n	8005aea <_printf_i+0x162>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4632      	mov	r2, r6
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	47d0      	blx	sl
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d09d      	beq.n	8005ae6 <_printf_i+0x15e>
 8005baa:	3501      	adds	r5, #1
 8005bac:	68e3      	ldr	r3, [r4, #12]
 8005bae:	9903      	ldr	r1, [sp, #12]
 8005bb0:	1a5b      	subs	r3, r3, r1
 8005bb2:	42ab      	cmp	r3, r5
 8005bb4:	dcf2      	bgt.n	8005b9c <_printf_i+0x214>
 8005bb6:	e7eb      	b.n	8005b90 <_printf_i+0x208>
 8005bb8:	2500      	movs	r5, #0
 8005bba:	f104 0619 	add.w	r6, r4, #25
 8005bbe:	e7f5      	b.n	8005bac <_printf_i+0x224>
 8005bc0:	08007caa 	.word	0x08007caa
 8005bc4:	08007cbb 	.word	0x08007cbb

08005bc8 <std>:
 8005bc8:	2300      	movs	r3, #0
 8005bca:	b510      	push	{r4, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	e9c0 3300 	strd	r3, r3, [r0]
 8005bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bd6:	6083      	str	r3, [r0, #8]
 8005bd8:	8181      	strh	r1, [r0, #12]
 8005bda:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bdc:	81c2      	strh	r2, [r0, #14]
 8005bde:	6183      	str	r3, [r0, #24]
 8005be0:	4619      	mov	r1, r3
 8005be2:	2208      	movs	r2, #8
 8005be4:	305c      	adds	r0, #92	@ 0x5c
 8005be6:	f000 f906 	bl	8005df6 <memset>
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <std+0x58>)
 8005bec:	6224      	str	r4, [r4, #32]
 8005bee:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c24 <std+0x5c>)
 8005bf2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c28 <std+0x60>)
 8005bf6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8005c2c <std+0x64>)
 8005bfa:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <std+0x68>)
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d006      	beq.n	8005c10 <std+0x48>
 8005c02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c06:	4294      	cmp	r4, r2
 8005c08:	d002      	beq.n	8005c10 <std+0x48>
 8005c0a:	33d0      	adds	r3, #208	@ 0xd0
 8005c0c:	429c      	cmp	r4, r3
 8005c0e:	d105      	bne.n	8005c1c <std+0x54>
 8005c10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	f000 b96a 	b.w	8005ef0 <__retarget_lock_init_recursive>
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	bf00      	nop
 8005c20:	08005d71 	.word	0x08005d71
 8005c24:	08005d93 	.word	0x08005d93
 8005c28:	08005dcb 	.word	0x08005dcb
 8005c2c:	08005def 	.word	0x08005def
 8005c30:	20000598 	.word	0x20000598

08005c34 <stdio_exit_handler>:
 8005c34:	4a02      	ldr	r2, [pc, #8]	@ (8005c40 <stdio_exit_handler+0xc>)
 8005c36:	4903      	ldr	r1, [pc, #12]	@ (8005c44 <stdio_exit_handler+0x10>)
 8005c38:	4803      	ldr	r0, [pc, #12]	@ (8005c48 <stdio_exit_handler+0x14>)
 8005c3a:	f000 b869 	b.w	8005d10 <_fwalk_sglue>
 8005c3e:	bf00      	nop
 8005c40:	20000010 	.word	0x20000010
 8005c44:	08007835 	.word	0x08007835
 8005c48:	20000020 	.word	0x20000020

08005c4c <cleanup_stdio>:
 8005c4c:	6841      	ldr	r1, [r0, #4]
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <cleanup_stdio+0x34>)
 8005c50:	b510      	push	{r4, lr}
 8005c52:	4299      	cmp	r1, r3
 8005c54:	4604      	mov	r4, r0
 8005c56:	d001      	beq.n	8005c5c <cleanup_stdio+0x10>
 8005c58:	f001 fdec 	bl	8007834 <_fflush_r>
 8005c5c:	68a1      	ldr	r1, [r4, #8]
 8005c5e:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <cleanup_stdio+0x38>)
 8005c60:	4299      	cmp	r1, r3
 8005c62:	d002      	beq.n	8005c6a <cleanup_stdio+0x1e>
 8005c64:	4620      	mov	r0, r4
 8005c66:	f001 fde5 	bl	8007834 <_fflush_r>
 8005c6a:	68e1      	ldr	r1, [r4, #12]
 8005c6c:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <cleanup_stdio+0x3c>)
 8005c6e:	4299      	cmp	r1, r3
 8005c70:	d004      	beq.n	8005c7c <cleanup_stdio+0x30>
 8005c72:	4620      	mov	r0, r4
 8005c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c78:	f001 bddc 	b.w	8007834 <_fflush_r>
 8005c7c:	bd10      	pop	{r4, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000598 	.word	0x20000598
 8005c84:	20000600 	.word	0x20000600
 8005c88:	20000668 	.word	0x20000668

08005c8c <global_stdio_init.part.0>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <global_stdio_init.part.0+0x30>)
 8005c90:	4c0b      	ldr	r4, [pc, #44]	@ (8005cc0 <global_stdio_init.part.0+0x34>)
 8005c92:	4a0c      	ldr	r2, [pc, #48]	@ (8005cc4 <global_stdio_init.part.0+0x38>)
 8005c94:	4620      	mov	r0, r4
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	2104      	movs	r1, #4
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f7ff ff94 	bl	8005bc8 <std>
 8005ca0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	2109      	movs	r1, #9
 8005ca8:	f7ff ff8e 	bl	8005bc8 <std>
 8005cac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb6:	2112      	movs	r1, #18
 8005cb8:	f7ff bf86 	b.w	8005bc8 <std>
 8005cbc:	200006d0 	.word	0x200006d0
 8005cc0:	20000598 	.word	0x20000598
 8005cc4:	08005c35 	.word	0x08005c35

08005cc8 <__sfp_lock_acquire>:
 8005cc8:	4801      	ldr	r0, [pc, #4]	@ (8005cd0 <__sfp_lock_acquire+0x8>)
 8005cca:	f000 b912 	b.w	8005ef2 <__retarget_lock_acquire_recursive>
 8005cce:	bf00      	nop
 8005cd0:	200006d9 	.word	0x200006d9

08005cd4 <__sfp_lock_release>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	@ (8005cdc <__sfp_lock_release+0x8>)
 8005cd6:	f000 b90d 	b.w	8005ef4 <__retarget_lock_release_recursive>
 8005cda:	bf00      	nop
 8005cdc:	200006d9 	.word	0x200006d9

08005ce0 <__sinit>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	f7ff fff0 	bl	8005cc8 <__sfp_lock_acquire>
 8005ce8:	6a23      	ldr	r3, [r4, #32]
 8005cea:	b11b      	cbz	r3, 8005cf4 <__sinit+0x14>
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf0:	f7ff bff0 	b.w	8005cd4 <__sfp_lock_release>
 8005cf4:	4b04      	ldr	r3, [pc, #16]	@ (8005d08 <__sinit+0x28>)
 8005cf6:	6223      	str	r3, [r4, #32]
 8005cf8:	4b04      	ldr	r3, [pc, #16]	@ (8005d0c <__sinit+0x2c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f5      	bne.n	8005cec <__sinit+0xc>
 8005d00:	f7ff ffc4 	bl	8005c8c <global_stdio_init.part.0>
 8005d04:	e7f2      	b.n	8005cec <__sinit+0xc>
 8005d06:	bf00      	nop
 8005d08:	08005c4d 	.word	0x08005c4d
 8005d0c:	200006d0 	.word	0x200006d0

08005d10 <_fwalk_sglue>:
 8005d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d14:	4607      	mov	r7, r0
 8005d16:	4688      	mov	r8, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d20:	f1b9 0901 	subs.w	r9, r9, #1
 8005d24:	d505      	bpl.n	8005d32 <_fwalk_sglue+0x22>
 8005d26:	6824      	ldr	r4, [r4, #0]
 8005d28:	2c00      	cmp	r4, #0
 8005d2a:	d1f7      	bne.n	8005d1c <_fwalk_sglue+0xc>
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d32:	89ab      	ldrh	r3, [r5, #12]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d907      	bls.n	8005d48 <_fwalk_sglue+0x38>
 8005d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	d003      	beq.n	8005d48 <_fwalk_sglue+0x38>
 8005d40:	4629      	mov	r1, r5
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c0      	blx	r8
 8005d46:	4306      	orrs	r6, r0
 8005d48:	3568      	adds	r5, #104	@ 0x68
 8005d4a:	e7e9      	b.n	8005d20 <_fwalk_sglue+0x10>

08005d4c <iprintf>:
 8005d4c:	b40f      	push	{r0, r1, r2, r3}
 8005d4e:	b507      	push	{r0, r1, r2, lr}
 8005d50:	4906      	ldr	r1, [pc, #24]	@ (8005d6c <iprintf+0x20>)
 8005d52:	ab04      	add	r3, sp, #16
 8005d54:	6808      	ldr	r0, [r1, #0]
 8005d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d5a:	6881      	ldr	r1, [r0, #8]
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	f001 fbd1 	bl	8007504 <_vfiprintf_r>
 8005d62:	b003      	add	sp, #12
 8005d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d68:	b004      	add	sp, #16
 8005d6a:	4770      	bx	lr
 8005d6c:	2000001c 	.word	0x2000001c

08005d70 <__sread>:
 8005d70:	b510      	push	{r4, lr}
 8005d72:	460c      	mov	r4, r1
 8005d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d78:	f000 f86c 	bl	8005e54 <_read_r>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	bfab      	itete	ge
 8005d80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d82:	89a3      	ldrhlt	r3, [r4, #12]
 8005d84:	181b      	addge	r3, r3, r0
 8005d86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d8a:	bfac      	ite	ge
 8005d8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d8e:	81a3      	strhlt	r3, [r4, #12]
 8005d90:	bd10      	pop	{r4, pc}

08005d92 <__swrite>:
 8005d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	461f      	mov	r7, r3
 8005d98:	898b      	ldrh	r3, [r1, #12]
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	05db      	lsls	r3, r3, #23
 8005d9e:	460c      	mov	r4, r1
 8005da0:	4616      	mov	r6, r2
 8005da2:	d505      	bpl.n	8005db0 <__swrite+0x1e>
 8005da4:	2302      	movs	r3, #2
 8005da6:	2200      	movs	r2, #0
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	f000 f840 	bl	8005e30 <_lseek_r>
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	4632      	mov	r2, r6
 8005db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	4628      	mov	r0, r5
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc6:	f000 b857 	b.w	8005e78 <_write_r>

08005dca <__sseek>:
 8005dca:	b510      	push	{r4, lr}
 8005dcc:	460c      	mov	r4, r1
 8005dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd2:	f000 f82d 	bl	8005e30 <_lseek_r>
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	bf15      	itete	ne
 8005ddc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005de2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005de6:	81a3      	strheq	r3, [r4, #12]
 8005de8:	bf18      	it	ne
 8005dea:	81a3      	strhne	r3, [r4, #12]
 8005dec:	bd10      	pop	{r4, pc}

08005dee <__sclose>:
 8005dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df2:	f000 b80d 	b.w	8005e10 <_close_r>

08005df6 <memset>:
 8005df6:	4603      	mov	r3, r0
 8005df8:	4402      	add	r2, r0
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d100      	bne.n	8005e00 <memset+0xa>
 8005dfe:	4770      	bx	lr
 8005e00:	f803 1b01 	strb.w	r1, [r3], #1
 8005e04:	e7f9      	b.n	8005dfa <memset+0x4>
	...

08005e08 <_localeconv_r>:
 8005e08:	4800      	ldr	r0, [pc, #0]	@ (8005e0c <_localeconv_r+0x4>)
 8005e0a:	4770      	bx	lr
 8005e0c:	2000015c 	.word	0x2000015c

08005e10 <_close_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	2300      	movs	r3, #0
 8005e14:	4d05      	ldr	r5, [pc, #20]	@ (8005e2c <_close_r+0x1c>)
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	f7fc fc96 	bl	800274c <_close>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_close_r+0x1a>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_close_r+0x1a>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	200006d4 	.word	0x200006d4

08005e30 <_lseek_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4d05      	ldr	r5, [pc, #20]	@ (8005e50 <_lseek_r+0x20>)
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fc fc8e 	bl	8002760 <_lseek>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_lseek_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_lseek_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	200006d4 	.word	0x200006d4

08005e54 <_read_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4d05      	ldr	r5, [pc, #20]	@ (8005e74 <_read_r+0x20>)
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fc fc62 	bl	800272c <_read>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_read_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_read_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	200006d4 	.word	0x200006d4

08005e78 <_write_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	2200      	movs	r2, #0
 8005e82:	4d05      	ldr	r5, [pc, #20]	@ (8005e98 <_write_r+0x20>)
 8005e84:	602a      	str	r2, [r5, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f7fb fe52 	bl	8001b30 <_write>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_write_r+0x1e>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_write_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	200006d4 	.word	0x200006d4

08005e9c <__errno>:
 8005e9c:	4b01      	ldr	r3, [pc, #4]	@ (8005ea4 <__errno+0x8>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	2000001c 	.word	0x2000001c

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	2600      	movs	r6, #0
 8005eac:	4d0c      	ldr	r5, [pc, #48]	@ (8005ee0 <__libc_init_array+0x38>)
 8005eae:	4c0d      	ldr	r4, [pc, #52]	@ (8005ee4 <__libc_init_array+0x3c>)
 8005eb0:	1b64      	subs	r4, r4, r5
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	42a6      	cmp	r6, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	f001 feca 	bl	8007c50 <_init>
 8005ebc:	2600      	movs	r6, #0
 8005ebe:	4d0a      	ldr	r5, [pc, #40]	@ (8005ee8 <__libc_init_array+0x40>)
 8005ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8005eec <__libc_init_array+0x44>)
 8005ec2:	1b64      	subs	r4, r4, r5
 8005ec4:	10a4      	asrs	r4, r4, #2
 8005ec6:	42a6      	cmp	r6, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed0:	4798      	blx	r3
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eda:	4798      	blx	r3
 8005edc:	3601      	adds	r6, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	08008010 	.word	0x08008010
 8005ee4:	08008010 	.word	0x08008010
 8005ee8:	08008010 	.word	0x08008010
 8005eec:	08008014 	.word	0x08008014

08005ef0 <__retarget_lock_init_recursive>:
 8005ef0:	4770      	bx	lr

08005ef2 <__retarget_lock_acquire_recursive>:
 8005ef2:	4770      	bx	lr

08005ef4 <__retarget_lock_release_recursive>:
 8005ef4:	4770      	bx	lr

08005ef6 <memchr>:
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	b2c9      	uxtb	r1, r1
 8005efc:	4402      	add	r2, r0
 8005efe:	4293      	cmp	r3, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	d101      	bne.n	8005f08 <memchr+0x12>
 8005f04:	2000      	movs	r0, #0
 8005f06:	e003      	b.n	8005f10 <memchr+0x1a>
 8005f08:	7804      	ldrb	r4, [r0, #0]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	428c      	cmp	r4, r1
 8005f0e:	d1f6      	bne.n	8005efe <memchr+0x8>
 8005f10:	bd10      	pop	{r4, pc}

08005f12 <quorem>:
 8005f12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f16:	6903      	ldr	r3, [r0, #16]
 8005f18:	690c      	ldr	r4, [r1, #16]
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	db7e      	blt.n	800601e <quorem+0x10c>
 8005f20:	3c01      	subs	r4, #1
 8005f22:	00a3      	lsls	r3, r4, #2
 8005f24:	f100 0514 	add.w	r5, r0, #20
 8005f28:	f101 0814 	add.w	r8, r1, #20
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f48:	d32e      	bcc.n	8005fa8 <quorem+0x96>
 8005f4a:	f04f 0a00 	mov.w	sl, #0
 8005f4e:	46c4      	mov	ip, r8
 8005f50:	46ae      	mov	lr, r5
 8005f52:	46d3      	mov	fp, sl
 8005f54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f58:	b298      	uxth	r0, r3
 8005f5a:	fb06 a000 	mla	r0, r6, r0, sl
 8005f5e:	0c1b      	lsrs	r3, r3, #16
 8005f60:	0c02      	lsrs	r2, r0, #16
 8005f62:	fb06 2303 	mla	r3, r6, r3, r2
 8005f66:	f8de 2000 	ldr.w	r2, [lr]
 8005f6a:	b280      	uxth	r0, r0
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	1a12      	subs	r2, r2, r0
 8005f70:	445a      	add	r2, fp
 8005f72:	f8de 0000 	ldr.w	r0, [lr]
 8005f76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f84:	b292      	uxth	r2, r2
 8005f86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f8a:	45e1      	cmp	r9, ip
 8005f8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f90:	f84e 2b04 	str.w	r2, [lr], #4
 8005f94:	d2de      	bcs.n	8005f54 <quorem+0x42>
 8005f96:	9b00      	ldr	r3, [sp, #0]
 8005f98:	58eb      	ldr	r3, [r5, r3]
 8005f9a:	b92b      	cbnz	r3, 8005fa8 <quorem+0x96>
 8005f9c:	9b01      	ldr	r3, [sp, #4]
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	429d      	cmp	r5, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	d32f      	bcc.n	8006006 <quorem+0xf4>
 8005fa6:	613c      	str	r4, [r7, #16]
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f001 f97b 	bl	80072a4 <__mcmp>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	db25      	blt.n	8005ffe <quorem+0xec>
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fba:	f8d1 c000 	ldr.w	ip, [r1]
 8005fbe:	fa1f fe82 	uxth.w	lr, r2
 8005fc2:	fa1f f38c 	uxth.w	r3, ip
 8005fc6:	eba3 030e 	sub.w	r3, r3, lr
 8005fca:	4403      	add	r3, r0
 8005fcc:	0c12      	lsrs	r2, r2, #16
 8005fce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005fd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fdc:	45c1      	cmp	r9, r8
 8005fde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fe2:	f841 3b04 	str.w	r3, [r1], #4
 8005fe6:	d2e6      	bcs.n	8005fb6 <quorem+0xa4>
 8005fe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ff0:	b922      	cbnz	r2, 8005ffc <quorem+0xea>
 8005ff2:	3b04      	subs	r3, #4
 8005ff4:	429d      	cmp	r5, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	d30b      	bcc.n	8006012 <quorem+0x100>
 8005ffa:	613c      	str	r4, [r7, #16]
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	4630      	mov	r0, r6
 8006000:	b003      	add	sp, #12
 8006002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	3b04      	subs	r3, #4
 800600a:	2a00      	cmp	r2, #0
 800600c:	d1cb      	bne.n	8005fa6 <quorem+0x94>
 800600e:	3c01      	subs	r4, #1
 8006010:	e7c6      	b.n	8005fa0 <quorem+0x8e>
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	3b04      	subs	r3, #4
 8006016:	2a00      	cmp	r2, #0
 8006018:	d1ef      	bne.n	8005ffa <quorem+0xe8>
 800601a:	3c01      	subs	r4, #1
 800601c:	e7ea      	b.n	8005ff4 <quorem+0xe2>
 800601e:	2000      	movs	r0, #0
 8006020:	e7ee      	b.n	8006000 <quorem+0xee>
 8006022:	0000      	movs	r0, r0
 8006024:	0000      	movs	r0, r0
	...

08006028 <_dtoa_r>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	4614      	mov	r4, r2
 800602e:	461d      	mov	r5, r3
 8006030:	69c7      	ldr	r7, [r0, #28]
 8006032:	b097      	sub	sp, #92	@ 0x5c
 8006034:	4683      	mov	fp, r0
 8006036:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800603a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800603c:	b97f      	cbnz	r7, 800605e <_dtoa_r+0x36>
 800603e:	2010      	movs	r0, #16
 8006040:	f000 fe02 	bl	8006c48 <malloc>
 8006044:	4602      	mov	r2, r0
 8006046:	f8cb 001c 	str.w	r0, [fp, #28]
 800604a:	b920      	cbnz	r0, 8006056 <_dtoa_r+0x2e>
 800604c:	21ef      	movs	r1, #239	@ 0xef
 800604e:	4ba8      	ldr	r3, [pc, #672]	@ (80062f0 <_dtoa_r+0x2c8>)
 8006050:	48a8      	ldr	r0, [pc, #672]	@ (80062f4 <_dtoa_r+0x2cc>)
 8006052:	f001 fcc9 	bl	80079e8 <__assert_func>
 8006056:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800605a:	6007      	str	r7, [r0, #0]
 800605c:	60c7      	str	r7, [r0, #12]
 800605e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	b159      	cbz	r1, 800607e <_dtoa_r+0x56>
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	2301      	movs	r3, #1
 800606a:	4093      	lsls	r3, r2
 800606c:	604a      	str	r2, [r1, #4]
 800606e:	608b      	str	r3, [r1, #8]
 8006070:	4658      	mov	r0, fp
 8006072:	f000 fedf 	bl	8006e34 <_Bfree>
 8006076:	2200      	movs	r2, #0
 8006078:	f8db 301c 	ldr.w	r3, [fp, #28]
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	1e2b      	subs	r3, r5, #0
 8006080:	bfaf      	iteee	ge
 8006082:	2300      	movge	r3, #0
 8006084:	2201      	movlt	r2, #1
 8006086:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800608a:	9303      	strlt	r3, [sp, #12]
 800608c:	bfa8      	it	ge
 800608e:	6033      	strge	r3, [r6, #0]
 8006090:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006094:	4b98      	ldr	r3, [pc, #608]	@ (80062f8 <_dtoa_r+0x2d0>)
 8006096:	bfb8      	it	lt
 8006098:	6032      	strlt	r2, [r6, #0]
 800609a:	ea33 0308 	bics.w	r3, r3, r8
 800609e:	d112      	bne.n	80060c6 <_dtoa_r+0x9e>
 80060a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80060a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80060ac:	4323      	orrs	r3, r4
 80060ae:	f000 8550 	beq.w	8006b52 <_dtoa_r+0xb2a>
 80060b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060b4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80062fc <_dtoa_r+0x2d4>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8552 	beq.w	8006b62 <_dtoa_r+0xb3a>
 80060be:	f10a 0303 	add.w	r3, sl, #3
 80060c2:	f000 bd4c 	b.w	8006b5e <_dtoa_r+0xb36>
 80060c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80060ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060d2:	2200      	movs	r2, #0
 80060d4:	2300      	movs	r3, #0
 80060d6:	f7fa fc67 	bl	80009a8 <__aeabi_dcmpeq>
 80060da:	4607      	mov	r7, r0
 80060dc:	b158      	cbz	r0, 80060f6 <_dtoa_r+0xce>
 80060de:	2301      	movs	r3, #1
 80060e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060e6:	b113      	cbz	r3, 80060ee <_dtoa_r+0xc6>
 80060e8:	4b85      	ldr	r3, [pc, #532]	@ (8006300 <_dtoa_r+0x2d8>)
 80060ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006304 <_dtoa_r+0x2dc>
 80060f2:	f000 bd36 	b.w	8006b62 <_dtoa_r+0xb3a>
 80060f6:	ab14      	add	r3, sp, #80	@ 0x50
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	ab15      	add	r3, sp, #84	@ 0x54
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	4658      	mov	r0, fp
 8006100:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006104:	f001 f97e 	bl	8007404 <__d2b>
 8006108:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800610c:	4681      	mov	r9, r0
 800610e:	2e00      	cmp	r6, #0
 8006110:	d077      	beq.n	8006202 <_dtoa_r+0x1da>
 8006112:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006118:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800611c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006120:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006124:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006128:	9712      	str	r7, [sp, #72]	@ 0x48
 800612a:	4619      	mov	r1, r3
 800612c:	2200      	movs	r2, #0
 800612e:	4b76      	ldr	r3, [pc, #472]	@ (8006308 <_dtoa_r+0x2e0>)
 8006130:	f7fa f81a 	bl	8000168 <__aeabi_dsub>
 8006134:	a368      	add	r3, pc, #416	@ (adr r3, 80062d8 <_dtoa_r+0x2b0>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa f9cd 	bl	80004d8 <__aeabi_dmul>
 800613e:	a368      	add	r3, pc, #416	@ (adr r3, 80062e0 <_dtoa_r+0x2b8>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa f812 	bl	800016c <__adddf3>
 8006148:	4604      	mov	r4, r0
 800614a:	4630      	mov	r0, r6
 800614c:	460d      	mov	r5, r1
 800614e:	f7fa f959 	bl	8000404 <__aeabi_i2d>
 8006152:	a365      	add	r3, pc, #404	@ (adr r3, 80062e8 <_dtoa_r+0x2c0>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f7fa f9be 	bl	80004d8 <__aeabi_dmul>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4620      	mov	r0, r4
 8006162:	4629      	mov	r1, r5
 8006164:	f7fa f802 	bl	800016c <__adddf3>
 8006168:	4604      	mov	r4, r0
 800616a:	460d      	mov	r5, r1
 800616c:	f7fa fc64 	bl	8000a38 <__aeabi_d2iz>
 8006170:	2200      	movs	r2, #0
 8006172:	4607      	mov	r7, r0
 8006174:	2300      	movs	r3, #0
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	f7fa fc1f 	bl	80009bc <__aeabi_dcmplt>
 800617e:	b140      	cbz	r0, 8006192 <_dtoa_r+0x16a>
 8006180:	4638      	mov	r0, r7
 8006182:	f7fa f93f 	bl	8000404 <__aeabi_i2d>
 8006186:	4622      	mov	r2, r4
 8006188:	462b      	mov	r3, r5
 800618a:	f7fa fc0d 	bl	80009a8 <__aeabi_dcmpeq>
 800618e:	b900      	cbnz	r0, 8006192 <_dtoa_r+0x16a>
 8006190:	3f01      	subs	r7, #1
 8006192:	2f16      	cmp	r7, #22
 8006194:	d853      	bhi.n	800623e <_dtoa_r+0x216>
 8006196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800619a:	4b5c      	ldr	r3, [pc, #368]	@ (800630c <_dtoa_r+0x2e4>)
 800619c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa fc0a 	bl	80009bc <__aeabi_dcmplt>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d04a      	beq.n	8006242 <_dtoa_r+0x21a>
 80061ac:	2300      	movs	r3, #0
 80061ae:	3f01      	subs	r7, #1
 80061b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061b4:	1b9b      	subs	r3, r3, r6
 80061b6:	1e5a      	subs	r2, r3, #1
 80061b8:	bf46      	itte	mi
 80061ba:	f1c3 0801 	rsbmi	r8, r3, #1
 80061be:	2300      	movmi	r3, #0
 80061c0:	f04f 0800 	movpl.w	r8, #0
 80061c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80061c6:	bf48      	it	mi
 80061c8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80061ca:	2f00      	cmp	r7, #0
 80061cc:	db3b      	blt.n	8006246 <_dtoa_r+0x21e>
 80061ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d0:	970e      	str	r7, [sp, #56]	@ 0x38
 80061d2:	443b      	add	r3, r7
 80061d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061d6:	2300      	movs	r3, #0
 80061d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80061da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061dc:	2b09      	cmp	r3, #9
 80061de:	d866      	bhi.n	80062ae <_dtoa_r+0x286>
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	bfc4      	itt	gt
 80061e4:	3b04      	subgt	r3, #4
 80061e6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80061e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061ea:	bfc8      	it	gt
 80061ec:	2400      	movgt	r4, #0
 80061ee:	f1a3 0302 	sub.w	r3, r3, #2
 80061f2:	bfd8      	it	le
 80061f4:	2401      	movle	r4, #1
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d864      	bhi.n	80062c4 <_dtoa_r+0x29c>
 80061fa:	e8df f003 	tbb	[pc, r3]
 80061fe:	382b      	.short	0x382b
 8006200:	5636      	.short	0x5636
 8006202:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006206:	441e      	add	r6, r3
 8006208:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800620c:	2b20      	cmp	r3, #32
 800620e:	bfc1      	itttt	gt
 8006210:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006214:	fa08 f803 	lslgt.w	r8, r8, r3
 8006218:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800621c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006220:	bfd6      	itet	le
 8006222:	f1c3 0320 	rsble	r3, r3, #32
 8006226:	ea48 0003 	orrgt.w	r0, r8, r3
 800622a:	fa04 f003 	lslle.w	r0, r4, r3
 800622e:	f7fa f8d9 	bl	80003e4 <__aeabi_ui2d>
 8006232:	2201      	movs	r2, #1
 8006234:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006238:	3e01      	subs	r6, #1
 800623a:	9212      	str	r2, [sp, #72]	@ 0x48
 800623c:	e775      	b.n	800612a <_dtoa_r+0x102>
 800623e:	2301      	movs	r3, #1
 8006240:	e7b6      	b.n	80061b0 <_dtoa_r+0x188>
 8006242:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006244:	e7b5      	b.n	80061b2 <_dtoa_r+0x18a>
 8006246:	427b      	negs	r3, r7
 8006248:	930a      	str	r3, [sp, #40]	@ 0x28
 800624a:	2300      	movs	r3, #0
 800624c:	eba8 0807 	sub.w	r8, r8, r7
 8006250:	930e      	str	r3, [sp, #56]	@ 0x38
 8006252:	e7c2      	b.n	80061da <_dtoa_r+0x1b2>
 8006254:	2300      	movs	r3, #0
 8006256:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006258:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800625a:	2b00      	cmp	r3, #0
 800625c:	dc35      	bgt.n	80062ca <_dtoa_r+0x2a2>
 800625e:	2301      	movs	r3, #1
 8006260:	461a      	mov	r2, r3
 8006262:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006266:	9221      	str	r2, [sp, #132]	@ 0x84
 8006268:	e00b      	b.n	8006282 <_dtoa_r+0x25a>
 800626a:	2301      	movs	r3, #1
 800626c:	e7f3      	b.n	8006256 <_dtoa_r+0x22e>
 800626e:	2300      	movs	r3, #0
 8006270:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006272:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	9308      	str	r3, [sp, #32]
 8006278:	3301      	adds	r3, #1
 800627a:	2b01      	cmp	r3, #1
 800627c:	9307      	str	r3, [sp, #28]
 800627e:	bfb8      	it	lt
 8006280:	2301      	movlt	r3, #1
 8006282:	2100      	movs	r1, #0
 8006284:	2204      	movs	r2, #4
 8006286:	f8db 001c 	ldr.w	r0, [fp, #28]
 800628a:	f102 0514 	add.w	r5, r2, #20
 800628e:	429d      	cmp	r5, r3
 8006290:	d91f      	bls.n	80062d2 <_dtoa_r+0x2aa>
 8006292:	6041      	str	r1, [r0, #4]
 8006294:	4658      	mov	r0, fp
 8006296:	f000 fd8d 	bl	8006db4 <_Balloc>
 800629a:	4682      	mov	sl, r0
 800629c:	2800      	cmp	r0, #0
 800629e:	d139      	bne.n	8006314 <_dtoa_r+0x2ec>
 80062a0:	4602      	mov	r2, r0
 80062a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80062a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006310 <_dtoa_r+0x2e8>)
 80062a8:	e6d2      	b.n	8006050 <_dtoa_r+0x28>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e7e0      	b.n	8006270 <_dtoa_r+0x248>
 80062ae:	2401      	movs	r4, #1
 80062b0:	2300      	movs	r3, #0
 80062b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80062b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ba:	2200      	movs	r2, #0
 80062bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80062c0:	2312      	movs	r3, #18
 80062c2:	e7d0      	b.n	8006266 <_dtoa_r+0x23e>
 80062c4:	2301      	movs	r3, #1
 80062c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062c8:	e7f5      	b.n	80062b6 <_dtoa_r+0x28e>
 80062ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80062d0:	e7d7      	b.n	8006282 <_dtoa_r+0x25a>
 80062d2:	3101      	adds	r1, #1
 80062d4:	0052      	lsls	r2, r2, #1
 80062d6:	e7d8      	b.n	800628a <_dtoa_r+0x262>
 80062d8:	636f4361 	.word	0x636f4361
 80062dc:	3fd287a7 	.word	0x3fd287a7
 80062e0:	8b60c8b3 	.word	0x8b60c8b3
 80062e4:	3fc68a28 	.word	0x3fc68a28
 80062e8:	509f79fb 	.word	0x509f79fb
 80062ec:	3fd34413 	.word	0x3fd34413
 80062f0:	08007cd9 	.word	0x08007cd9
 80062f4:	08007cf0 	.word	0x08007cf0
 80062f8:	7ff00000 	.word	0x7ff00000
 80062fc:	08007cd5 	.word	0x08007cd5
 8006300:	08007ca9 	.word	0x08007ca9
 8006304:	08007ca8 	.word	0x08007ca8
 8006308:	3ff80000 	.word	0x3ff80000
 800630c:	08007de8 	.word	0x08007de8
 8006310:	08007d48 	.word	0x08007d48
 8006314:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006318:	6018      	str	r0, [r3, #0]
 800631a:	9b07      	ldr	r3, [sp, #28]
 800631c:	2b0e      	cmp	r3, #14
 800631e:	f200 80a4 	bhi.w	800646a <_dtoa_r+0x442>
 8006322:	2c00      	cmp	r4, #0
 8006324:	f000 80a1 	beq.w	800646a <_dtoa_r+0x442>
 8006328:	2f00      	cmp	r7, #0
 800632a:	dd33      	ble.n	8006394 <_dtoa_r+0x36c>
 800632c:	4b86      	ldr	r3, [pc, #536]	@ (8006548 <_dtoa_r+0x520>)
 800632e:	f007 020f 	and.w	r2, r7, #15
 8006332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006336:	05f8      	lsls	r0, r7, #23
 8006338:	e9d3 3400 	ldrd	r3, r4, [r3]
 800633c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006340:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006344:	d516      	bpl.n	8006374 <_dtoa_r+0x34c>
 8006346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800634a:	4b80      	ldr	r3, [pc, #512]	@ (800654c <_dtoa_r+0x524>)
 800634c:	2603      	movs	r6, #3
 800634e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006352:	f7fa f9eb 	bl	800072c <__aeabi_ddiv>
 8006356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800635a:	f004 040f 	and.w	r4, r4, #15
 800635e:	4d7b      	ldr	r5, [pc, #492]	@ (800654c <_dtoa_r+0x524>)
 8006360:	b954      	cbnz	r4, 8006378 <_dtoa_r+0x350>
 8006362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636a:	f7fa f9df 	bl	800072c <__aeabi_ddiv>
 800636e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006372:	e028      	b.n	80063c6 <_dtoa_r+0x39e>
 8006374:	2602      	movs	r6, #2
 8006376:	e7f2      	b.n	800635e <_dtoa_r+0x336>
 8006378:	07e1      	lsls	r1, r4, #31
 800637a:	d508      	bpl.n	800638e <_dtoa_r+0x366>
 800637c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006380:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006384:	f7fa f8a8 	bl	80004d8 <__aeabi_dmul>
 8006388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800638c:	3601      	adds	r6, #1
 800638e:	1064      	asrs	r4, r4, #1
 8006390:	3508      	adds	r5, #8
 8006392:	e7e5      	b.n	8006360 <_dtoa_r+0x338>
 8006394:	f000 80d2 	beq.w	800653c <_dtoa_r+0x514>
 8006398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800639c:	427c      	negs	r4, r7
 800639e:	4b6a      	ldr	r3, [pc, #424]	@ (8006548 <_dtoa_r+0x520>)
 80063a0:	f004 020f 	and.w	r2, r4, #15
 80063a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7fa f894 	bl	80004d8 <__aeabi_dmul>
 80063b0:	2602      	movs	r6, #2
 80063b2:	2300      	movs	r3, #0
 80063b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063b8:	4d64      	ldr	r5, [pc, #400]	@ (800654c <_dtoa_r+0x524>)
 80063ba:	1124      	asrs	r4, r4, #4
 80063bc:	2c00      	cmp	r4, #0
 80063be:	f040 80b2 	bne.w	8006526 <_dtoa_r+0x4fe>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1d3      	bne.n	800636e <_dtoa_r+0x346>
 80063c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80b7 	beq.w	8006540 <_dtoa_r+0x518>
 80063d2:	2200      	movs	r2, #0
 80063d4:	4620      	mov	r0, r4
 80063d6:	4629      	mov	r1, r5
 80063d8:	4b5d      	ldr	r3, [pc, #372]	@ (8006550 <_dtoa_r+0x528>)
 80063da:	f7fa faef 	bl	80009bc <__aeabi_dcmplt>
 80063de:	2800      	cmp	r0, #0
 80063e0:	f000 80ae 	beq.w	8006540 <_dtoa_r+0x518>
 80063e4:	9b07      	ldr	r3, [sp, #28]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80aa 	beq.w	8006540 <_dtoa_r+0x518>
 80063ec:	9b08      	ldr	r3, [sp, #32]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dd37      	ble.n	8006462 <_dtoa_r+0x43a>
 80063f2:	1e7b      	subs	r3, r7, #1
 80063f4:	4620      	mov	r0, r4
 80063f6:	9304      	str	r3, [sp, #16]
 80063f8:	2200      	movs	r2, #0
 80063fa:	4629      	mov	r1, r5
 80063fc:	4b55      	ldr	r3, [pc, #340]	@ (8006554 <_dtoa_r+0x52c>)
 80063fe:	f7fa f86b 	bl	80004d8 <__aeabi_dmul>
 8006402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006406:	9c08      	ldr	r4, [sp, #32]
 8006408:	3601      	adds	r6, #1
 800640a:	4630      	mov	r0, r6
 800640c:	f7f9 fffa 	bl	8000404 <__aeabi_i2d>
 8006410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006414:	f7fa f860 	bl	80004d8 <__aeabi_dmul>
 8006418:	2200      	movs	r2, #0
 800641a:	4b4f      	ldr	r3, [pc, #316]	@ (8006558 <_dtoa_r+0x530>)
 800641c:	f7f9 fea6 	bl	800016c <__adddf3>
 8006420:	4605      	mov	r5, r0
 8006422:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006426:	2c00      	cmp	r4, #0
 8006428:	f040 809a 	bne.w	8006560 <_dtoa_r+0x538>
 800642c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006430:	2200      	movs	r2, #0
 8006432:	4b4a      	ldr	r3, [pc, #296]	@ (800655c <_dtoa_r+0x534>)
 8006434:	f7f9 fe98 	bl	8000168 <__aeabi_dsub>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006440:	462a      	mov	r2, r5
 8006442:	4633      	mov	r3, r6
 8006444:	f7fa fad8 	bl	80009f8 <__aeabi_dcmpgt>
 8006448:	2800      	cmp	r0, #0
 800644a:	f040 828e 	bne.w	800696a <_dtoa_r+0x942>
 800644e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006452:	462a      	mov	r2, r5
 8006454:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006458:	f7fa fab0 	bl	80009bc <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 8127 	bne.w	80066b0 <_dtoa_r+0x688>
 8006462:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006466:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800646a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800646c:	2b00      	cmp	r3, #0
 800646e:	f2c0 8163 	blt.w	8006738 <_dtoa_r+0x710>
 8006472:	2f0e      	cmp	r7, #14
 8006474:	f300 8160 	bgt.w	8006738 <_dtoa_r+0x710>
 8006478:	4b33      	ldr	r3, [pc, #204]	@ (8006548 <_dtoa_r+0x520>)
 800647a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800647e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006482:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006486:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006488:	2b00      	cmp	r3, #0
 800648a:	da03      	bge.n	8006494 <_dtoa_r+0x46c>
 800648c:	9b07      	ldr	r3, [sp, #28]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f340 8100 	ble.w	8006694 <_dtoa_r+0x66c>
 8006494:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006498:	4656      	mov	r6, sl
 800649a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa f943 	bl	800072c <__aeabi_ddiv>
 80064a6:	f7fa fac7 	bl	8000a38 <__aeabi_d2iz>
 80064aa:	4680      	mov	r8, r0
 80064ac:	f7f9 ffaa 	bl	8000404 <__aeabi_i2d>
 80064b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064b4:	f7fa f810 	bl	80004d8 <__aeabi_dmul>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	f7f9 fe52 	bl	8000168 <__aeabi_dsub>
 80064c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80064c8:	9d07      	ldr	r5, [sp, #28]
 80064ca:	f806 4b01 	strb.w	r4, [r6], #1
 80064ce:	eba6 040a 	sub.w	r4, r6, sl
 80064d2:	42a5      	cmp	r5, r4
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	f040 8116 	bne.w	8006708 <_dtoa_r+0x6e0>
 80064dc:	f7f9 fe46 	bl	800016c <__adddf3>
 80064e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064e4:	4604      	mov	r4, r0
 80064e6:	460d      	mov	r5, r1
 80064e8:	f7fa fa86 	bl	80009f8 <__aeabi_dcmpgt>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f040 80f8 	bne.w	80066e2 <_dtoa_r+0x6ba>
 80064f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7fa fa55 	bl	80009a8 <__aeabi_dcmpeq>
 80064fe:	b118      	cbz	r0, 8006508 <_dtoa_r+0x4e0>
 8006500:	f018 0f01 	tst.w	r8, #1
 8006504:	f040 80ed 	bne.w	80066e2 <_dtoa_r+0x6ba>
 8006508:	4649      	mov	r1, r9
 800650a:	4658      	mov	r0, fp
 800650c:	f000 fc92 	bl	8006e34 <_Bfree>
 8006510:	2300      	movs	r3, #0
 8006512:	7033      	strb	r3, [r6, #0]
 8006514:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006516:	3701      	adds	r7, #1
 8006518:	601f      	str	r7, [r3, #0]
 800651a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8320 	beq.w	8006b62 <_dtoa_r+0xb3a>
 8006522:	601e      	str	r6, [r3, #0]
 8006524:	e31d      	b.n	8006b62 <_dtoa_r+0xb3a>
 8006526:	07e2      	lsls	r2, r4, #31
 8006528:	d505      	bpl.n	8006536 <_dtoa_r+0x50e>
 800652a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800652e:	f7f9 ffd3 	bl	80004d8 <__aeabi_dmul>
 8006532:	2301      	movs	r3, #1
 8006534:	3601      	adds	r6, #1
 8006536:	1064      	asrs	r4, r4, #1
 8006538:	3508      	adds	r5, #8
 800653a:	e73f      	b.n	80063bc <_dtoa_r+0x394>
 800653c:	2602      	movs	r6, #2
 800653e:	e742      	b.n	80063c6 <_dtoa_r+0x39e>
 8006540:	9c07      	ldr	r4, [sp, #28]
 8006542:	9704      	str	r7, [sp, #16]
 8006544:	e761      	b.n	800640a <_dtoa_r+0x3e2>
 8006546:	bf00      	nop
 8006548:	08007de8 	.word	0x08007de8
 800654c:	08007dc0 	.word	0x08007dc0
 8006550:	3ff00000 	.word	0x3ff00000
 8006554:	40240000 	.word	0x40240000
 8006558:	401c0000 	.word	0x401c0000
 800655c:	40140000 	.word	0x40140000
 8006560:	4b70      	ldr	r3, [pc, #448]	@ (8006724 <_dtoa_r+0x6fc>)
 8006562:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006564:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006568:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800656c:	4454      	add	r4, sl
 800656e:	2900      	cmp	r1, #0
 8006570:	d045      	beq.n	80065fe <_dtoa_r+0x5d6>
 8006572:	2000      	movs	r0, #0
 8006574:	496c      	ldr	r1, [pc, #432]	@ (8006728 <_dtoa_r+0x700>)
 8006576:	f7fa f8d9 	bl	800072c <__aeabi_ddiv>
 800657a:	4633      	mov	r3, r6
 800657c:	462a      	mov	r2, r5
 800657e:	f7f9 fdf3 	bl	8000168 <__aeabi_dsub>
 8006582:	4656      	mov	r6, sl
 8006584:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800658c:	f7fa fa54 	bl	8000a38 <__aeabi_d2iz>
 8006590:	4605      	mov	r5, r0
 8006592:	f7f9 ff37 	bl	8000404 <__aeabi_i2d>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800659e:	f7f9 fde3 	bl	8000168 <__aeabi_dsub>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	3530      	adds	r5, #48	@ 0x30
 80065a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065b0:	f806 5b01 	strb.w	r5, [r6], #1
 80065b4:	f7fa fa02 	bl	80009bc <__aeabi_dcmplt>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d163      	bne.n	8006684 <_dtoa_r+0x65c>
 80065bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c0:	2000      	movs	r0, #0
 80065c2:	495a      	ldr	r1, [pc, #360]	@ (800672c <_dtoa_r+0x704>)
 80065c4:	f7f9 fdd0 	bl	8000168 <__aeabi_dsub>
 80065c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065cc:	f7fa f9f6 	bl	80009bc <__aeabi_dcmplt>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f040 8087 	bne.w	80066e4 <_dtoa_r+0x6bc>
 80065d6:	42a6      	cmp	r6, r4
 80065d8:	f43f af43 	beq.w	8006462 <_dtoa_r+0x43a>
 80065dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065e0:	2200      	movs	r2, #0
 80065e2:	4b53      	ldr	r3, [pc, #332]	@ (8006730 <_dtoa_r+0x708>)
 80065e4:	f7f9 ff78 	bl	80004d8 <__aeabi_dmul>
 80065e8:	2200      	movs	r2, #0
 80065ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006730 <_dtoa_r+0x708>)
 80065f4:	f7f9 ff70 	bl	80004d8 <__aeabi_dmul>
 80065f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065fc:	e7c4      	b.n	8006588 <_dtoa_r+0x560>
 80065fe:	4631      	mov	r1, r6
 8006600:	4628      	mov	r0, r5
 8006602:	f7f9 ff69 	bl	80004d8 <__aeabi_dmul>
 8006606:	4656      	mov	r6, sl
 8006608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800660c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800660e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006612:	f7fa fa11 	bl	8000a38 <__aeabi_d2iz>
 8006616:	4605      	mov	r5, r0
 8006618:	f7f9 fef4 	bl	8000404 <__aeabi_i2d>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006624:	f7f9 fda0 	bl	8000168 <__aeabi_dsub>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	3530      	adds	r5, #48	@ 0x30
 800662e:	f806 5b01 	strb.w	r5, [r6], #1
 8006632:	42a6      	cmp	r6, r4
 8006634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	d124      	bne.n	8006688 <_dtoa_r+0x660>
 800663e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006642:	4b39      	ldr	r3, [pc, #228]	@ (8006728 <_dtoa_r+0x700>)
 8006644:	f7f9 fd92 	bl	800016c <__adddf3>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006650:	f7fa f9d2 	bl	80009f8 <__aeabi_dcmpgt>
 8006654:	2800      	cmp	r0, #0
 8006656:	d145      	bne.n	80066e4 <_dtoa_r+0x6bc>
 8006658:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800665c:	2000      	movs	r0, #0
 800665e:	4932      	ldr	r1, [pc, #200]	@ (8006728 <_dtoa_r+0x700>)
 8006660:	f7f9 fd82 	bl	8000168 <__aeabi_dsub>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800666c:	f7fa f9a6 	bl	80009bc <__aeabi_dcmplt>
 8006670:	2800      	cmp	r0, #0
 8006672:	f43f aef6 	beq.w	8006462 <_dtoa_r+0x43a>
 8006676:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006678:	1e73      	subs	r3, r6, #1
 800667a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800667c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006680:	2b30      	cmp	r3, #48	@ 0x30
 8006682:	d0f8      	beq.n	8006676 <_dtoa_r+0x64e>
 8006684:	9f04      	ldr	r7, [sp, #16]
 8006686:	e73f      	b.n	8006508 <_dtoa_r+0x4e0>
 8006688:	4b29      	ldr	r3, [pc, #164]	@ (8006730 <_dtoa_r+0x708>)
 800668a:	f7f9 ff25 	bl	80004d8 <__aeabi_dmul>
 800668e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006692:	e7bc      	b.n	800660e <_dtoa_r+0x5e6>
 8006694:	d10c      	bne.n	80066b0 <_dtoa_r+0x688>
 8006696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800669a:	2200      	movs	r2, #0
 800669c:	4b25      	ldr	r3, [pc, #148]	@ (8006734 <_dtoa_r+0x70c>)
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066a6:	f7fa f99d 	bl	80009e4 <__aeabi_dcmpge>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f000 815b 	beq.w	8006966 <_dtoa_r+0x93e>
 80066b0:	2400      	movs	r4, #0
 80066b2:	4625      	mov	r5, r4
 80066b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066b6:	4656      	mov	r6, sl
 80066b8:	43db      	mvns	r3, r3
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	2700      	movs	r7, #0
 80066be:	4621      	mov	r1, r4
 80066c0:	4658      	mov	r0, fp
 80066c2:	f000 fbb7 	bl	8006e34 <_Bfree>
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	d0dc      	beq.n	8006684 <_dtoa_r+0x65c>
 80066ca:	b12f      	cbz	r7, 80066d8 <_dtoa_r+0x6b0>
 80066cc:	42af      	cmp	r7, r5
 80066ce:	d003      	beq.n	80066d8 <_dtoa_r+0x6b0>
 80066d0:	4639      	mov	r1, r7
 80066d2:	4658      	mov	r0, fp
 80066d4:	f000 fbae 	bl	8006e34 <_Bfree>
 80066d8:	4629      	mov	r1, r5
 80066da:	4658      	mov	r0, fp
 80066dc:	f000 fbaa 	bl	8006e34 <_Bfree>
 80066e0:	e7d0      	b.n	8006684 <_dtoa_r+0x65c>
 80066e2:	9704      	str	r7, [sp, #16]
 80066e4:	4633      	mov	r3, r6
 80066e6:	461e      	mov	r6, r3
 80066e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ec:	2a39      	cmp	r2, #57	@ 0x39
 80066ee:	d107      	bne.n	8006700 <_dtoa_r+0x6d8>
 80066f0:	459a      	cmp	sl, r3
 80066f2:	d1f8      	bne.n	80066e6 <_dtoa_r+0x6be>
 80066f4:	9a04      	ldr	r2, [sp, #16]
 80066f6:	3201      	adds	r2, #1
 80066f8:	9204      	str	r2, [sp, #16]
 80066fa:	2230      	movs	r2, #48	@ 0x30
 80066fc:	f88a 2000 	strb.w	r2, [sl]
 8006700:	781a      	ldrb	r2, [r3, #0]
 8006702:	3201      	adds	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	e7bd      	b.n	8006684 <_dtoa_r+0x65c>
 8006708:	2200      	movs	r2, #0
 800670a:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <_dtoa_r+0x708>)
 800670c:	f7f9 fee4 	bl	80004d8 <__aeabi_dmul>
 8006710:	2200      	movs	r2, #0
 8006712:	2300      	movs	r3, #0
 8006714:	4604      	mov	r4, r0
 8006716:	460d      	mov	r5, r1
 8006718:	f7fa f946 	bl	80009a8 <__aeabi_dcmpeq>
 800671c:	2800      	cmp	r0, #0
 800671e:	f43f aebc 	beq.w	800649a <_dtoa_r+0x472>
 8006722:	e6f1      	b.n	8006508 <_dtoa_r+0x4e0>
 8006724:	08007de8 	.word	0x08007de8
 8006728:	3fe00000 	.word	0x3fe00000
 800672c:	3ff00000 	.word	0x3ff00000
 8006730:	40240000 	.word	0x40240000
 8006734:	40140000 	.word	0x40140000
 8006738:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800673a:	2a00      	cmp	r2, #0
 800673c:	f000 80db 	beq.w	80068f6 <_dtoa_r+0x8ce>
 8006740:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006742:	2a01      	cmp	r2, #1
 8006744:	f300 80bf 	bgt.w	80068c6 <_dtoa_r+0x89e>
 8006748:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800674a:	2a00      	cmp	r2, #0
 800674c:	f000 80b7 	beq.w	80068be <_dtoa_r+0x896>
 8006750:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006754:	4646      	mov	r6, r8
 8006756:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800675a:	2101      	movs	r1, #1
 800675c:	441a      	add	r2, r3
 800675e:	4658      	mov	r0, fp
 8006760:	4498      	add	r8, r3
 8006762:	9209      	str	r2, [sp, #36]	@ 0x24
 8006764:	f000 fc1a 	bl	8006f9c <__i2b>
 8006768:	4605      	mov	r5, r0
 800676a:	b15e      	cbz	r6, 8006784 <_dtoa_r+0x75c>
 800676c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	dd08      	ble.n	8006784 <_dtoa_r+0x75c>
 8006772:	42b3      	cmp	r3, r6
 8006774:	bfa8      	it	ge
 8006776:	4633      	movge	r3, r6
 8006778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800677a:	eba8 0803 	sub.w	r8, r8, r3
 800677e:	1af6      	subs	r6, r6, r3
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	9309      	str	r3, [sp, #36]	@ 0x24
 8006784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006786:	b1f3      	cbz	r3, 80067c6 <_dtoa_r+0x79e>
 8006788:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 80b7 	beq.w	80068fe <_dtoa_r+0x8d6>
 8006790:	b18c      	cbz	r4, 80067b6 <_dtoa_r+0x78e>
 8006792:	4629      	mov	r1, r5
 8006794:	4622      	mov	r2, r4
 8006796:	4658      	mov	r0, fp
 8006798:	f000 fcbe 	bl	8007118 <__pow5mult>
 800679c:	464a      	mov	r2, r9
 800679e:	4601      	mov	r1, r0
 80067a0:	4605      	mov	r5, r0
 80067a2:	4658      	mov	r0, fp
 80067a4:	f000 fc10 	bl	8006fc8 <__multiply>
 80067a8:	4649      	mov	r1, r9
 80067aa:	9004      	str	r0, [sp, #16]
 80067ac:	4658      	mov	r0, fp
 80067ae:	f000 fb41 	bl	8006e34 <_Bfree>
 80067b2:	9b04      	ldr	r3, [sp, #16]
 80067b4:	4699      	mov	r9, r3
 80067b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067b8:	1b1a      	subs	r2, r3, r4
 80067ba:	d004      	beq.n	80067c6 <_dtoa_r+0x79e>
 80067bc:	4649      	mov	r1, r9
 80067be:	4658      	mov	r0, fp
 80067c0:	f000 fcaa 	bl	8007118 <__pow5mult>
 80067c4:	4681      	mov	r9, r0
 80067c6:	2101      	movs	r1, #1
 80067c8:	4658      	mov	r0, fp
 80067ca:	f000 fbe7 	bl	8006f9c <__i2b>
 80067ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067d0:	4604      	mov	r4, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 81c9 	beq.w	8006b6a <_dtoa_r+0xb42>
 80067d8:	461a      	mov	r2, r3
 80067da:	4601      	mov	r1, r0
 80067dc:	4658      	mov	r0, fp
 80067de:	f000 fc9b 	bl	8007118 <__pow5mult>
 80067e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067e4:	4604      	mov	r4, r0
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	f300 808f 	bgt.w	800690a <_dtoa_r+0x8e2>
 80067ec:	9b02      	ldr	r3, [sp, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 8087 	bne.w	8006902 <_dtoa_r+0x8da>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 8083 	bne.w	8006906 <_dtoa_r+0x8de>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006806:	0d1b      	lsrs	r3, r3, #20
 8006808:	051b      	lsls	r3, r3, #20
 800680a:	b12b      	cbz	r3, 8006818 <_dtoa_r+0x7f0>
 800680c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680e:	f108 0801 	add.w	r8, r8, #1
 8006812:	3301      	adds	r3, #1
 8006814:	9309      	str	r3, [sp, #36]	@ 0x24
 8006816:	2301      	movs	r3, #1
 8006818:	930a      	str	r3, [sp, #40]	@ 0x28
 800681a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 81aa 	beq.w	8006b76 <_dtoa_r+0xb4e>
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006828:	6918      	ldr	r0, [r3, #16]
 800682a:	f000 fb6b 	bl	8006f04 <__hi0bits>
 800682e:	f1c0 0020 	rsb	r0, r0, #32
 8006832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006834:	4418      	add	r0, r3
 8006836:	f010 001f 	ands.w	r0, r0, #31
 800683a:	d071      	beq.n	8006920 <_dtoa_r+0x8f8>
 800683c:	f1c0 0320 	rsb	r3, r0, #32
 8006840:	2b04      	cmp	r3, #4
 8006842:	dd65      	ble.n	8006910 <_dtoa_r+0x8e8>
 8006844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006846:	f1c0 001c 	rsb	r0, r0, #28
 800684a:	4403      	add	r3, r0
 800684c:	4480      	add	r8, r0
 800684e:	4406      	add	r6, r0
 8006850:	9309      	str	r3, [sp, #36]	@ 0x24
 8006852:	f1b8 0f00 	cmp.w	r8, #0
 8006856:	dd05      	ble.n	8006864 <_dtoa_r+0x83c>
 8006858:	4649      	mov	r1, r9
 800685a:	4642      	mov	r2, r8
 800685c:	4658      	mov	r0, fp
 800685e:	f000 fcb5 	bl	80071cc <__lshift>
 8006862:	4681      	mov	r9, r0
 8006864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	dd05      	ble.n	8006876 <_dtoa_r+0x84e>
 800686a:	4621      	mov	r1, r4
 800686c:	461a      	mov	r2, r3
 800686e:	4658      	mov	r0, fp
 8006870:	f000 fcac 	bl	80071cc <__lshift>
 8006874:	4604      	mov	r4, r0
 8006876:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d053      	beq.n	8006924 <_dtoa_r+0x8fc>
 800687c:	4621      	mov	r1, r4
 800687e:	4648      	mov	r0, r9
 8006880:	f000 fd10 	bl	80072a4 <__mcmp>
 8006884:	2800      	cmp	r0, #0
 8006886:	da4d      	bge.n	8006924 <_dtoa_r+0x8fc>
 8006888:	1e7b      	subs	r3, r7, #1
 800688a:	4649      	mov	r1, r9
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	220a      	movs	r2, #10
 8006890:	2300      	movs	r3, #0
 8006892:	4658      	mov	r0, fp
 8006894:	f000 faf0 	bl	8006e78 <__multadd>
 8006898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800689a:	4681      	mov	r9, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 816c 	beq.w	8006b7a <_dtoa_r+0xb52>
 80068a2:	2300      	movs	r3, #0
 80068a4:	4629      	mov	r1, r5
 80068a6:	220a      	movs	r2, #10
 80068a8:	4658      	mov	r0, fp
 80068aa:	f000 fae5 	bl	8006e78 <__multadd>
 80068ae:	9b08      	ldr	r3, [sp, #32]
 80068b0:	4605      	mov	r5, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dc61      	bgt.n	800697a <_dtoa_r+0x952>
 80068b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	dc3b      	bgt.n	8006934 <_dtoa_r+0x90c>
 80068bc:	e05d      	b.n	800697a <_dtoa_r+0x952>
 80068be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068c0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80068c4:	e746      	b.n	8006754 <_dtoa_r+0x72c>
 80068c6:	9b07      	ldr	r3, [sp, #28]
 80068c8:	1e5c      	subs	r4, r3, #1
 80068ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	bfbf      	itttt	lt
 80068d0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80068d2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80068d4:	1ae3      	sublt	r3, r4, r3
 80068d6:	18d2      	addlt	r2, r2, r3
 80068d8:	bfa8      	it	ge
 80068da:	1b1c      	subge	r4, r3, r4
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	bfbe      	ittt	lt
 80068e0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80068e2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80068e4:	2400      	movlt	r4, #0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bfb5      	itete	lt
 80068ea:	eba8 0603 	sublt.w	r6, r8, r3
 80068ee:	4646      	movge	r6, r8
 80068f0:	2300      	movlt	r3, #0
 80068f2:	9b07      	ldrge	r3, [sp, #28]
 80068f4:	e730      	b.n	8006758 <_dtoa_r+0x730>
 80068f6:	4646      	mov	r6, r8
 80068f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068fa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80068fc:	e735      	b.n	800676a <_dtoa_r+0x742>
 80068fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006900:	e75c      	b.n	80067bc <_dtoa_r+0x794>
 8006902:	2300      	movs	r3, #0
 8006904:	e788      	b.n	8006818 <_dtoa_r+0x7f0>
 8006906:	9b02      	ldr	r3, [sp, #8]
 8006908:	e786      	b.n	8006818 <_dtoa_r+0x7f0>
 800690a:	2300      	movs	r3, #0
 800690c:	930a      	str	r3, [sp, #40]	@ 0x28
 800690e:	e788      	b.n	8006822 <_dtoa_r+0x7fa>
 8006910:	d09f      	beq.n	8006852 <_dtoa_r+0x82a>
 8006912:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006914:	331c      	adds	r3, #28
 8006916:	441a      	add	r2, r3
 8006918:	4498      	add	r8, r3
 800691a:	441e      	add	r6, r3
 800691c:	9209      	str	r2, [sp, #36]	@ 0x24
 800691e:	e798      	b.n	8006852 <_dtoa_r+0x82a>
 8006920:	4603      	mov	r3, r0
 8006922:	e7f6      	b.n	8006912 <_dtoa_r+0x8ea>
 8006924:	9b07      	ldr	r3, [sp, #28]
 8006926:	9704      	str	r7, [sp, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	dc20      	bgt.n	800696e <_dtoa_r+0x946>
 800692c:	9308      	str	r3, [sp, #32]
 800692e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006930:	2b02      	cmp	r3, #2
 8006932:	dd1e      	ble.n	8006972 <_dtoa_r+0x94a>
 8006934:	9b08      	ldr	r3, [sp, #32]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f47f aebc 	bne.w	80066b4 <_dtoa_r+0x68c>
 800693c:	4621      	mov	r1, r4
 800693e:	2205      	movs	r2, #5
 8006940:	4658      	mov	r0, fp
 8006942:	f000 fa99 	bl	8006e78 <__multadd>
 8006946:	4601      	mov	r1, r0
 8006948:	4604      	mov	r4, r0
 800694a:	4648      	mov	r0, r9
 800694c:	f000 fcaa 	bl	80072a4 <__mcmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	f77f aeaf 	ble.w	80066b4 <_dtoa_r+0x68c>
 8006956:	2331      	movs	r3, #49	@ 0x31
 8006958:	4656      	mov	r6, sl
 800695a:	f806 3b01 	strb.w	r3, [r6], #1
 800695e:	9b04      	ldr	r3, [sp, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	e6aa      	b.n	80066bc <_dtoa_r+0x694>
 8006966:	9c07      	ldr	r4, [sp, #28]
 8006968:	9704      	str	r7, [sp, #16]
 800696a:	4625      	mov	r5, r4
 800696c:	e7f3      	b.n	8006956 <_dtoa_r+0x92e>
 800696e:	9b07      	ldr	r3, [sp, #28]
 8006970:	9308      	str	r3, [sp, #32]
 8006972:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8104 	beq.w	8006b82 <_dtoa_r+0xb5a>
 800697a:	2e00      	cmp	r6, #0
 800697c:	dd05      	ble.n	800698a <_dtoa_r+0x962>
 800697e:	4629      	mov	r1, r5
 8006980:	4632      	mov	r2, r6
 8006982:	4658      	mov	r0, fp
 8006984:	f000 fc22 	bl	80071cc <__lshift>
 8006988:	4605      	mov	r5, r0
 800698a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800698c:	2b00      	cmp	r3, #0
 800698e:	d05a      	beq.n	8006a46 <_dtoa_r+0xa1e>
 8006990:	4658      	mov	r0, fp
 8006992:	6869      	ldr	r1, [r5, #4]
 8006994:	f000 fa0e 	bl	8006db4 <_Balloc>
 8006998:	4606      	mov	r6, r0
 800699a:	b928      	cbnz	r0, 80069a8 <_dtoa_r+0x980>
 800699c:	4602      	mov	r2, r0
 800699e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80069a2:	4b83      	ldr	r3, [pc, #524]	@ (8006bb0 <_dtoa_r+0xb88>)
 80069a4:	f7ff bb54 	b.w	8006050 <_dtoa_r+0x28>
 80069a8:	692a      	ldr	r2, [r5, #16]
 80069aa:	f105 010c 	add.w	r1, r5, #12
 80069ae:	3202      	adds	r2, #2
 80069b0:	0092      	lsls	r2, r2, #2
 80069b2:	300c      	adds	r0, #12
 80069b4:	f001 f80a 	bl	80079cc <memcpy>
 80069b8:	2201      	movs	r2, #1
 80069ba:	4631      	mov	r1, r6
 80069bc:	4658      	mov	r0, fp
 80069be:	f000 fc05 	bl	80071cc <__lshift>
 80069c2:	462f      	mov	r7, r5
 80069c4:	4605      	mov	r5, r0
 80069c6:	f10a 0301 	add.w	r3, sl, #1
 80069ca:	9307      	str	r3, [sp, #28]
 80069cc:	9b08      	ldr	r3, [sp, #32]
 80069ce:	4453      	add	r3, sl
 80069d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069d2:	9b02      	ldr	r3, [sp, #8]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069da:	9b07      	ldr	r3, [sp, #28]
 80069dc:	4621      	mov	r1, r4
 80069de:	3b01      	subs	r3, #1
 80069e0:	4648      	mov	r0, r9
 80069e2:	9302      	str	r3, [sp, #8]
 80069e4:	f7ff fa95 	bl	8005f12 <quorem>
 80069e8:	4639      	mov	r1, r7
 80069ea:	9008      	str	r0, [sp, #32]
 80069ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069f0:	4648      	mov	r0, r9
 80069f2:	f000 fc57 	bl	80072a4 <__mcmp>
 80069f6:	462a      	mov	r2, r5
 80069f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80069fa:	4621      	mov	r1, r4
 80069fc:	4658      	mov	r0, fp
 80069fe:	f000 fc6d 	bl	80072dc <__mdiff>
 8006a02:	68c2      	ldr	r2, [r0, #12]
 8006a04:	4606      	mov	r6, r0
 8006a06:	bb02      	cbnz	r2, 8006a4a <_dtoa_r+0xa22>
 8006a08:	4601      	mov	r1, r0
 8006a0a:	4648      	mov	r0, r9
 8006a0c:	f000 fc4a 	bl	80072a4 <__mcmp>
 8006a10:	4602      	mov	r2, r0
 8006a12:	4631      	mov	r1, r6
 8006a14:	4658      	mov	r0, fp
 8006a16:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a18:	f000 fa0c 	bl	8006e34 <_Bfree>
 8006a1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006a20:	9e07      	ldr	r6, [sp, #28]
 8006a22:	ea43 0102 	orr.w	r1, r3, r2
 8006a26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a28:	4319      	orrs	r1, r3
 8006a2a:	d110      	bne.n	8006a4e <_dtoa_r+0xa26>
 8006a2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a30:	d029      	beq.n	8006a86 <_dtoa_r+0xa5e>
 8006a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd02      	ble.n	8006a3e <_dtoa_r+0xa16>
 8006a38:	9b08      	ldr	r3, [sp, #32]
 8006a3a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006a3e:	9b02      	ldr	r3, [sp, #8]
 8006a40:	f883 8000 	strb.w	r8, [r3]
 8006a44:	e63b      	b.n	80066be <_dtoa_r+0x696>
 8006a46:	4628      	mov	r0, r5
 8006a48:	e7bb      	b.n	80069c2 <_dtoa_r+0x99a>
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	e7e1      	b.n	8006a12 <_dtoa_r+0x9ea>
 8006a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	db04      	blt.n	8006a5e <_dtoa_r+0xa36>
 8006a54:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006a56:	430b      	orrs	r3, r1
 8006a58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	d120      	bne.n	8006aa0 <_dtoa_r+0xa78>
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	dded      	ble.n	8006a3e <_dtoa_r+0xa16>
 8006a62:	4649      	mov	r1, r9
 8006a64:	2201      	movs	r2, #1
 8006a66:	4658      	mov	r0, fp
 8006a68:	f000 fbb0 	bl	80071cc <__lshift>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4681      	mov	r9, r0
 8006a70:	f000 fc18 	bl	80072a4 <__mcmp>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	dc03      	bgt.n	8006a80 <_dtoa_r+0xa58>
 8006a78:	d1e1      	bne.n	8006a3e <_dtoa_r+0xa16>
 8006a7a:	f018 0f01 	tst.w	r8, #1
 8006a7e:	d0de      	beq.n	8006a3e <_dtoa_r+0xa16>
 8006a80:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a84:	d1d8      	bne.n	8006a38 <_dtoa_r+0xa10>
 8006a86:	2339      	movs	r3, #57	@ 0x39
 8006a88:	9a02      	ldr	r2, [sp, #8]
 8006a8a:	7013      	strb	r3, [r2, #0]
 8006a8c:	4633      	mov	r3, r6
 8006a8e:	461e      	mov	r6, r3
 8006a90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	2a39      	cmp	r2, #57	@ 0x39
 8006a98:	d052      	beq.n	8006b40 <_dtoa_r+0xb18>
 8006a9a:	3201      	adds	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	e60e      	b.n	80066be <_dtoa_r+0x696>
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	dd07      	ble.n	8006ab4 <_dtoa_r+0xa8c>
 8006aa4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006aa8:	d0ed      	beq.n	8006a86 <_dtoa_r+0xa5e>
 8006aaa:	9a02      	ldr	r2, [sp, #8]
 8006aac:	f108 0301 	add.w	r3, r8, #1
 8006ab0:	7013      	strb	r3, [r2, #0]
 8006ab2:	e604      	b.n	80066be <_dtoa_r+0x696>
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	9a07      	ldr	r2, [sp, #28]
 8006ab8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006abc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d028      	beq.n	8006b14 <_dtoa_r+0xaec>
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	220a      	movs	r2, #10
 8006ac8:	4658      	mov	r0, fp
 8006aca:	f000 f9d5 	bl	8006e78 <__multadd>
 8006ace:	42af      	cmp	r7, r5
 8006ad0:	4681      	mov	r9, r0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	f04f 020a 	mov.w	r2, #10
 8006ada:	4639      	mov	r1, r7
 8006adc:	4658      	mov	r0, fp
 8006ade:	d107      	bne.n	8006af0 <_dtoa_r+0xac8>
 8006ae0:	f000 f9ca 	bl	8006e78 <__multadd>
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	9b07      	ldr	r3, [sp, #28]
 8006aea:	3301      	adds	r3, #1
 8006aec:	9307      	str	r3, [sp, #28]
 8006aee:	e774      	b.n	80069da <_dtoa_r+0x9b2>
 8006af0:	f000 f9c2 	bl	8006e78 <__multadd>
 8006af4:	4629      	mov	r1, r5
 8006af6:	4607      	mov	r7, r0
 8006af8:	2300      	movs	r3, #0
 8006afa:	220a      	movs	r2, #10
 8006afc:	4658      	mov	r0, fp
 8006afe:	f000 f9bb 	bl	8006e78 <__multadd>
 8006b02:	4605      	mov	r5, r0
 8006b04:	e7f0      	b.n	8006ae8 <_dtoa_r+0xac0>
 8006b06:	9b08      	ldr	r3, [sp, #32]
 8006b08:	2700      	movs	r7, #0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfcc      	ite	gt
 8006b0e:	461e      	movgt	r6, r3
 8006b10:	2601      	movle	r6, #1
 8006b12:	4456      	add	r6, sl
 8006b14:	4649      	mov	r1, r9
 8006b16:	2201      	movs	r2, #1
 8006b18:	4658      	mov	r0, fp
 8006b1a:	f000 fb57 	bl	80071cc <__lshift>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4681      	mov	r9, r0
 8006b22:	f000 fbbf 	bl	80072a4 <__mcmp>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	dcb0      	bgt.n	8006a8c <_dtoa_r+0xa64>
 8006b2a:	d102      	bne.n	8006b32 <_dtoa_r+0xb0a>
 8006b2c:	f018 0f01 	tst.w	r8, #1
 8006b30:	d1ac      	bne.n	8006a8c <_dtoa_r+0xa64>
 8006b32:	4633      	mov	r3, r6
 8006b34:	461e      	mov	r6, r3
 8006b36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b3a:	2a30      	cmp	r2, #48	@ 0x30
 8006b3c:	d0fa      	beq.n	8006b34 <_dtoa_r+0xb0c>
 8006b3e:	e5be      	b.n	80066be <_dtoa_r+0x696>
 8006b40:	459a      	cmp	sl, r3
 8006b42:	d1a4      	bne.n	8006a8e <_dtoa_r+0xa66>
 8006b44:	9b04      	ldr	r3, [sp, #16]
 8006b46:	3301      	adds	r3, #1
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	2331      	movs	r3, #49	@ 0x31
 8006b4c:	f88a 3000 	strb.w	r3, [sl]
 8006b50:	e5b5      	b.n	80066be <_dtoa_r+0x696>
 8006b52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b54:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006bb4 <_dtoa_r+0xb8c>
 8006b58:	b11b      	cbz	r3, 8006b62 <_dtoa_r+0xb3a>
 8006b5a:	f10a 0308 	add.w	r3, sl, #8
 8006b5e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	4650      	mov	r0, sl
 8006b64:	b017      	add	sp, #92	@ 0x5c
 8006b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f77f ae3d 	ble.w	80067ec <_dtoa_r+0x7c4>
 8006b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b74:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b76:	2001      	movs	r0, #1
 8006b78:	e65b      	b.n	8006832 <_dtoa_r+0x80a>
 8006b7a:	9b08      	ldr	r3, [sp, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f77f aed6 	ble.w	800692e <_dtoa_r+0x906>
 8006b82:	4656      	mov	r6, sl
 8006b84:	4621      	mov	r1, r4
 8006b86:	4648      	mov	r0, r9
 8006b88:	f7ff f9c3 	bl	8005f12 <quorem>
 8006b8c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	f806 8b01 	strb.w	r8, [r6], #1
 8006b96:	eba6 020a 	sub.w	r2, r6, sl
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	ddb3      	ble.n	8006b06 <_dtoa_r+0xade>
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	220a      	movs	r2, #10
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f000 f967 	bl	8006e78 <__multadd>
 8006baa:	4681      	mov	r9, r0
 8006bac:	e7ea      	b.n	8006b84 <_dtoa_r+0xb5c>
 8006bae:	bf00      	nop
 8006bb0:	08007d48 	.word	0x08007d48
 8006bb4:	08007ccc 	.word	0x08007ccc

08006bb8 <_free_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4605      	mov	r5, r0
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d040      	beq.n	8006c42 <_free_r+0x8a>
 8006bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc4:	1f0c      	subs	r4, r1, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfb8      	it	lt
 8006bca:	18e4      	addlt	r4, r4, r3
 8006bcc:	f000 f8e6 	bl	8006d9c <__malloc_lock>
 8006bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c44 <_free_r+0x8c>)
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	b933      	cbnz	r3, 8006be4 <_free_r+0x2c>
 8006bd6:	6063      	str	r3, [r4, #4]
 8006bd8:	6014      	str	r4, [r2, #0]
 8006bda:	4628      	mov	r0, r5
 8006bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be0:	f000 b8e2 	b.w	8006da8 <__malloc_unlock>
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	d908      	bls.n	8006bfa <_free_r+0x42>
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	1821      	adds	r1, r4, r0
 8006bec:	428b      	cmp	r3, r1
 8006bee:	bf01      	itttt	eq
 8006bf0:	6819      	ldreq	r1, [r3, #0]
 8006bf2:	685b      	ldreq	r3, [r3, #4]
 8006bf4:	1809      	addeq	r1, r1, r0
 8006bf6:	6021      	streq	r1, [r4, #0]
 8006bf8:	e7ed      	b.n	8006bd6 <_free_r+0x1e>
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	b10b      	cbz	r3, 8006c04 <_free_r+0x4c>
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d9fa      	bls.n	8006bfa <_free_r+0x42>
 8006c04:	6811      	ldr	r1, [r2, #0]
 8006c06:	1850      	adds	r0, r2, r1
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d10b      	bne.n	8006c24 <_free_r+0x6c>
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	4401      	add	r1, r0
 8006c10:	1850      	adds	r0, r2, r1
 8006c12:	4283      	cmp	r3, r0
 8006c14:	6011      	str	r1, [r2, #0]
 8006c16:	d1e0      	bne.n	8006bda <_free_r+0x22>
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4408      	add	r0, r1
 8006c1e:	6010      	str	r0, [r2, #0]
 8006c20:	6053      	str	r3, [r2, #4]
 8006c22:	e7da      	b.n	8006bda <_free_r+0x22>
 8006c24:	d902      	bls.n	8006c2c <_free_r+0x74>
 8006c26:	230c      	movs	r3, #12
 8006c28:	602b      	str	r3, [r5, #0]
 8006c2a:	e7d6      	b.n	8006bda <_free_r+0x22>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	1821      	adds	r1, r4, r0
 8006c30:	428b      	cmp	r3, r1
 8006c32:	bf01      	itttt	eq
 8006c34:	6819      	ldreq	r1, [r3, #0]
 8006c36:	685b      	ldreq	r3, [r3, #4]
 8006c38:	1809      	addeq	r1, r1, r0
 8006c3a:	6021      	streq	r1, [r4, #0]
 8006c3c:	6063      	str	r3, [r4, #4]
 8006c3e:	6054      	str	r4, [r2, #4]
 8006c40:	e7cb      	b.n	8006bda <_free_r+0x22>
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	200006e0 	.word	0x200006e0

08006c48 <malloc>:
 8006c48:	4b02      	ldr	r3, [pc, #8]	@ (8006c54 <malloc+0xc>)
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f000 b825 	b.w	8006c9c <_malloc_r>
 8006c52:	bf00      	nop
 8006c54:	2000001c 	.word	0x2000001c

08006c58 <sbrk_aligned>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8006c98 <sbrk_aligned+0x40>)
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	6831      	ldr	r1, [r6, #0]
 8006c60:	4605      	mov	r5, r0
 8006c62:	b911      	cbnz	r1, 8006c6a <sbrk_aligned+0x12>
 8006c64:	f000 fea2 	bl	80079ac <_sbrk_r>
 8006c68:	6030      	str	r0, [r6, #0]
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 fe9d 	bl	80079ac <_sbrk_r>
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d103      	bne.n	8006c7e <sbrk_aligned+0x26>
 8006c76:	f04f 34ff 	mov.w	r4, #4294967295
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	bd70      	pop	{r4, r5, r6, pc}
 8006c7e:	1cc4      	adds	r4, r0, #3
 8006c80:	f024 0403 	bic.w	r4, r4, #3
 8006c84:	42a0      	cmp	r0, r4
 8006c86:	d0f8      	beq.n	8006c7a <sbrk_aligned+0x22>
 8006c88:	1a21      	subs	r1, r4, r0
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fe8e 	bl	80079ac <_sbrk_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d1f2      	bne.n	8006c7a <sbrk_aligned+0x22>
 8006c94:	e7ef      	b.n	8006c76 <sbrk_aligned+0x1e>
 8006c96:	bf00      	nop
 8006c98:	200006dc 	.word	0x200006dc

08006c9c <_malloc_r>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	1ccd      	adds	r5, r1, #3
 8006ca2:	f025 0503 	bic.w	r5, r5, #3
 8006ca6:	3508      	adds	r5, #8
 8006ca8:	2d0c      	cmp	r5, #12
 8006caa:	bf38      	it	cc
 8006cac:	250c      	movcc	r5, #12
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	db01      	blt.n	8006cb8 <_malloc_r+0x1c>
 8006cb4:	42a9      	cmp	r1, r5
 8006cb6:	d904      	bls.n	8006cc2 <_malloc_r+0x26>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d98 <_malloc_r+0xfc>
 8006cc6:	f000 f869 	bl	8006d9c <__malloc_lock>
 8006cca:	f8d8 3000 	ldr.w	r3, [r8]
 8006cce:	461c      	mov	r4, r3
 8006cd0:	bb44      	cbnz	r4, 8006d24 <_malloc_r+0x88>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7ff ffbf 	bl	8006c58 <sbrk_aligned>
 8006cda:	1c43      	adds	r3, r0, #1
 8006cdc:	4604      	mov	r4, r0
 8006cde:	d158      	bne.n	8006d92 <_malloc_r+0xf6>
 8006ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ce4:	4627      	mov	r7, r4
 8006ce6:	2f00      	cmp	r7, #0
 8006ce8:	d143      	bne.n	8006d72 <_malloc_r+0xd6>
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	d04b      	beq.n	8006d86 <_malloc_r+0xea>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	eb04 0903 	add.w	r9, r4, r3
 8006cf8:	f000 fe58 	bl	80079ac <_sbrk_r>
 8006cfc:	4581      	cmp	r9, r0
 8006cfe:	d142      	bne.n	8006d86 <_malloc_r+0xea>
 8006d00:	6821      	ldr	r1, [r4, #0]
 8006d02:	4630      	mov	r0, r6
 8006d04:	1a6d      	subs	r5, r5, r1
 8006d06:	4629      	mov	r1, r5
 8006d08:	f7ff ffa6 	bl	8006c58 <sbrk_aligned>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d03a      	beq.n	8006d86 <_malloc_r+0xea>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	442b      	add	r3, r5
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	f8d8 3000 	ldr.w	r3, [r8]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	bb62      	cbnz	r2, 8006d78 <_malloc_r+0xdc>
 8006d1e:	f8c8 7000 	str.w	r7, [r8]
 8006d22:	e00f      	b.n	8006d44 <_malloc_r+0xa8>
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	1b52      	subs	r2, r2, r5
 8006d28:	d420      	bmi.n	8006d6c <_malloc_r+0xd0>
 8006d2a:	2a0b      	cmp	r2, #11
 8006d2c:	d917      	bls.n	8006d5e <_malloc_r+0xc2>
 8006d2e:	1961      	adds	r1, r4, r5
 8006d30:	42a3      	cmp	r3, r4
 8006d32:	6025      	str	r5, [r4, #0]
 8006d34:	bf18      	it	ne
 8006d36:	6059      	strne	r1, [r3, #4]
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	bf08      	it	eq
 8006d3c:	f8c8 1000 	streq.w	r1, [r8]
 8006d40:	5162      	str	r2, [r4, r5]
 8006d42:	604b      	str	r3, [r1, #4]
 8006d44:	4630      	mov	r0, r6
 8006d46:	f000 f82f 	bl	8006da8 <__malloc_unlock>
 8006d4a:	f104 000b 	add.w	r0, r4, #11
 8006d4e:	1d23      	adds	r3, r4, #4
 8006d50:	f020 0007 	bic.w	r0, r0, #7
 8006d54:	1ac2      	subs	r2, r0, r3
 8006d56:	bf1c      	itt	ne
 8006d58:	1a1b      	subne	r3, r3, r0
 8006d5a:	50a3      	strne	r3, [r4, r2]
 8006d5c:	e7af      	b.n	8006cbe <_malloc_r+0x22>
 8006d5e:	6862      	ldr	r2, [r4, #4]
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	bf0c      	ite	eq
 8006d64:	f8c8 2000 	streq.w	r2, [r8]
 8006d68:	605a      	strne	r2, [r3, #4]
 8006d6a:	e7eb      	b.n	8006d44 <_malloc_r+0xa8>
 8006d6c:	4623      	mov	r3, r4
 8006d6e:	6864      	ldr	r4, [r4, #4]
 8006d70:	e7ae      	b.n	8006cd0 <_malloc_r+0x34>
 8006d72:	463c      	mov	r4, r7
 8006d74:	687f      	ldr	r7, [r7, #4]
 8006d76:	e7b6      	b.n	8006ce6 <_malloc_r+0x4a>
 8006d78:	461a      	mov	r2, r3
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d1fb      	bne.n	8006d78 <_malloc_r+0xdc>
 8006d80:	2300      	movs	r3, #0
 8006d82:	6053      	str	r3, [r2, #4]
 8006d84:	e7de      	b.n	8006d44 <_malloc_r+0xa8>
 8006d86:	230c      	movs	r3, #12
 8006d88:	4630      	mov	r0, r6
 8006d8a:	6033      	str	r3, [r6, #0]
 8006d8c:	f000 f80c 	bl	8006da8 <__malloc_unlock>
 8006d90:	e794      	b.n	8006cbc <_malloc_r+0x20>
 8006d92:	6005      	str	r5, [r0, #0]
 8006d94:	e7d6      	b.n	8006d44 <_malloc_r+0xa8>
 8006d96:	bf00      	nop
 8006d98:	200006e0 	.word	0x200006e0

08006d9c <__malloc_lock>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	@ (8006da4 <__malloc_lock+0x8>)
 8006d9e:	f7ff b8a8 	b.w	8005ef2 <__retarget_lock_acquire_recursive>
 8006da2:	bf00      	nop
 8006da4:	200006d8 	.word	0x200006d8

08006da8 <__malloc_unlock>:
 8006da8:	4801      	ldr	r0, [pc, #4]	@ (8006db0 <__malloc_unlock+0x8>)
 8006daa:	f7ff b8a3 	b.w	8005ef4 <__retarget_lock_release_recursive>
 8006dae:	bf00      	nop
 8006db0:	200006d8 	.word	0x200006d8

08006db4 <_Balloc>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	69c6      	ldr	r6, [r0, #28]
 8006db8:	4604      	mov	r4, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	b976      	cbnz	r6, 8006ddc <_Balloc+0x28>
 8006dbe:	2010      	movs	r0, #16
 8006dc0:	f7ff ff42 	bl	8006c48 <malloc>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	61e0      	str	r0, [r4, #28]
 8006dc8:	b920      	cbnz	r0, 8006dd4 <_Balloc+0x20>
 8006dca:	216b      	movs	r1, #107	@ 0x6b
 8006dcc:	4b17      	ldr	r3, [pc, #92]	@ (8006e2c <_Balloc+0x78>)
 8006dce:	4818      	ldr	r0, [pc, #96]	@ (8006e30 <_Balloc+0x7c>)
 8006dd0:	f000 fe0a 	bl	80079e8 <__assert_func>
 8006dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dd8:	6006      	str	r6, [r0, #0]
 8006dda:	60c6      	str	r6, [r0, #12]
 8006ddc:	69e6      	ldr	r6, [r4, #28]
 8006dde:	68f3      	ldr	r3, [r6, #12]
 8006de0:	b183      	cbz	r3, 8006e04 <_Balloc+0x50>
 8006de2:	69e3      	ldr	r3, [r4, #28]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dea:	b9b8      	cbnz	r0, 8006e1c <_Balloc+0x68>
 8006dec:	2101      	movs	r1, #1
 8006dee:	fa01 f605 	lsl.w	r6, r1, r5
 8006df2:	1d72      	adds	r2, r6, #5
 8006df4:	4620      	mov	r0, r4
 8006df6:	0092      	lsls	r2, r2, #2
 8006df8:	f000 fe14 	bl	8007a24 <_calloc_r>
 8006dfc:	b160      	cbz	r0, 8006e18 <_Balloc+0x64>
 8006dfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e02:	e00e      	b.n	8006e22 <_Balloc+0x6e>
 8006e04:	2221      	movs	r2, #33	@ 0x21
 8006e06:	2104      	movs	r1, #4
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fe0b 	bl	8007a24 <_calloc_r>
 8006e0e:	69e3      	ldr	r3, [r4, #28]
 8006e10:	60f0      	str	r0, [r6, #12]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e4      	bne.n	8006de2 <_Balloc+0x2e>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	6802      	ldr	r2, [r0, #0]
 8006e1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e22:	2300      	movs	r3, #0
 8006e24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e28:	e7f7      	b.n	8006e1a <_Balloc+0x66>
 8006e2a:	bf00      	nop
 8006e2c:	08007cd9 	.word	0x08007cd9
 8006e30:	08007d59 	.word	0x08007d59

08006e34 <_Bfree>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	69c6      	ldr	r6, [r0, #28]
 8006e38:	4605      	mov	r5, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	b976      	cbnz	r6, 8006e5c <_Bfree+0x28>
 8006e3e:	2010      	movs	r0, #16
 8006e40:	f7ff ff02 	bl	8006c48 <malloc>
 8006e44:	4602      	mov	r2, r0
 8006e46:	61e8      	str	r0, [r5, #28]
 8006e48:	b920      	cbnz	r0, 8006e54 <_Bfree+0x20>
 8006e4a:	218f      	movs	r1, #143	@ 0x8f
 8006e4c:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <_Bfree+0x3c>)
 8006e4e:	4809      	ldr	r0, [pc, #36]	@ (8006e74 <_Bfree+0x40>)
 8006e50:	f000 fdca 	bl	80079e8 <__assert_func>
 8006e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e58:	6006      	str	r6, [r0, #0]
 8006e5a:	60c6      	str	r6, [r0, #12]
 8006e5c:	b13c      	cbz	r4, 8006e6e <_Bfree+0x3a>
 8006e5e:	69eb      	ldr	r3, [r5, #28]
 8006e60:	6862      	ldr	r2, [r4, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e68:	6021      	str	r1, [r4, #0]
 8006e6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	08007cd9 	.word	0x08007cd9
 8006e74:	08007d59 	.word	0x08007d59

08006e78 <__multadd>:
 8006e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	461e      	mov	r6, r3
 8006e82:	2000      	movs	r0, #0
 8006e84:	690d      	ldr	r5, [r1, #16]
 8006e86:	f101 0c14 	add.w	ip, r1, #20
 8006e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8006e8e:	3001      	adds	r0, #1
 8006e90:	b299      	uxth	r1, r3
 8006e92:	fb02 6101 	mla	r1, r2, r1, r6
 8006e96:	0c1e      	lsrs	r6, r3, #16
 8006e98:	0c0b      	lsrs	r3, r1, #16
 8006e9a:	fb02 3306 	mla	r3, r2, r6, r3
 8006e9e:	b289      	uxth	r1, r1
 8006ea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ea4:	4285      	cmp	r5, r0
 8006ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006eaa:	f84c 1b04 	str.w	r1, [ip], #4
 8006eae:	dcec      	bgt.n	8006e8a <__multadd+0x12>
 8006eb0:	b30e      	cbz	r6, 8006ef6 <__multadd+0x7e>
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	dc19      	bgt.n	8006eec <__multadd+0x74>
 8006eb8:	6861      	ldr	r1, [r4, #4]
 8006eba:	4638      	mov	r0, r7
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	f7ff ff79 	bl	8006db4 <_Balloc>
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	b928      	cbnz	r0, 8006ed2 <__multadd+0x5a>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	21ba      	movs	r1, #186	@ 0xba
 8006eca:	4b0c      	ldr	r3, [pc, #48]	@ (8006efc <__multadd+0x84>)
 8006ecc:	480c      	ldr	r0, [pc, #48]	@ (8006f00 <__multadd+0x88>)
 8006ece:	f000 fd8b 	bl	80079e8 <__assert_func>
 8006ed2:	6922      	ldr	r2, [r4, #16]
 8006ed4:	f104 010c 	add.w	r1, r4, #12
 8006ed8:	3202      	adds	r2, #2
 8006eda:	0092      	lsls	r2, r2, #2
 8006edc:	300c      	adds	r0, #12
 8006ede:	f000 fd75 	bl	80079cc <memcpy>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f7ff ffa5 	bl	8006e34 <_Bfree>
 8006eea:	4644      	mov	r4, r8
 8006eec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	615e      	str	r6, [r3, #20]
 8006ef4:	6125      	str	r5, [r4, #16]
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006efc:	08007d48 	.word	0x08007d48
 8006f00:	08007d59 	.word	0x08007d59

08006f04 <__hi0bits>:
 8006f04:	4603      	mov	r3, r0
 8006f06:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f0a:	bf3a      	itte	cc
 8006f0c:	0403      	lslcc	r3, r0, #16
 8006f0e:	2010      	movcc	r0, #16
 8006f10:	2000      	movcs	r0, #0
 8006f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f16:	bf3c      	itt	cc
 8006f18:	021b      	lslcc	r3, r3, #8
 8006f1a:	3008      	addcc	r0, #8
 8006f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f20:	bf3c      	itt	cc
 8006f22:	011b      	lslcc	r3, r3, #4
 8006f24:	3004      	addcc	r0, #4
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f2a:	bf3c      	itt	cc
 8006f2c:	009b      	lslcc	r3, r3, #2
 8006f2e:	3002      	addcc	r0, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	db05      	blt.n	8006f40 <__hi0bits+0x3c>
 8006f34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f38:	f100 0001 	add.w	r0, r0, #1
 8006f3c:	bf08      	it	eq
 8006f3e:	2020      	moveq	r0, #32
 8006f40:	4770      	bx	lr

08006f42 <__lo0bits>:
 8006f42:	6803      	ldr	r3, [r0, #0]
 8006f44:	4602      	mov	r2, r0
 8006f46:	f013 0007 	ands.w	r0, r3, #7
 8006f4a:	d00b      	beq.n	8006f64 <__lo0bits+0x22>
 8006f4c:	07d9      	lsls	r1, r3, #31
 8006f4e:	d421      	bmi.n	8006f94 <__lo0bits+0x52>
 8006f50:	0798      	lsls	r0, r3, #30
 8006f52:	bf49      	itett	mi
 8006f54:	085b      	lsrmi	r3, r3, #1
 8006f56:	089b      	lsrpl	r3, r3, #2
 8006f58:	2001      	movmi	r0, #1
 8006f5a:	6013      	strmi	r3, [r2, #0]
 8006f5c:	bf5c      	itt	pl
 8006f5e:	2002      	movpl	r0, #2
 8006f60:	6013      	strpl	r3, [r2, #0]
 8006f62:	4770      	bx	lr
 8006f64:	b299      	uxth	r1, r3
 8006f66:	b909      	cbnz	r1, 8006f6c <__lo0bits+0x2a>
 8006f68:	2010      	movs	r0, #16
 8006f6a:	0c1b      	lsrs	r3, r3, #16
 8006f6c:	b2d9      	uxtb	r1, r3
 8006f6e:	b909      	cbnz	r1, 8006f74 <__lo0bits+0x32>
 8006f70:	3008      	adds	r0, #8
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	0719      	lsls	r1, r3, #28
 8006f76:	bf04      	itt	eq
 8006f78:	091b      	lsreq	r3, r3, #4
 8006f7a:	3004      	addeq	r0, #4
 8006f7c:	0799      	lsls	r1, r3, #30
 8006f7e:	bf04      	itt	eq
 8006f80:	089b      	lsreq	r3, r3, #2
 8006f82:	3002      	addeq	r0, #2
 8006f84:	07d9      	lsls	r1, r3, #31
 8006f86:	d403      	bmi.n	8006f90 <__lo0bits+0x4e>
 8006f88:	085b      	lsrs	r3, r3, #1
 8006f8a:	f100 0001 	add.w	r0, r0, #1
 8006f8e:	d003      	beq.n	8006f98 <__lo0bits+0x56>
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	4770      	bx	lr
 8006f94:	2000      	movs	r0, #0
 8006f96:	4770      	bx	lr
 8006f98:	2020      	movs	r0, #32
 8006f9a:	4770      	bx	lr

08006f9c <__i2b>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	f7ff ff07 	bl	8006db4 <_Balloc>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	b928      	cbnz	r0, 8006fb6 <__i2b+0x1a>
 8006faa:	f240 1145 	movw	r1, #325	@ 0x145
 8006fae:	4b04      	ldr	r3, [pc, #16]	@ (8006fc0 <__i2b+0x24>)
 8006fb0:	4804      	ldr	r0, [pc, #16]	@ (8006fc4 <__i2b+0x28>)
 8006fb2:	f000 fd19 	bl	80079e8 <__assert_func>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	6144      	str	r4, [r0, #20]
 8006fba:	6103      	str	r3, [r0, #16]
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	bf00      	nop
 8006fc0:	08007d48 	.word	0x08007d48
 8006fc4:	08007d59 	.word	0x08007d59

08006fc8 <__multiply>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	4614      	mov	r4, r2
 8006fce:	690a      	ldr	r2, [r1, #16]
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	460f      	mov	r7, r1
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	bfa2      	ittt	ge
 8006fd8:	4623      	movge	r3, r4
 8006fda:	460c      	movge	r4, r1
 8006fdc:	461f      	movge	r7, r3
 8006fde:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006fe2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	6861      	ldr	r1, [r4, #4]
 8006fea:	eb0a 0609 	add.w	r6, sl, r9
 8006fee:	42b3      	cmp	r3, r6
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	bfb8      	it	lt
 8006ff4:	3101      	addlt	r1, #1
 8006ff6:	f7ff fedd 	bl	8006db4 <_Balloc>
 8006ffa:	b930      	cbnz	r0, 800700a <__multiply+0x42>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007002:	4b43      	ldr	r3, [pc, #268]	@ (8007110 <__multiply+0x148>)
 8007004:	4843      	ldr	r0, [pc, #268]	@ (8007114 <__multiply+0x14c>)
 8007006:	f000 fcef 	bl	80079e8 <__assert_func>
 800700a:	f100 0514 	add.w	r5, r0, #20
 800700e:	462b      	mov	r3, r5
 8007010:	2200      	movs	r2, #0
 8007012:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007016:	4543      	cmp	r3, r8
 8007018:	d321      	bcc.n	800705e <__multiply+0x96>
 800701a:	f107 0114 	add.w	r1, r7, #20
 800701e:	f104 0214 	add.w	r2, r4, #20
 8007022:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007026:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	1b13      	subs	r3, r2, r4
 800702e:	3b15      	subs	r3, #21
 8007030:	f023 0303 	bic.w	r3, r3, #3
 8007034:	3304      	adds	r3, #4
 8007036:	f104 0715 	add.w	r7, r4, #21
 800703a:	42ba      	cmp	r2, r7
 800703c:	bf38      	it	cc
 800703e:	2304      	movcc	r3, #4
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	9b02      	ldr	r3, [sp, #8]
 8007044:	9103      	str	r1, [sp, #12]
 8007046:	428b      	cmp	r3, r1
 8007048:	d80c      	bhi.n	8007064 <__multiply+0x9c>
 800704a:	2e00      	cmp	r6, #0
 800704c:	dd03      	ble.n	8007056 <__multiply+0x8e>
 800704e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007052:	2b00      	cmp	r3, #0
 8007054:	d05a      	beq.n	800710c <__multiply+0x144>
 8007056:	6106      	str	r6, [r0, #16]
 8007058:	b005      	add	sp, #20
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	f843 2b04 	str.w	r2, [r3], #4
 8007062:	e7d8      	b.n	8007016 <__multiply+0x4e>
 8007064:	f8b1 a000 	ldrh.w	sl, [r1]
 8007068:	f1ba 0f00 	cmp.w	sl, #0
 800706c:	d023      	beq.n	80070b6 <__multiply+0xee>
 800706e:	46a9      	mov	r9, r5
 8007070:	f04f 0c00 	mov.w	ip, #0
 8007074:	f104 0e14 	add.w	lr, r4, #20
 8007078:	f85e 7b04 	ldr.w	r7, [lr], #4
 800707c:	f8d9 3000 	ldr.w	r3, [r9]
 8007080:	fa1f fb87 	uxth.w	fp, r7
 8007084:	b29b      	uxth	r3, r3
 8007086:	fb0a 330b 	mla	r3, sl, fp, r3
 800708a:	4463      	add	r3, ip
 800708c:	f8d9 c000 	ldr.w	ip, [r9]
 8007090:	0c3f      	lsrs	r7, r7, #16
 8007092:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007096:	fb0a c707 	mla	r7, sl, r7, ip
 800709a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800709e:	b29b      	uxth	r3, r3
 80070a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070a4:	4572      	cmp	r2, lr
 80070a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80070aa:	f849 3b04 	str.w	r3, [r9], #4
 80070ae:	d8e3      	bhi.n	8007078 <__multiply+0xb0>
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	f845 c003 	str.w	ip, [r5, r3]
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	3104      	adds	r1, #4
 80070ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80070be:	f1b9 0f00 	cmp.w	r9, #0
 80070c2:	d021      	beq.n	8007108 <__multiply+0x140>
 80070c4:	46ae      	mov	lr, r5
 80070c6:	f04f 0a00 	mov.w	sl, #0
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	f104 0c14 	add.w	ip, r4, #20
 80070d0:	f8bc b000 	ldrh.w	fp, [ip]
 80070d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	fb09 770b 	mla	r7, r9, fp, r7
 80070de:	4457      	add	r7, sl
 80070e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070e4:	f84e 3b04 	str.w	r3, [lr], #4
 80070e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070f0:	f8be 3000 	ldrh.w	r3, [lr]
 80070f4:	4562      	cmp	r2, ip
 80070f6:	fb09 330a 	mla	r3, r9, sl, r3
 80070fa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80070fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007102:	d8e5      	bhi.n	80070d0 <__multiply+0x108>
 8007104:	9f01      	ldr	r7, [sp, #4]
 8007106:	51eb      	str	r3, [r5, r7]
 8007108:	3504      	adds	r5, #4
 800710a:	e79a      	b.n	8007042 <__multiply+0x7a>
 800710c:	3e01      	subs	r6, #1
 800710e:	e79c      	b.n	800704a <__multiply+0x82>
 8007110:	08007d48 	.word	0x08007d48
 8007114:	08007d59 	.word	0x08007d59

08007118 <__pow5mult>:
 8007118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800711c:	4615      	mov	r5, r2
 800711e:	f012 0203 	ands.w	r2, r2, #3
 8007122:	4607      	mov	r7, r0
 8007124:	460e      	mov	r6, r1
 8007126:	d007      	beq.n	8007138 <__pow5mult+0x20>
 8007128:	4c25      	ldr	r4, [pc, #148]	@ (80071c0 <__pow5mult+0xa8>)
 800712a:	3a01      	subs	r2, #1
 800712c:	2300      	movs	r3, #0
 800712e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007132:	f7ff fea1 	bl	8006e78 <__multadd>
 8007136:	4606      	mov	r6, r0
 8007138:	10ad      	asrs	r5, r5, #2
 800713a:	d03d      	beq.n	80071b8 <__pow5mult+0xa0>
 800713c:	69fc      	ldr	r4, [r7, #28]
 800713e:	b97c      	cbnz	r4, 8007160 <__pow5mult+0x48>
 8007140:	2010      	movs	r0, #16
 8007142:	f7ff fd81 	bl	8006c48 <malloc>
 8007146:	4602      	mov	r2, r0
 8007148:	61f8      	str	r0, [r7, #28]
 800714a:	b928      	cbnz	r0, 8007158 <__pow5mult+0x40>
 800714c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007150:	4b1c      	ldr	r3, [pc, #112]	@ (80071c4 <__pow5mult+0xac>)
 8007152:	481d      	ldr	r0, [pc, #116]	@ (80071c8 <__pow5mult+0xb0>)
 8007154:	f000 fc48 	bl	80079e8 <__assert_func>
 8007158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800715c:	6004      	str	r4, [r0, #0]
 800715e:	60c4      	str	r4, [r0, #12]
 8007160:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007168:	b94c      	cbnz	r4, 800717e <__pow5mult+0x66>
 800716a:	f240 2171 	movw	r1, #625	@ 0x271
 800716e:	4638      	mov	r0, r7
 8007170:	f7ff ff14 	bl	8006f9c <__i2b>
 8007174:	2300      	movs	r3, #0
 8007176:	4604      	mov	r4, r0
 8007178:	f8c8 0008 	str.w	r0, [r8, #8]
 800717c:	6003      	str	r3, [r0, #0]
 800717e:	f04f 0900 	mov.w	r9, #0
 8007182:	07eb      	lsls	r3, r5, #31
 8007184:	d50a      	bpl.n	800719c <__pow5mult+0x84>
 8007186:	4631      	mov	r1, r6
 8007188:	4622      	mov	r2, r4
 800718a:	4638      	mov	r0, r7
 800718c:	f7ff ff1c 	bl	8006fc8 <__multiply>
 8007190:	4680      	mov	r8, r0
 8007192:	4631      	mov	r1, r6
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff fe4d 	bl	8006e34 <_Bfree>
 800719a:	4646      	mov	r6, r8
 800719c:	106d      	asrs	r5, r5, #1
 800719e:	d00b      	beq.n	80071b8 <__pow5mult+0xa0>
 80071a0:	6820      	ldr	r0, [r4, #0]
 80071a2:	b938      	cbnz	r0, 80071b4 <__pow5mult+0x9c>
 80071a4:	4622      	mov	r2, r4
 80071a6:	4621      	mov	r1, r4
 80071a8:	4638      	mov	r0, r7
 80071aa:	f7ff ff0d 	bl	8006fc8 <__multiply>
 80071ae:	6020      	str	r0, [r4, #0]
 80071b0:	f8c0 9000 	str.w	r9, [r0]
 80071b4:	4604      	mov	r4, r0
 80071b6:	e7e4      	b.n	8007182 <__pow5mult+0x6a>
 80071b8:	4630      	mov	r0, r6
 80071ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071be:	bf00      	nop
 80071c0:	08007db4 	.word	0x08007db4
 80071c4:	08007cd9 	.word	0x08007cd9
 80071c8:	08007d59 	.word	0x08007d59

080071cc <__lshift>:
 80071cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	460c      	mov	r4, r1
 80071d2:	4607      	mov	r7, r0
 80071d4:	4691      	mov	r9, r2
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	6849      	ldr	r1, [r1, #4]
 80071da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071de:	68a3      	ldr	r3, [r4, #8]
 80071e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071e4:	f108 0601 	add.w	r6, r8, #1
 80071e8:	42b3      	cmp	r3, r6
 80071ea:	db0b      	blt.n	8007204 <__lshift+0x38>
 80071ec:	4638      	mov	r0, r7
 80071ee:	f7ff fde1 	bl	8006db4 <_Balloc>
 80071f2:	4605      	mov	r5, r0
 80071f4:	b948      	cbnz	r0, 800720a <__lshift+0x3e>
 80071f6:	4602      	mov	r2, r0
 80071f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071fc:	4b27      	ldr	r3, [pc, #156]	@ (800729c <__lshift+0xd0>)
 80071fe:	4828      	ldr	r0, [pc, #160]	@ (80072a0 <__lshift+0xd4>)
 8007200:	f000 fbf2 	bl	80079e8 <__assert_func>
 8007204:	3101      	adds	r1, #1
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	e7ee      	b.n	80071e8 <__lshift+0x1c>
 800720a:	2300      	movs	r3, #0
 800720c:	f100 0114 	add.w	r1, r0, #20
 8007210:	f100 0210 	add.w	r2, r0, #16
 8007214:	4618      	mov	r0, r3
 8007216:	4553      	cmp	r3, sl
 8007218:	db33      	blt.n	8007282 <__lshift+0xb6>
 800721a:	6920      	ldr	r0, [r4, #16]
 800721c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007220:	f104 0314 	add.w	r3, r4, #20
 8007224:	f019 091f 	ands.w	r9, r9, #31
 8007228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800722c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007230:	d02b      	beq.n	800728a <__lshift+0xbe>
 8007232:	468a      	mov	sl, r1
 8007234:	2200      	movs	r2, #0
 8007236:	f1c9 0e20 	rsb	lr, r9, #32
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	fa00 f009 	lsl.w	r0, r0, r9
 8007240:	4310      	orrs	r0, r2
 8007242:	f84a 0b04 	str.w	r0, [sl], #4
 8007246:	f853 2b04 	ldr.w	r2, [r3], #4
 800724a:	459c      	cmp	ip, r3
 800724c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007250:	d8f3      	bhi.n	800723a <__lshift+0x6e>
 8007252:	ebac 0304 	sub.w	r3, ip, r4
 8007256:	3b15      	subs	r3, #21
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	3304      	adds	r3, #4
 800725e:	f104 0015 	add.w	r0, r4, #21
 8007262:	4584      	cmp	ip, r0
 8007264:	bf38      	it	cc
 8007266:	2304      	movcc	r3, #4
 8007268:	50ca      	str	r2, [r1, r3]
 800726a:	b10a      	cbz	r2, 8007270 <__lshift+0xa4>
 800726c:	f108 0602 	add.w	r6, r8, #2
 8007270:	3e01      	subs	r6, #1
 8007272:	4638      	mov	r0, r7
 8007274:	4621      	mov	r1, r4
 8007276:	612e      	str	r6, [r5, #16]
 8007278:	f7ff fddc 	bl	8006e34 <_Bfree>
 800727c:	4628      	mov	r0, r5
 800727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007282:	f842 0f04 	str.w	r0, [r2, #4]!
 8007286:	3301      	adds	r3, #1
 8007288:	e7c5      	b.n	8007216 <__lshift+0x4a>
 800728a:	3904      	subs	r1, #4
 800728c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007290:	459c      	cmp	ip, r3
 8007292:	f841 2f04 	str.w	r2, [r1, #4]!
 8007296:	d8f9      	bhi.n	800728c <__lshift+0xc0>
 8007298:	e7ea      	b.n	8007270 <__lshift+0xa4>
 800729a:	bf00      	nop
 800729c:	08007d48 	.word	0x08007d48
 80072a0:	08007d59 	.word	0x08007d59

080072a4 <__mcmp>:
 80072a4:	4603      	mov	r3, r0
 80072a6:	690a      	ldr	r2, [r1, #16]
 80072a8:	6900      	ldr	r0, [r0, #16]
 80072aa:	b530      	push	{r4, r5, lr}
 80072ac:	1a80      	subs	r0, r0, r2
 80072ae:	d10e      	bne.n	80072ce <__mcmp+0x2a>
 80072b0:	3314      	adds	r3, #20
 80072b2:	3114      	adds	r1, #20
 80072b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072c4:	4295      	cmp	r5, r2
 80072c6:	d003      	beq.n	80072d0 <__mcmp+0x2c>
 80072c8:	d205      	bcs.n	80072d6 <__mcmp+0x32>
 80072ca:	f04f 30ff 	mov.w	r0, #4294967295
 80072ce:	bd30      	pop	{r4, r5, pc}
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	d3f3      	bcc.n	80072bc <__mcmp+0x18>
 80072d4:	e7fb      	b.n	80072ce <__mcmp+0x2a>
 80072d6:	2001      	movs	r0, #1
 80072d8:	e7f9      	b.n	80072ce <__mcmp+0x2a>
	...

080072dc <__mdiff>:
 80072dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	4689      	mov	r9, r1
 80072e2:	4606      	mov	r6, r0
 80072e4:	4611      	mov	r1, r2
 80072e6:	4648      	mov	r0, r9
 80072e8:	4614      	mov	r4, r2
 80072ea:	f7ff ffdb 	bl	80072a4 <__mcmp>
 80072ee:	1e05      	subs	r5, r0, #0
 80072f0:	d112      	bne.n	8007318 <__mdiff+0x3c>
 80072f2:	4629      	mov	r1, r5
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff fd5d 	bl	8006db4 <_Balloc>
 80072fa:	4602      	mov	r2, r0
 80072fc:	b928      	cbnz	r0, 800730a <__mdiff+0x2e>
 80072fe:	f240 2137 	movw	r1, #567	@ 0x237
 8007302:	4b3e      	ldr	r3, [pc, #248]	@ (80073fc <__mdiff+0x120>)
 8007304:	483e      	ldr	r0, [pc, #248]	@ (8007400 <__mdiff+0x124>)
 8007306:	f000 fb6f 	bl	80079e8 <__assert_func>
 800730a:	2301      	movs	r3, #1
 800730c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007310:	4610      	mov	r0, r2
 8007312:	b003      	add	sp, #12
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	bfbc      	itt	lt
 800731a:	464b      	movlt	r3, r9
 800731c:	46a1      	movlt	r9, r4
 800731e:	4630      	mov	r0, r6
 8007320:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007324:	bfba      	itte	lt
 8007326:	461c      	movlt	r4, r3
 8007328:	2501      	movlt	r5, #1
 800732a:	2500      	movge	r5, #0
 800732c:	f7ff fd42 	bl	8006db4 <_Balloc>
 8007330:	4602      	mov	r2, r0
 8007332:	b918      	cbnz	r0, 800733c <__mdiff+0x60>
 8007334:	f240 2145 	movw	r1, #581	@ 0x245
 8007338:	4b30      	ldr	r3, [pc, #192]	@ (80073fc <__mdiff+0x120>)
 800733a:	e7e3      	b.n	8007304 <__mdiff+0x28>
 800733c:	f100 0b14 	add.w	fp, r0, #20
 8007340:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007344:	f109 0310 	add.w	r3, r9, #16
 8007348:	60c5      	str	r5, [r0, #12]
 800734a:	f04f 0c00 	mov.w	ip, #0
 800734e:	f109 0514 	add.w	r5, r9, #20
 8007352:	46d9      	mov	r9, fp
 8007354:	6926      	ldr	r6, [r4, #16]
 8007356:	f104 0e14 	add.w	lr, r4, #20
 800735a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800735e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	9b01      	ldr	r3, [sp, #4]
 8007366:	f85e 0b04 	ldr.w	r0, [lr], #4
 800736a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800736e:	b281      	uxth	r1, r0
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	fa1f f38a 	uxth.w	r3, sl
 8007376:	1a5b      	subs	r3, r3, r1
 8007378:	0c00      	lsrs	r0, r0, #16
 800737a:	4463      	add	r3, ip
 800737c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007380:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007384:	b29b      	uxth	r3, r3
 8007386:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800738a:	4576      	cmp	r6, lr
 800738c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007390:	f849 3b04 	str.w	r3, [r9], #4
 8007394:	d8e6      	bhi.n	8007364 <__mdiff+0x88>
 8007396:	1b33      	subs	r3, r6, r4
 8007398:	3b15      	subs	r3, #21
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	3415      	adds	r4, #21
 80073a0:	3304      	adds	r3, #4
 80073a2:	42a6      	cmp	r6, r4
 80073a4:	bf38      	it	cc
 80073a6:	2304      	movcc	r3, #4
 80073a8:	441d      	add	r5, r3
 80073aa:	445b      	add	r3, fp
 80073ac:	461e      	mov	r6, r3
 80073ae:	462c      	mov	r4, r5
 80073b0:	4544      	cmp	r4, r8
 80073b2:	d30e      	bcc.n	80073d2 <__mdiff+0xf6>
 80073b4:	f108 0103 	add.w	r1, r8, #3
 80073b8:	1b49      	subs	r1, r1, r5
 80073ba:	f021 0103 	bic.w	r1, r1, #3
 80073be:	3d03      	subs	r5, #3
 80073c0:	45a8      	cmp	r8, r5
 80073c2:	bf38      	it	cc
 80073c4:	2100      	movcc	r1, #0
 80073c6:	440b      	add	r3, r1
 80073c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073cc:	b199      	cbz	r1, 80073f6 <__mdiff+0x11a>
 80073ce:	6117      	str	r7, [r2, #16]
 80073d0:	e79e      	b.n	8007310 <__mdiff+0x34>
 80073d2:	46e6      	mov	lr, ip
 80073d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80073d8:	fa1f fc81 	uxth.w	ip, r1
 80073dc:	44f4      	add	ip, lr
 80073de:	0c08      	lsrs	r0, r1, #16
 80073e0:	4471      	add	r1, lr
 80073e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073e6:	b289      	uxth	r1, r1
 80073e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073f0:	f846 1b04 	str.w	r1, [r6], #4
 80073f4:	e7dc      	b.n	80073b0 <__mdiff+0xd4>
 80073f6:	3f01      	subs	r7, #1
 80073f8:	e7e6      	b.n	80073c8 <__mdiff+0xec>
 80073fa:	bf00      	nop
 80073fc:	08007d48 	.word	0x08007d48
 8007400:	08007d59 	.word	0x08007d59

08007404 <__d2b>:
 8007404:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007408:	2101      	movs	r1, #1
 800740a:	4690      	mov	r8, r2
 800740c:	4699      	mov	r9, r3
 800740e:	9e08      	ldr	r6, [sp, #32]
 8007410:	f7ff fcd0 	bl	8006db4 <_Balloc>
 8007414:	4604      	mov	r4, r0
 8007416:	b930      	cbnz	r0, 8007426 <__d2b+0x22>
 8007418:	4602      	mov	r2, r0
 800741a:	f240 310f 	movw	r1, #783	@ 0x30f
 800741e:	4b23      	ldr	r3, [pc, #140]	@ (80074ac <__d2b+0xa8>)
 8007420:	4823      	ldr	r0, [pc, #140]	@ (80074b0 <__d2b+0xac>)
 8007422:	f000 fae1 	bl	80079e8 <__assert_func>
 8007426:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800742a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800742e:	b10d      	cbz	r5, 8007434 <__d2b+0x30>
 8007430:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	f1b8 0300 	subs.w	r3, r8, #0
 800743a:	d024      	beq.n	8007486 <__d2b+0x82>
 800743c:	4668      	mov	r0, sp
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	f7ff fd7f 	bl	8006f42 <__lo0bits>
 8007444:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007448:	b1d8      	cbz	r0, 8007482 <__d2b+0x7e>
 800744a:	f1c0 0320 	rsb	r3, r0, #32
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	430b      	orrs	r3, r1
 8007454:	40c2      	lsrs	r2, r0
 8007456:	6163      	str	r3, [r4, #20]
 8007458:	9201      	str	r2, [sp, #4]
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	bf0c      	ite	eq
 8007460:	2201      	moveq	r2, #1
 8007462:	2202      	movne	r2, #2
 8007464:	61a3      	str	r3, [r4, #24]
 8007466:	6122      	str	r2, [r4, #16]
 8007468:	b1ad      	cbz	r5, 8007496 <__d2b+0x92>
 800746a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800746e:	4405      	add	r5, r0
 8007470:	6035      	str	r5, [r6, #0]
 8007472:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007478:	6018      	str	r0, [r3, #0]
 800747a:	4620      	mov	r0, r4
 800747c:	b002      	add	sp, #8
 800747e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007482:	6161      	str	r1, [r4, #20]
 8007484:	e7e9      	b.n	800745a <__d2b+0x56>
 8007486:	a801      	add	r0, sp, #4
 8007488:	f7ff fd5b 	bl	8006f42 <__lo0bits>
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	6163      	str	r3, [r4, #20]
 8007492:	3020      	adds	r0, #32
 8007494:	e7e7      	b.n	8007466 <__d2b+0x62>
 8007496:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800749a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800749e:	6030      	str	r0, [r6, #0]
 80074a0:	6918      	ldr	r0, [r3, #16]
 80074a2:	f7ff fd2f 	bl	8006f04 <__hi0bits>
 80074a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074aa:	e7e4      	b.n	8007476 <__d2b+0x72>
 80074ac:	08007d48 	.word	0x08007d48
 80074b0:	08007d59 	.word	0x08007d59

080074b4 <__sfputc_r>:
 80074b4:	6893      	ldr	r3, [r2, #8]
 80074b6:	b410      	push	{r4}
 80074b8:	3b01      	subs	r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	6093      	str	r3, [r2, #8]
 80074be:	da07      	bge.n	80074d0 <__sfputc_r+0x1c>
 80074c0:	6994      	ldr	r4, [r2, #24]
 80074c2:	42a3      	cmp	r3, r4
 80074c4:	db01      	blt.n	80074ca <__sfputc_r+0x16>
 80074c6:	290a      	cmp	r1, #10
 80074c8:	d102      	bne.n	80074d0 <__sfputc_r+0x1c>
 80074ca:	bc10      	pop	{r4}
 80074cc:	f000 b9da 	b.w	8007884 <__swbuf_r>
 80074d0:	6813      	ldr	r3, [r2, #0]
 80074d2:	1c58      	adds	r0, r3, #1
 80074d4:	6010      	str	r0, [r2, #0]
 80074d6:	7019      	strb	r1, [r3, #0]
 80074d8:	4608      	mov	r0, r1
 80074da:	bc10      	pop	{r4}
 80074dc:	4770      	bx	lr

080074de <__sfputs_r>:
 80074de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e0:	4606      	mov	r6, r0
 80074e2:	460f      	mov	r7, r1
 80074e4:	4614      	mov	r4, r2
 80074e6:	18d5      	adds	r5, r2, r3
 80074e8:	42ac      	cmp	r4, r5
 80074ea:	d101      	bne.n	80074f0 <__sfputs_r+0x12>
 80074ec:	2000      	movs	r0, #0
 80074ee:	e007      	b.n	8007500 <__sfputs_r+0x22>
 80074f0:	463a      	mov	r2, r7
 80074f2:	4630      	mov	r0, r6
 80074f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f8:	f7ff ffdc 	bl	80074b4 <__sfputc_r>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d1f3      	bne.n	80074e8 <__sfputs_r+0xa>
 8007500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007504 <_vfiprintf_r>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	460d      	mov	r5, r1
 800750a:	4614      	mov	r4, r2
 800750c:	4698      	mov	r8, r3
 800750e:	4606      	mov	r6, r0
 8007510:	b09d      	sub	sp, #116	@ 0x74
 8007512:	b118      	cbz	r0, 800751c <_vfiprintf_r+0x18>
 8007514:	6a03      	ldr	r3, [r0, #32]
 8007516:	b90b      	cbnz	r3, 800751c <_vfiprintf_r+0x18>
 8007518:	f7fe fbe2 	bl	8005ce0 <__sinit>
 800751c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751e:	07d9      	lsls	r1, r3, #31
 8007520:	d405      	bmi.n	800752e <_vfiprintf_r+0x2a>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	059a      	lsls	r2, r3, #22
 8007526:	d402      	bmi.n	800752e <_vfiprintf_r+0x2a>
 8007528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800752a:	f7fe fce2 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	071b      	lsls	r3, r3, #28
 8007532:	d501      	bpl.n	8007538 <_vfiprintf_r+0x34>
 8007534:	692b      	ldr	r3, [r5, #16]
 8007536:	b99b      	cbnz	r3, 8007560 <_vfiprintf_r+0x5c>
 8007538:	4629      	mov	r1, r5
 800753a:	4630      	mov	r0, r6
 800753c:	f000 f9e0 	bl	8007900 <__swsetup_r>
 8007540:	b170      	cbz	r0, 8007560 <_vfiprintf_r+0x5c>
 8007542:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007544:	07dc      	lsls	r4, r3, #31
 8007546:	d504      	bpl.n	8007552 <_vfiprintf_r+0x4e>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b01d      	add	sp, #116	@ 0x74
 800754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007552:	89ab      	ldrh	r3, [r5, #12]
 8007554:	0598      	lsls	r0, r3, #22
 8007556:	d4f7      	bmi.n	8007548 <_vfiprintf_r+0x44>
 8007558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800755a:	f7fe fccb 	bl	8005ef4 <__retarget_lock_release_recursive>
 800755e:	e7f3      	b.n	8007548 <_vfiprintf_r+0x44>
 8007560:	2300      	movs	r3, #0
 8007562:	9309      	str	r3, [sp, #36]	@ 0x24
 8007564:	2320      	movs	r3, #32
 8007566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800756a:	2330      	movs	r3, #48	@ 0x30
 800756c:	f04f 0901 	mov.w	r9, #1
 8007570:	f8cd 800c 	str.w	r8, [sp, #12]
 8007574:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007720 <_vfiprintf_r+0x21c>
 8007578:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800757c:	4623      	mov	r3, r4
 800757e:	469a      	mov	sl, r3
 8007580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007584:	b10a      	cbz	r2, 800758a <_vfiprintf_r+0x86>
 8007586:	2a25      	cmp	r2, #37	@ 0x25
 8007588:	d1f9      	bne.n	800757e <_vfiprintf_r+0x7a>
 800758a:	ebba 0b04 	subs.w	fp, sl, r4
 800758e:	d00b      	beq.n	80075a8 <_vfiprintf_r+0xa4>
 8007590:	465b      	mov	r3, fp
 8007592:	4622      	mov	r2, r4
 8007594:	4629      	mov	r1, r5
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff ffa1 	bl	80074de <__sfputs_r>
 800759c:	3001      	adds	r0, #1
 800759e:	f000 80a7 	beq.w	80076f0 <_vfiprintf_r+0x1ec>
 80075a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a4:	445a      	add	r2, fp
 80075a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80075a8:	f89a 3000 	ldrb.w	r3, [sl]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 809f 	beq.w	80076f0 <_vfiprintf_r+0x1ec>
 80075b2:	2300      	movs	r3, #0
 80075b4:	f04f 32ff 	mov.w	r2, #4294967295
 80075b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075bc:	f10a 0a01 	add.w	sl, sl, #1
 80075c0:	9304      	str	r3, [sp, #16]
 80075c2:	9307      	str	r3, [sp, #28]
 80075c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80075ca:	4654      	mov	r4, sl
 80075cc:	2205      	movs	r2, #5
 80075ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d2:	4853      	ldr	r0, [pc, #332]	@ (8007720 <_vfiprintf_r+0x21c>)
 80075d4:	f7fe fc8f 	bl	8005ef6 <memchr>
 80075d8:	9a04      	ldr	r2, [sp, #16]
 80075da:	b9d8      	cbnz	r0, 8007614 <_vfiprintf_r+0x110>
 80075dc:	06d1      	lsls	r1, r2, #27
 80075de:	bf44      	itt	mi
 80075e0:	2320      	movmi	r3, #32
 80075e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e6:	0713      	lsls	r3, r2, #28
 80075e8:	bf44      	itt	mi
 80075ea:	232b      	movmi	r3, #43	@ 0x2b
 80075ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075f0:	f89a 3000 	ldrb.w	r3, [sl]
 80075f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f6:	d015      	beq.n	8007624 <_vfiprintf_r+0x120>
 80075f8:	4654      	mov	r4, sl
 80075fa:	2000      	movs	r0, #0
 80075fc:	f04f 0c0a 	mov.w	ip, #10
 8007600:	9a07      	ldr	r2, [sp, #28]
 8007602:	4621      	mov	r1, r4
 8007604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007608:	3b30      	subs	r3, #48	@ 0x30
 800760a:	2b09      	cmp	r3, #9
 800760c:	d94b      	bls.n	80076a6 <_vfiprintf_r+0x1a2>
 800760e:	b1b0      	cbz	r0, 800763e <_vfiprintf_r+0x13a>
 8007610:	9207      	str	r2, [sp, #28]
 8007612:	e014      	b.n	800763e <_vfiprintf_r+0x13a>
 8007614:	eba0 0308 	sub.w	r3, r0, r8
 8007618:	fa09 f303 	lsl.w	r3, r9, r3
 800761c:	4313      	orrs	r3, r2
 800761e:	46a2      	mov	sl, r4
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	e7d2      	b.n	80075ca <_vfiprintf_r+0xc6>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	1d19      	adds	r1, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	9103      	str	r1, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfbb      	ittet	lt
 8007630:	425b      	neglt	r3, r3
 8007632:	f042 0202 	orrlt.w	r2, r2, #2
 8007636:	9307      	strge	r3, [sp, #28]
 8007638:	9307      	strlt	r3, [sp, #28]
 800763a:	bfb8      	it	lt
 800763c:	9204      	strlt	r2, [sp, #16]
 800763e:	7823      	ldrb	r3, [r4, #0]
 8007640:	2b2e      	cmp	r3, #46	@ 0x2e
 8007642:	d10a      	bne.n	800765a <_vfiprintf_r+0x156>
 8007644:	7863      	ldrb	r3, [r4, #1]
 8007646:	2b2a      	cmp	r3, #42	@ 0x2a
 8007648:	d132      	bne.n	80076b0 <_vfiprintf_r+0x1ac>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	3402      	adds	r4, #2
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	9203      	str	r2, [sp, #12]
 8007654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007658:	9305      	str	r3, [sp, #20]
 800765a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007724 <_vfiprintf_r+0x220>
 800765e:	2203      	movs	r2, #3
 8007660:	4650      	mov	r0, sl
 8007662:	7821      	ldrb	r1, [r4, #0]
 8007664:	f7fe fc47 	bl	8005ef6 <memchr>
 8007668:	b138      	cbz	r0, 800767a <_vfiprintf_r+0x176>
 800766a:	2240      	movs	r2, #64	@ 0x40
 800766c:	9b04      	ldr	r3, [sp, #16]
 800766e:	eba0 000a 	sub.w	r0, r0, sl
 8007672:	4082      	lsls	r2, r0
 8007674:	4313      	orrs	r3, r2
 8007676:	3401      	adds	r4, #1
 8007678:	9304      	str	r3, [sp, #16]
 800767a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767e:	2206      	movs	r2, #6
 8007680:	4829      	ldr	r0, [pc, #164]	@ (8007728 <_vfiprintf_r+0x224>)
 8007682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007686:	f7fe fc36 	bl	8005ef6 <memchr>
 800768a:	2800      	cmp	r0, #0
 800768c:	d03f      	beq.n	800770e <_vfiprintf_r+0x20a>
 800768e:	4b27      	ldr	r3, [pc, #156]	@ (800772c <_vfiprintf_r+0x228>)
 8007690:	bb1b      	cbnz	r3, 80076da <_vfiprintf_r+0x1d6>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	3307      	adds	r3, #7
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	3308      	adds	r3, #8
 800769c:	9303      	str	r3, [sp, #12]
 800769e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a0:	443b      	add	r3, r7
 80076a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a4:	e76a      	b.n	800757c <_vfiprintf_r+0x78>
 80076a6:	460c      	mov	r4, r1
 80076a8:	2001      	movs	r0, #1
 80076aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ae:	e7a8      	b.n	8007602 <_vfiprintf_r+0xfe>
 80076b0:	2300      	movs	r3, #0
 80076b2:	f04f 0c0a 	mov.w	ip, #10
 80076b6:	4619      	mov	r1, r3
 80076b8:	3401      	adds	r4, #1
 80076ba:	9305      	str	r3, [sp, #20]
 80076bc:	4620      	mov	r0, r4
 80076be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076c2:	3a30      	subs	r2, #48	@ 0x30
 80076c4:	2a09      	cmp	r2, #9
 80076c6:	d903      	bls.n	80076d0 <_vfiprintf_r+0x1cc>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0c6      	beq.n	800765a <_vfiprintf_r+0x156>
 80076cc:	9105      	str	r1, [sp, #20]
 80076ce:	e7c4      	b.n	800765a <_vfiprintf_r+0x156>
 80076d0:	4604      	mov	r4, r0
 80076d2:	2301      	movs	r3, #1
 80076d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d8:	e7f0      	b.n	80076bc <_vfiprintf_r+0x1b8>
 80076da:	ab03      	add	r3, sp, #12
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	462a      	mov	r2, r5
 80076e0:	4630      	mov	r0, r6
 80076e2:	4b13      	ldr	r3, [pc, #76]	@ (8007730 <_vfiprintf_r+0x22c>)
 80076e4:	a904      	add	r1, sp, #16
 80076e6:	f7fd feb1 	bl	800544c <_printf_float>
 80076ea:	4607      	mov	r7, r0
 80076ec:	1c78      	adds	r0, r7, #1
 80076ee:	d1d6      	bne.n	800769e <_vfiprintf_r+0x19a>
 80076f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076f2:	07d9      	lsls	r1, r3, #31
 80076f4:	d405      	bmi.n	8007702 <_vfiprintf_r+0x1fe>
 80076f6:	89ab      	ldrh	r3, [r5, #12]
 80076f8:	059a      	lsls	r2, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_vfiprintf_r+0x1fe>
 80076fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076fe:	f7fe fbf9 	bl	8005ef4 <__retarget_lock_release_recursive>
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	065b      	lsls	r3, r3, #25
 8007706:	f53f af1f 	bmi.w	8007548 <_vfiprintf_r+0x44>
 800770a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800770c:	e71e      	b.n	800754c <_vfiprintf_r+0x48>
 800770e:	ab03      	add	r3, sp, #12
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	462a      	mov	r2, r5
 8007714:	4630      	mov	r0, r6
 8007716:	4b06      	ldr	r3, [pc, #24]	@ (8007730 <_vfiprintf_r+0x22c>)
 8007718:	a904      	add	r1, sp, #16
 800771a:	f7fe f935 	bl	8005988 <_printf_i>
 800771e:	e7e4      	b.n	80076ea <_vfiprintf_r+0x1e6>
 8007720:	08007eb0 	.word	0x08007eb0
 8007724:	08007eb6 	.word	0x08007eb6
 8007728:	08007eba 	.word	0x08007eba
 800772c:	0800544d 	.word	0x0800544d
 8007730:	080074df 	.word	0x080074df

08007734 <__sflush_r>:
 8007734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	0716      	lsls	r6, r2, #28
 800773c:	4605      	mov	r5, r0
 800773e:	460c      	mov	r4, r1
 8007740:	d454      	bmi.n	80077ec <__sflush_r+0xb8>
 8007742:	684b      	ldr	r3, [r1, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dc02      	bgt.n	800774e <__sflush_r+0x1a>
 8007748:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	dd48      	ble.n	80077e0 <__sflush_r+0xac>
 800774e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007750:	2e00      	cmp	r6, #0
 8007752:	d045      	beq.n	80077e0 <__sflush_r+0xac>
 8007754:	2300      	movs	r3, #0
 8007756:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800775a:	682f      	ldr	r7, [r5, #0]
 800775c:	6a21      	ldr	r1, [r4, #32]
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	d030      	beq.n	80077c4 <__sflush_r+0x90>
 8007762:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	0759      	lsls	r1, r3, #29
 8007768:	d505      	bpl.n	8007776 <__sflush_r+0x42>
 800776a:	6863      	ldr	r3, [r4, #4]
 800776c:	1ad2      	subs	r2, r2, r3
 800776e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007770:	b10b      	cbz	r3, 8007776 <__sflush_r+0x42>
 8007772:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007774:	1ad2      	subs	r2, r2, r3
 8007776:	2300      	movs	r3, #0
 8007778:	4628      	mov	r0, r5
 800777a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800777c:	6a21      	ldr	r1, [r4, #32]
 800777e:	47b0      	blx	r6
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	d106      	bne.n	8007794 <__sflush_r+0x60>
 8007786:	6829      	ldr	r1, [r5, #0]
 8007788:	291d      	cmp	r1, #29
 800778a:	d82b      	bhi.n	80077e4 <__sflush_r+0xb0>
 800778c:	4a28      	ldr	r2, [pc, #160]	@ (8007830 <__sflush_r+0xfc>)
 800778e:	410a      	asrs	r2, r1
 8007790:	07d6      	lsls	r6, r2, #31
 8007792:	d427      	bmi.n	80077e4 <__sflush_r+0xb0>
 8007794:	2200      	movs	r2, #0
 8007796:	6062      	str	r2, [r4, #4]
 8007798:	6922      	ldr	r2, [r4, #16]
 800779a:	04d9      	lsls	r1, r3, #19
 800779c:	6022      	str	r2, [r4, #0]
 800779e:	d504      	bpl.n	80077aa <__sflush_r+0x76>
 80077a0:	1c42      	adds	r2, r0, #1
 80077a2:	d101      	bne.n	80077a8 <__sflush_r+0x74>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b903      	cbnz	r3, 80077aa <__sflush_r+0x76>
 80077a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80077aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077ac:	602f      	str	r7, [r5, #0]
 80077ae:	b1b9      	cbz	r1, 80077e0 <__sflush_r+0xac>
 80077b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077b4:	4299      	cmp	r1, r3
 80077b6:	d002      	beq.n	80077be <__sflush_r+0x8a>
 80077b8:	4628      	mov	r0, r5
 80077ba:	f7ff f9fd 	bl	8006bb8 <_free_r>
 80077be:	2300      	movs	r3, #0
 80077c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80077c2:	e00d      	b.n	80077e0 <__sflush_r+0xac>
 80077c4:	2301      	movs	r3, #1
 80077c6:	4628      	mov	r0, r5
 80077c8:	47b0      	blx	r6
 80077ca:	4602      	mov	r2, r0
 80077cc:	1c50      	adds	r0, r2, #1
 80077ce:	d1c9      	bne.n	8007764 <__sflush_r+0x30>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0c6      	beq.n	8007764 <__sflush_r+0x30>
 80077d6:	2b1d      	cmp	r3, #29
 80077d8:	d001      	beq.n	80077de <__sflush_r+0xaa>
 80077da:	2b16      	cmp	r3, #22
 80077dc:	d11d      	bne.n	800781a <__sflush_r+0xe6>
 80077de:	602f      	str	r7, [r5, #0]
 80077e0:	2000      	movs	r0, #0
 80077e2:	e021      	b.n	8007828 <__sflush_r+0xf4>
 80077e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077e8:	b21b      	sxth	r3, r3
 80077ea:	e01a      	b.n	8007822 <__sflush_r+0xee>
 80077ec:	690f      	ldr	r7, [r1, #16]
 80077ee:	2f00      	cmp	r7, #0
 80077f0:	d0f6      	beq.n	80077e0 <__sflush_r+0xac>
 80077f2:	0793      	lsls	r3, r2, #30
 80077f4:	bf18      	it	ne
 80077f6:	2300      	movne	r3, #0
 80077f8:	680e      	ldr	r6, [r1, #0]
 80077fa:	bf08      	it	eq
 80077fc:	694b      	ldreq	r3, [r1, #20]
 80077fe:	1bf6      	subs	r6, r6, r7
 8007800:	600f      	str	r7, [r1, #0]
 8007802:	608b      	str	r3, [r1, #8]
 8007804:	2e00      	cmp	r6, #0
 8007806:	ddeb      	ble.n	80077e0 <__sflush_r+0xac>
 8007808:	4633      	mov	r3, r6
 800780a:	463a      	mov	r2, r7
 800780c:	4628      	mov	r0, r5
 800780e:	6a21      	ldr	r1, [r4, #32]
 8007810:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007814:	47e0      	blx	ip
 8007816:	2800      	cmp	r0, #0
 8007818:	dc07      	bgt.n	800782a <__sflush_r+0xf6>
 800781a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007822:	f04f 30ff 	mov.w	r0, #4294967295
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782a:	4407      	add	r7, r0
 800782c:	1a36      	subs	r6, r6, r0
 800782e:	e7e9      	b.n	8007804 <__sflush_r+0xd0>
 8007830:	dfbffffe 	.word	0xdfbffffe

08007834 <_fflush_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	690b      	ldr	r3, [r1, #16]
 8007838:	4605      	mov	r5, r0
 800783a:	460c      	mov	r4, r1
 800783c:	b913      	cbnz	r3, 8007844 <_fflush_r+0x10>
 800783e:	2500      	movs	r5, #0
 8007840:	4628      	mov	r0, r5
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	b118      	cbz	r0, 800784e <_fflush_r+0x1a>
 8007846:	6a03      	ldr	r3, [r0, #32]
 8007848:	b90b      	cbnz	r3, 800784e <_fflush_r+0x1a>
 800784a:	f7fe fa49 	bl	8005ce0 <__sinit>
 800784e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0f3      	beq.n	800783e <_fflush_r+0xa>
 8007856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007858:	07d0      	lsls	r0, r2, #31
 800785a:	d404      	bmi.n	8007866 <_fflush_r+0x32>
 800785c:	0599      	lsls	r1, r3, #22
 800785e:	d402      	bmi.n	8007866 <_fflush_r+0x32>
 8007860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007862:	f7fe fb46 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 8007866:	4628      	mov	r0, r5
 8007868:	4621      	mov	r1, r4
 800786a:	f7ff ff63 	bl	8007734 <__sflush_r>
 800786e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007870:	4605      	mov	r5, r0
 8007872:	07da      	lsls	r2, r3, #31
 8007874:	d4e4      	bmi.n	8007840 <_fflush_r+0xc>
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	059b      	lsls	r3, r3, #22
 800787a:	d4e1      	bmi.n	8007840 <_fflush_r+0xc>
 800787c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800787e:	f7fe fb39 	bl	8005ef4 <__retarget_lock_release_recursive>
 8007882:	e7dd      	b.n	8007840 <_fflush_r+0xc>

08007884 <__swbuf_r>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	460e      	mov	r6, r1
 8007888:	4614      	mov	r4, r2
 800788a:	4605      	mov	r5, r0
 800788c:	b118      	cbz	r0, 8007896 <__swbuf_r+0x12>
 800788e:	6a03      	ldr	r3, [r0, #32]
 8007890:	b90b      	cbnz	r3, 8007896 <__swbuf_r+0x12>
 8007892:	f7fe fa25 	bl	8005ce0 <__sinit>
 8007896:	69a3      	ldr	r3, [r4, #24]
 8007898:	60a3      	str	r3, [r4, #8]
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	071a      	lsls	r2, r3, #28
 800789e:	d501      	bpl.n	80078a4 <__swbuf_r+0x20>
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	b943      	cbnz	r3, 80078b6 <__swbuf_r+0x32>
 80078a4:	4621      	mov	r1, r4
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 f82a 	bl	8007900 <__swsetup_r>
 80078ac:	b118      	cbz	r0, 80078b6 <__swbuf_r+0x32>
 80078ae:	f04f 37ff 	mov.w	r7, #4294967295
 80078b2:	4638      	mov	r0, r7
 80078b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	6922      	ldr	r2, [r4, #16]
 80078ba:	b2f6      	uxtb	r6, r6
 80078bc:	1a98      	subs	r0, r3, r2
 80078be:	6963      	ldr	r3, [r4, #20]
 80078c0:	4637      	mov	r7, r6
 80078c2:	4283      	cmp	r3, r0
 80078c4:	dc05      	bgt.n	80078d2 <__swbuf_r+0x4e>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4628      	mov	r0, r5
 80078ca:	f7ff ffb3 	bl	8007834 <_fflush_r>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d1ed      	bne.n	80078ae <__swbuf_r+0x2a>
 80078d2:	68a3      	ldr	r3, [r4, #8]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	60a3      	str	r3, [r4, #8]
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	6022      	str	r2, [r4, #0]
 80078de:	701e      	strb	r6, [r3, #0]
 80078e0:	6962      	ldr	r2, [r4, #20]
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d004      	beq.n	80078f2 <__swbuf_r+0x6e>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	07db      	lsls	r3, r3, #31
 80078ec:	d5e1      	bpl.n	80078b2 <__swbuf_r+0x2e>
 80078ee:	2e0a      	cmp	r6, #10
 80078f0:	d1df      	bne.n	80078b2 <__swbuf_r+0x2e>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4628      	mov	r0, r5
 80078f6:	f7ff ff9d 	bl	8007834 <_fflush_r>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d0d9      	beq.n	80078b2 <__swbuf_r+0x2e>
 80078fe:	e7d6      	b.n	80078ae <__swbuf_r+0x2a>

08007900 <__swsetup_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4b29      	ldr	r3, [pc, #164]	@ (80079a8 <__swsetup_r+0xa8>)
 8007904:	4605      	mov	r5, r0
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	460c      	mov	r4, r1
 800790a:	b118      	cbz	r0, 8007914 <__swsetup_r+0x14>
 800790c:	6a03      	ldr	r3, [r0, #32]
 800790e:	b90b      	cbnz	r3, 8007914 <__swsetup_r+0x14>
 8007910:	f7fe f9e6 	bl	8005ce0 <__sinit>
 8007914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007918:	0719      	lsls	r1, r3, #28
 800791a:	d422      	bmi.n	8007962 <__swsetup_r+0x62>
 800791c:	06da      	lsls	r2, r3, #27
 800791e:	d407      	bmi.n	8007930 <__swsetup_r+0x30>
 8007920:	2209      	movs	r2, #9
 8007922:	602a      	str	r2, [r5, #0]
 8007924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	e033      	b.n	8007998 <__swsetup_r+0x98>
 8007930:	0758      	lsls	r0, r3, #29
 8007932:	d512      	bpl.n	800795a <__swsetup_r+0x5a>
 8007934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007936:	b141      	cbz	r1, 800794a <__swsetup_r+0x4a>
 8007938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800793c:	4299      	cmp	r1, r3
 800793e:	d002      	beq.n	8007946 <__swsetup_r+0x46>
 8007940:	4628      	mov	r0, r5
 8007942:	f7ff f939 	bl	8006bb8 <_free_r>
 8007946:	2300      	movs	r3, #0
 8007948:	6363      	str	r3, [r4, #52]	@ 0x34
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	2300      	movs	r3, #0
 8007954:	6063      	str	r3, [r4, #4]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f043 0308 	orr.w	r3, r3, #8
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	b94b      	cbnz	r3, 800797a <__swsetup_r+0x7a>
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800796c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007970:	d003      	beq.n	800797a <__swsetup_r+0x7a>
 8007972:	4621      	mov	r1, r4
 8007974:	4628      	mov	r0, r5
 8007976:	f000 f8c0 	bl	8007afa <__smakebuf_r>
 800797a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797e:	f013 0201 	ands.w	r2, r3, #1
 8007982:	d00a      	beq.n	800799a <__swsetup_r+0x9a>
 8007984:	2200      	movs	r2, #0
 8007986:	60a2      	str	r2, [r4, #8]
 8007988:	6962      	ldr	r2, [r4, #20]
 800798a:	4252      	negs	r2, r2
 800798c:	61a2      	str	r2, [r4, #24]
 800798e:	6922      	ldr	r2, [r4, #16]
 8007990:	b942      	cbnz	r2, 80079a4 <__swsetup_r+0xa4>
 8007992:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007996:	d1c5      	bne.n	8007924 <__swsetup_r+0x24>
 8007998:	bd38      	pop	{r3, r4, r5, pc}
 800799a:	0799      	lsls	r1, r3, #30
 800799c:	bf58      	it	pl
 800799e:	6962      	ldrpl	r2, [r4, #20]
 80079a0:	60a2      	str	r2, [r4, #8]
 80079a2:	e7f4      	b.n	800798e <__swsetup_r+0x8e>
 80079a4:	2000      	movs	r0, #0
 80079a6:	e7f7      	b.n	8007998 <__swsetup_r+0x98>
 80079a8:	2000001c 	.word	0x2000001c

080079ac <_sbrk_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	2300      	movs	r3, #0
 80079b0:	4d05      	ldr	r5, [pc, #20]	@ (80079c8 <_sbrk_r+0x1c>)
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7fa fed4 	bl	8002764 <_sbrk>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_sbrk_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_sbrk_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	200006d4 	.word	0x200006d4

080079cc <memcpy>:
 80079cc:	440a      	add	r2, r1
 80079ce:	4291      	cmp	r1, r2
 80079d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079d4:	d100      	bne.n	80079d8 <memcpy+0xc>
 80079d6:	4770      	bx	lr
 80079d8:	b510      	push	{r4, lr}
 80079da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079de:	4291      	cmp	r1, r2
 80079e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079e4:	d1f9      	bne.n	80079da <memcpy+0xe>
 80079e6:	bd10      	pop	{r4, pc}

080079e8 <__assert_func>:
 80079e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ea:	4614      	mov	r4, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <__assert_func+0x2c>)
 80079f0:	4605      	mov	r5, r0
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68d8      	ldr	r0, [r3, #12]
 80079f6:	b954      	cbnz	r4, 8007a0e <__assert_func+0x26>
 80079f8:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <__assert_func+0x30>)
 80079fa:	461c      	mov	r4, r3
 80079fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a00:	9100      	str	r1, [sp, #0]
 8007a02:	462b      	mov	r3, r5
 8007a04:	4905      	ldr	r1, [pc, #20]	@ (8007a1c <__assert_func+0x34>)
 8007a06:	f000 f841 	bl	8007a8c <fiprintf>
 8007a0a:	f000 f8d5 	bl	8007bb8 <abort>
 8007a0e:	4b04      	ldr	r3, [pc, #16]	@ (8007a20 <__assert_func+0x38>)
 8007a10:	e7f4      	b.n	80079fc <__assert_func+0x14>
 8007a12:	bf00      	nop
 8007a14:	2000001c 	.word	0x2000001c
 8007a18:	08007f06 	.word	0x08007f06
 8007a1c:	08007ed8 	.word	0x08007ed8
 8007a20:	08007ecb 	.word	0x08007ecb

08007a24 <_calloc_r>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	fba1 5402 	umull	r5, r4, r1, r2
 8007a2a:	b93c      	cbnz	r4, 8007a3c <_calloc_r+0x18>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7ff f935 	bl	8006c9c <_malloc_r>
 8007a32:	4606      	mov	r6, r0
 8007a34:	b928      	cbnz	r0, 8007a42 <_calloc_r+0x1e>
 8007a36:	2600      	movs	r6, #0
 8007a38:	4630      	mov	r0, r6
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	220c      	movs	r2, #12
 8007a3e:	6002      	str	r2, [r0, #0]
 8007a40:	e7f9      	b.n	8007a36 <_calloc_r+0x12>
 8007a42:	462a      	mov	r2, r5
 8007a44:	4621      	mov	r1, r4
 8007a46:	f7fe f9d6 	bl	8005df6 <memset>
 8007a4a:	e7f5      	b.n	8007a38 <_calloc_r+0x14>

08007a4c <__ascii_mbtowc>:
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	b901      	cbnz	r1, 8007a52 <__ascii_mbtowc+0x6>
 8007a50:	a901      	add	r1, sp, #4
 8007a52:	b142      	cbz	r2, 8007a66 <__ascii_mbtowc+0x1a>
 8007a54:	b14b      	cbz	r3, 8007a6a <__ascii_mbtowc+0x1e>
 8007a56:	7813      	ldrb	r3, [r2, #0]
 8007a58:	600b      	str	r3, [r1, #0]
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	1e10      	subs	r0, r2, #0
 8007a5e:	bf18      	it	ne
 8007a60:	2001      	movne	r0, #1
 8007a62:	b002      	add	sp, #8
 8007a64:	4770      	bx	lr
 8007a66:	4610      	mov	r0, r2
 8007a68:	e7fb      	b.n	8007a62 <__ascii_mbtowc+0x16>
 8007a6a:	f06f 0001 	mvn.w	r0, #1
 8007a6e:	e7f8      	b.n	8007a62 <__ascii_mbtowc+0x16>

08007a70 <__ascii_wctomb>:
 8007a70:	4603      	mov	r3, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	b141      	cbz	r1, 8007a88 <__ascii_wctomb+0x18>
 8007a76:	2aff      	cmp	r2, #255	@ 0xff
 8007a78:	d904      	bls.n	8007a84 <__ascii_wctomb+0x14>
 8007a7a:	228a      	movs	r2, #138	@ 0x8a
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	4770      	bx	lr
 8007a84:	2001      	movs	r0, #1
 8007a86:	700a      	strb	r2, [r1, #0]
 8007a88:	4770      	bx	lr
	...

08007a8c <fiprintf>:
 8007a8c:	b40e      	push	{r1, r2, r3}
 8007a8e:	b503      	push	{r0, r1, lr}
 8007a90:	4601      	mov	r1, r0
 8007a92:	ab03      	add	r3, sp, #12
 8007a94:	4805      	ldr	r0, [pc, #20]	@ (8007aac <fiprintf+0x20>)
 8007a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	f7ff fd31 	bl	8007504 <_vfiprintf_r>
 8007aa2:	b002      	add	sp, #8
 8007aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa8:	b003      	add	sp, #12
 8007aaa:	4770      	bx	lr
 8007aac:	2000001c 	.word	0x2000001c

08007ab0 <__swhatbuf_r>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab8:	4615      	mov	r5, r2
 8007aba:	2900      	cmp	r1, #0
 8007abc:	461e      	mov	r6, r3
 8007abe:	b096      	sub	sp, #88	@ 0x58
 8007ac0:	da0c      	bge.n	8007adc <__swhatbuf_r+0x2c>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007aca:	bf14      	ite	ne
 8007acc:	2340      	movne	r3, #64	@ 0x40
 8007ace:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	6031      	str	r1, [r6, #0]
 8007ad6:	602b      	str	r3, [r5, #0]
 8007ad8:	b016      	add	sp, #88	@ 0x58
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	466a      	mov	r2, sp
 8007ade:	f000 f849 	bl	8007b74 <_fstat_r>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	dbed      	blt.n	8007ac2 <__swhatbuf_r+0x12>
 8007ae6:	9901      	ldr	r1, [sp, #4]
 8007ae8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007af0:	4259      	negs	r1, r3
 8007af2:	4159      	adcs	r1, r3
 8007af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007af8:	e7eb      	b.n	8007ad2 <__swhatbuf_r+0x22>

08007afa <__smakebuf_r>:
 8007afa:	898b      	ldrh	r3, [r1, #12]
 8007afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007afe:	079d      	lsls	r5, r3, #30
 8007b00:	4606      	mov	r6, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	d507      	bpl.n	8007b16 <__smakebuf_r+0x1c>
 8007b06:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	2301      	movs	r3, #1
 8007b10:	6163      	str	r3, [r4, #20]
 8007b12:	b003      	add	sp, #12
 8007b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b16:	466a      	mov	r2, sp
 8007b18:	ab01      	add	r3, sp, #4
 8007b1a:	f7ff ffc9 	bl	8007ab0 <__swhatbuf_r>
 8007b1e:	9f00      	ldr	r7, [sp, #0]
 8007b20:	4605      	mov	r5, r0
 8007b22:	4639      	mov	r1, r7
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7ff f8b9 	bl	8006c9c <_malloc_r>
 8007b2a:	b948      	cbnz	r0, 8007b40 <__smakebuf_r+0x46>
 8007b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b30:	059a      	lsls	r2, r3, #22
 8007b32:	d4ee      	bmi.n	8007b12 <__smakebuf_r+0x18>
 8007b34:	f023 0303 	bic.w	r3, r3, #3
 8007b38:	f043 0302 	orr.w	r3, r3, #2
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	e7e2      	b.n	8007b06 <__smakebuf_r+0xc>
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	6020      	str	r0, [r4, #0]
 8007b50:	b15b      	cbz	r3, 8007b6a <__smakebuf_r+0x70>
 8007b52:	4630      	mov	r0, r6
 8007b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b58:	f000 f81e 	bl	8007b98 <_isatty_r>
 8007b5c:	b128      	cbz	r0, 8007b6a <__smakebuf_r+0x70>
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	f043 0301 	orr.w	r3, r3, #1
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	431d      	orrs	r5, r3
 8007b6e:	81a5      	strh	r5, [r4, #12]
 8007b70:	e7cf      	b.n	8007b12 <__smakebuf_r+0x18>
	...

08007b74 <_fstat_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	2300      	movs	r3, #0
 8007b78:	4d06      	ldr	r5, [pc, #24]	@ (8007b94 <_fstat_r+0x20>)
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	f7fa fde6 	bl	8002752 <_fstat>
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	d102      	bne.n	8007b90 <_fstat_r+0x1c>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	b103      	cbz	r3, 8007b90 <_fstat_r+0x1c>
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	bd38      	pop	{r3, r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	200006d4 	.word	0x200006d4

08007b98 <_isatty_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4d05      	ldr	r5, [pc, #20]	@ (8007bb4 <_isatty_r+0x1c>)
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	f7fa fdda 	bl	800275c <_isatty>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_isatty_r+0x1a>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_isatty_r+0x1a>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	200006d4 	.word	0x200006d4

08007bb8 <abort>:
 8007bb8:	2006      	movs	r0, #6
 8007bba:	b508      	push	{r3, lr}
 8007bbc:	f000 f82c 	bl	8007c18 <raise>
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	f7fa fdad 	bl	8002720 <_exit>

08007bc6 <_raise_r>:
 8007bc6:	291f      	cmp	r1, #31
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4605      	mov	r5, r0
 8007bcc:	460c      	mov	r4, r1
 8007bce:	d904      	bls.n	8007bda <_raise_r+0x14>
 8007bd0:	2316      	movs	r3, #22
 8007bd2:	6003      	str	r3, [r0, #0]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	bd38      	pop	{r3, r4, r5, pc}
 8007bda:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bdc:	b112      	cbz	r2, 8007be4 <_raise_r+0x1e>
 8007bde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007be2:	b94b      	cbnz	r3, 8007bf8 <_raise_r+0x32>
 8007be4:	4628      	mov	r0, r5
 8007be6:	f000 f831 	bl	8007c4c <_getpid_r>
 8007bea:	4622      	mov	r2, r4
 8007bec:	4601      	mov	r1, r0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf4:	f000 b818 	b.w	8007c28 <_kill_r>
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d00a      	beq.n	8007c12 <_raise_r+0x4c>
 8007bfc:	1c59      	adds	r1, r3, #1
 8007bfe:	d103      	bne.n	8007c08 <_raise_r+0x42>
 8007c00:	2316      	movs	r3, #22
 8007c02:	6003      	str	r3, [r0, #0]
 8007c04:	2001      	movs	r0, #1
 8007c06:	e7e7      	b.n	8007bd8 <_raise_r+0x12>
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c10:	4798      	blx	r3
 8007c12:	2000      	movs	r0, #0
 8007c14:	e7e0      	b.n	8007bd8 <_raise_r+0x12>
	...

08007c18 <raise>:
 8007c18:	4b02      	ldr	r3, [pc, #8]	@ (8007c24 <raise+0xc>)
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	f7ff bfd2 	b.w	8007bc6 <_raise_r>
 8007c22:	bf00      	nop
 8007c24:	2000001c 	.word	0x2000001c

08007c28 <_kill_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4d06      	ldr	r5, [pc, #24]	@ (8007c48 <_kill_r+0x20>)
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	4611      	mov	r1, r2
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	f7fa fd6b 	bl	8002710 <_kill>
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	d102      	bne.n	8007c44 <_kill_r+0x1c>
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	b103      	cbz	r3, 8007c44 <_kill_r+0x1c>
 8007c42:	6023      	str	r3, [r4, #0]
 8007c44:	bd38      	pop	{r3, r4, r5, pc}
 8007c46:	bf00      	nop
 8007c48:	200006d4 	.word	0x200006d4

08007c4c <_getpid_r>:
 8007c4c:	f7fa bd5e 	b.w	800270c <_getpid>

08007c50 <_init>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	bf00      	nop
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr

08007c5c <_fini>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	bf00      	nop
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr
