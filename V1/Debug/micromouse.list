
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004ebc  08004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee8  08004ee8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ee8  08004ee8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ee8  08004ee8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee8  08004ee8  00005ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004eec  08004eec  00005eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ef0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08004efc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004efc  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e329  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002461  00000000  00000000  0001435e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  000167c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b26  00000000  00000000  00017620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c43  00000000  00000000  00018146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119df  00000000  00000000  00030d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6c5  00000000  00000000  00042768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1e2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c40  00000000  00000000  000d1e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000d5ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ea4 	.word	0x08004ea4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004ea4 	.word	0x08004ea4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <SpeedStatus>:
void Turn_L()
{

}
void SpeedStatus()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	leftEncoder5ms += leftEncoderchange;
 8000e4c:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <SpeedStatus+0x128>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fe55 	bl	8000b00 <__aeabi_i2f>
 8000e56:	4602      	mov	r2, r0
 8000e58:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <SpeedStatus+0x12c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4610      	mov	r0, r2
 8000e60:	f7ff fd9a 	bl	8000998 <__addsf3>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b42      	ldr	r3, [pc, #264]	@ (8000f74 <SpeedStatus+0x12c>)
 8000e6a:	601a      	str	r2, [r3, #0]
	rightEncoder5ms += rightEncoderchange;
 8000e6c:	4b42      	ldr	r3, [pc, #264]	@ (8000f78 <SpeedStatus+0x130>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fe45 	bl	8000b00 <__aeabi_i2f>
 8000e76:	4602      	mov	r2, r0
 8000e78:	4b40      	ldr	r3, [pc, #256]	@ (8000f7c <SpeedStatus+0x134>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4610      	mov	r0, r2
 8000e80:	f7ff fd8a 	bl	8000998 <__addsf3>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b3c      	ldr	r3, [pc, #240]	@ (8000f7c <SpeedStatus+0x134>)
 8000e8a:	601a      	str	r2, [r3, #0]
	if(Millis - oldTime >= 100){
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f80 <SpeedStatus+0x138>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <SpeedStatus+0x13c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b63      	cmp	r3, #99	@ 0x63
 8000e98:	d943      	bls.n	8000f22 <SpeedStatus+0xda>
		SpeedL = leftEncoder5ms * PULSE_MM * 10;
 8000e9a:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <SpeedStatus+0x12c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff faba 	bl	8000418 <__aeabi_f2d>
 8000ea4:	a330      	add	r3, pc, #192	@ (adr r3, 8000f68 <SpeedStatus+0x120>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fb0d 	bl	80004c8 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	4b33      	ldr	r3, [pc, #204]	@ (8000f88 <SpeedStatus+0x140>)
 8000ebc:	f7ff fb04 	bl	80004c8 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff fd10 	bl	80008ec <__aeabi_d2f>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a2f      	ldr	r2, [pc, #188]	@ (8000f8c <SpeedStatus+0x144>)
 8000ed0:	6013      	str	r3, [r2, #0]
		SpeedR = rightEncoder5ms * PULSE_MM * 10;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <SpeedStatus+0x134>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fa9e 	bl	8000418 <__aeabi_f2d>
 8000edc:	a322      	add	r3, pc, #136	@ (adr r3, 8000f68 <SpeedStatus+0x120>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f7ff faf1 	bl	80004c8 <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <SpeedStatus+0x140>)
 8000ef4:	f7ff fae8 	bl	80004c8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f7ff fcf4 	bl	80008ec <__aeabi_d2f>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a22      	ldr	r2, [pc, #136]	@ (8000f90 <SpeedStatus+0x148>)
 8000f08:	6013      	str	r3, [r2, #0]
		oldTime = Millis;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <SpeedStatus+0x138>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <SpeedStatus+0x13c>)
 8000f10:	6013      	str	r3, [r2, #0]
		leftEncoder5ms = 0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <SpeedStatus+0x12c>)
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
		rightEncoder5ms = 0;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <SpeedStatus+0x134>)
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	}
	curSpeedX = (SpeedL + SpeedR) / 2;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <SpeedStatus+0x144>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1a      	ldr	r2, [pc, #104]	@ (8000f90 <SpeedStatus+0x148>)
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fd33 	bl	8000998 <__addsf3>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fee9 	bl	8000d10 <__aeabi_fdiv>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <SpeedStatus+0x14c>)
 8000f44:	601a      	str	r2, [r3, #0]
	wErrorLR = SpeedR - SpeedL;
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <SpeedStatus+0x148>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a10      	ldr	r2, [pc, #64]	@ (8000f8c <SpeedStatus+0x144>)
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fd1f 	bl	8000994 <__aeabi_fsub>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <SpeedStatus+0x150>)
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	f3af 8000 	nop.w
 8000f68:	94af4f0e 	.word	0x94af4f0e
 8000f6c:	3fb38865 	.word	0x3fb38865
 8000f70:	20000058 	.word	0x20000058
 8000f74:	20000030 	.word	0x20000030
 8000f78:	2000005c 	.word	0x2000005c
 8000f7c:	20000034 	.word	0x20000034
 8000f80:	2000007c 	.word	0x2000007c
 8000f84:	20000080 	.word	0x20000080
 8000f88:	40240000 	.word	0x40240000
 8000f8c:	20000028 	.word	0x20000028
 8000f90:	2000002c 	.word	0x2000002c
 8000f94:	2000003c 	.word	0x2000003c
 8000f98:	20000038 	.word	0x20000038

08000f9c <resetIR>:
int32_t rightEncoderOld;
int32_t sum = 0;
float IR_data[4];

void resetIR()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2180      	movs	r1, #128	@ 0x80
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <resetIR+0x30>)
 8000fa6:	f002 f88b 	bl	80030c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2140      	movs	r1, #64	@ 0x40
 8000fae:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <resetIR+0x30>)
 8000fb0:	f002 f886 	bl	80030c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <resetIR+0x30>)
 8000fba:	f002 f881 	bl	80030c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <resetIR+0x34>)
 8000fc4:	f002 f87c 	bl	80030c0 <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <resetEN>:
void resetEN()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	@ 0x64
 8000fda:	f001 f801 	bl	8001fe0 <HAL_Delay>
	en_value1 = 0;
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <resetEN+0x60>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
	en_value2 = 0;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <resetEN+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
	TIM2->CNT = 0;
 8000fea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = 0;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <resetEN+0x68>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	@ 0x24
	leftEncoderchange = 0;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <resetEN+0x6c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
	rightEncoderchange = 0;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <resetEN+0x70>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
	encoderChange = 0;
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <resetEN+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
	leftEncodercount = 0;
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <resetEN+0x78>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
	rightEncodercount = 0;
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <resetEN+0x7c>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
	encoderCount = 0;
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <resetEN+0x80>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
	distanceLeft = 0;
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <resetEN+0x84>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
	leftEncoderOld = 0;
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <resetEN+0x88>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
	rightEncoderOld = 0;
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <resetEN+0x8c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000040 	.word	0x20000040
 8001038:	20000044 	.word	0x20000044
 800103c:	40000400 	.word	0x40000400
 8001040:	20000058 	.word	0x20000058
 8001044:	2000005c 	.word	0x2000005c
 8001048:	20000060 	.word	0x20000060
 800104c:	20000064 	.word	0x20000064
 8001050:	20000068 	.word	0x20000068
 8001054:	2000006c 	.word	0x2000006c
 8001058:	20000070 	.word	0x20000070
 800105c:	20000074 	.word	0x20000074
 8001060:	20000078 	.word	0x20000078

08001064 <EncoderStatus>:
void EncoderStatus()
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	en_value1 = (TIM2->CNT);
 8001068:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	4a2c      	ldr	r2, [pc, #176]	@ (8001120 <EncoderStatus+0xbc>)
 8001070:	6013      	str	r3, [r2, #0]
	en_value2 = (TIM3->CNT);
 8001072:	4b2c      	ldr	r3, [pc, #176]	@ (8001124 <EncoderStatus+0xc0>)
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	4a2c      	ldr	r2, [pc, #176]	@ (8001128 <EncoderStatus+0xc4>)
 8001078:	6013      	str	r3, [r2, #0]
	if(en_value1 >= leftEncoderOld) {leftEncoderchange = en_value1 - leftEncoderOld;}
 800107a:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <EncoderStatus+0xbc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2b      	ldr	r2, [pc, #172]	@ (800112c <EncoderStatus+0xc8>)
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	4293      	cmp	r3, r2
 8001084:	d308      	bcc.n	8001098 <EncoderStatus+0x34>
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <EncoderStatus+0xbc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a28      	ldr	r2, [pc, #160]	@ (800112c <EncoderStatus+0xc8>)
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	461a      	mov	r2, r3
 8001092:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <EncoderStatus+0xcc>)
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e004      	b.n	80010a2 <EncoderStatus+0x3e>
	else {leftEncoderchange = en_value1;}
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <EncoderStatus+0xbc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <EncoderStatus+0xcc>)
 80010a0:	601a      	str	r2, [r3, #0]
	if(en_value2 >= rightEncoderOld) {rightEncoderchange = en_value2 - rightEncoderOld;}
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <EncoderStatus+0xc4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a23      	ldr	r2, [pc, #140]	@ (8001134 <EncoderStatus+0xd0>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d308      	bcc.n	80010c0 <EncoderStatus+0x5c>
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <EncoderStatus+0xc4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a20      	ldr	r2, [pc, #128]	@ (8001134 <EncoderStatus+0xd0>)
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <EncoderStatus+0xd4>)
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e004      	b.n	80010ca <EncoderStatus+0x66>
	else {rightEncoderchange = en_value2;}
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <EncoderStatus+0xc4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <EncoderStatus+0xd4>)
 80010c8:	601a      	str	r2, [r3, #0]
	encoderChange = (leftEncoderchange + rightEncoderchange) / 2;
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <EncoderStatus+0xcc>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <EncoderStatus+0xd4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	0fda      	lsrs	r2, r3, #31
 80010d6:	4413      	add	r3, r2
 80010d8:	105b      	asrs	r3, r3, #1
 80010da:	461a      	mov	r2, r3
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <EncoderStatus+0xd8>)
 80010de:	601a      	str	r2, [r3, #0]

	//	leftEncodercount = leftEncoderchange;
	//	rightEncodercount = rightEncoderchange;
	encoderCount += (leftEncoderchange + rightEncoderchange) ;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <EncoderStatus+0xcc>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <EncoderStatus+0xd4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	441a      	add	r2, r3
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <EncoderStatus+0xdc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <EncoderStatus+0xdc>)
 80010f2:	6013      	str	r3, [r2, #0]

	distanceLeft -= encoderChange;
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <EncoderStatus+0xe0>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <EncoderStatus+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	4a11      	ldr	r2, [pc, #68]	@ (8001144 <EncoderStatus+0xe0>)
 8001100:	6013      	str	r3, [r2, #0]
	leftEncoderOld = TIM2->CNT;
 8001102:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	461a      	mov	r2, r3
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <EncoderStatus+0xc8>)
 800110c:	601a      	str	r2, [r3, #0]
	rightEncoderOld = TIM3->CNT;
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <EncoderStatus+0xc0>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	461a      	mov	r2, r3
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <EncoderStatus+0xd0>)
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	20000040 	.word	0x20000040
 8001124:	40000400 	.word	0x40000400
 8001128:	20000044 	.word	0x20000044
 800112c:	20000074 	.word	0x20000074
 8001130:	20000058 	.word	0x20000058
 8001134:	20000078 	.word	0x20000078
 8001138:	2000005c 	.word	0x2000005c
 800113c:	20000060 	.word	0x20000060
 8001140:	2000006c 	.word	0x2000006c
 8001144:	20000070 	.word	0x20000070

08001148 <delay_s>:
uint32_t Millis = 0;
uint32_t oldTime = 0;
uint32_t Millis2 = 0;

void delay_s(int32_t time)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	Millis2 = 0;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <delay_s+0x28>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
	while(Millis2 < time){}
 8001156:	bf00      	nop
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <delay_s+0x28>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	d3fa      	bcc.n	8001158 <delay_s+0x10>
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000084 	.word	0x20000084

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f000 fed0 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 f870 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001180:	f000 fb34 	bl	80017ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001184:	f000 fb14 	bl	80017b0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001188:	f000 f92c 	bl	80013e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800118c:	f000 f9f0 	bl	8001570 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001190:	f000 fa42 	bl	8001618 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001194:	f000 f8bc 	bl	8001310 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001198:	f000 fa92 	bl	80016c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800119c:	f000 fade 	bl	800175c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//begin variable


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4826      	ldr	r0, [pc, #152]	@ (800123c <main+0xc8>)
 80011a4:	f002 fd7c 	bl	8003ca0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011a8:	2104      	movs	r1, #4
 80011aa:	4824      	ldr	r0, [pc, #144]	@ (800123c <main+0xc8>)
 80011ac:	f002 fd78 	bl	8003ca0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011b0:	2108      	movs	r1, #8
 80011b2:	4822      	ldr	r0, [pc, #136]	@ (800123c <main+0xc8>)
 80011b4:	f002 fd74 	bl	8003ca0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011b8:	210c      	movs	r1, #12
 80011ba:	4820      	ldr	r0, [pc, #128]	@ (800123c <main+0xc8>)
 80011bc:	f002 fd70 	bl	8003ca0 <HAL_TIM_PWM_Start>

	TIM1->CCR1 = 0;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <main+0xcc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <main+0xcc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <main+0xcc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->CCR4 = 0;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <main+0xcc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80011d8:	213c      	movs	r1, #60	@ 0x3c
 80011da:	481a      	ldr	r0, [pc, #104]	@ (8001244 <main+0xd0>)
 80011dc:	f002 fea4 	bl	8003f28 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80011e0:	213c      	movs	r1, #60	@ 0x3c
 80011e2:	4819      	ldr	r0, [pc, #100]	@ (8001248 <main+0xd4>)
 80011e4:	f002 fea0 	bl	8003f28 <HAL_TIM_Encoder_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 4);
 80011e8:	2204      	movs	r2, #4
 80011ea:	4918      	ldr	r1, [pc, #96]	@ (800124c <main+0xd8>)
 80011ec:	4818      	ldr	r0, [pc, #96]	@ (8001250 <main+0xdc>)
 80011ee:	f000 fff3 	bl	80021d8 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f8:	4816      	ldr	r0, [pc, #88]	@ (8001254 <main+0xe0>)
 80011fa:	f001 ff61 	bl	80030c0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	2180      	movs	r1, #128	@ 0x80
 8001202:	4815      	ldr	r0, [pc, #84]	@ (8001258 <main+0xe4>)
 8001204:	f001 ff5c 	bl	80030c0 <HAL_GPIO_WritePin>
	while(ADC_VAL[2] <= 3000) {}
 8001208:	bf00      	nop
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <main+0xd8>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001212:	4293      	cmp	r3, r2
 8001214:	d9f9      	bls.n	800120a <main+0x96>
	resetIR();
 8001216:	f7ff fec1 	bl	8000f9c <resetIR>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <main+0xe0>)
 8001222:	f001 ff4d 	bl	80030c0 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim4);
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <main+0xe8>)
 8001228:	f002 fc90 	bl	8003b4c <HAL_TIM_Base_Start_IT>
	delay_s(4000);
 800122c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001230:	f7ff ff8a 	bl	8001148 <delay_s>
	resetEN();
 8001234:	f7ff fece 	bl	8000fd4 <resetEN>
//	Stop();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <main+0xc4>
 800123c:	20000100 	.word	0x20000100
 8001240:	40012c00 	.word	0x40012c00
 8001244:	20000148 	.word	0x20000148
 8001248:	20000190 	.word	0x20000190
 800124c:	20000048 	.word	0x20000048
 8001250:	2000008c 	.word	0x2000008c
 8001254:	40011000 	.word	0x40011000
 8001258:	40010800 	.word	0x40010800
 800125c:	200001d8 	.word	0x200001d8

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	@ 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800126a:	2228      	movs	r2, #40	@ 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fdec 	bl	8004e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012a0:	2300      	movs	r3, #0
 80012a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012a4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80012a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 ff36 	bl	8003120 <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80012ba:	f000 fb81 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2102      	movs	r1, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 f9a2 	bl	8003624 <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012e6:	f000 fb6b 	bl	80019c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ea:	2302      	movs	r3, #2
 80012ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80012ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fb22 	bl	8003940 <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001302:	f000 fb5d 	bl	80019c0 <Error_Handler>
  }
}
 8001306:	bf00      	nop
 8001308:	3750      	adds	r7, #80	@ 0x50
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <MX_ADC1_Init+0xcc>)
 8001322:	4a2f      	ldr	r2, [pc, #188]	@ (80013e0 <MX_ADC1_Init+0xd0>)
 8001324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001326:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <MX_ADC1_Init+0xcc>)
 8001328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800132c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800132e:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <MX_ADC1_Init+0xcc>)
 8001330:	2201      	movs	r2, #1
 8001332:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001334:	4b29      	ldr	r3, [pc, #164]	@ (80013dc <MX_ADC1_Init+0xcc>)
 8001336:	2200      	movs	r2, #0
 8001338:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133a:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <MX_ADC1_Init+0xcc>)
 800133c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <MX_ADC1_Init+0xcc>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001348:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <MX_ADC1_Init+0xcc>)
 800134a:	2204      	movs	r2, #4
 800134c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134e:	4823      	ldr	r0, [pc, #140]	@ (80013dc <MX_ADC1_Init+0xcc>)
 8001350:	f000 fe6a 	bl	8002028 <HAL_ADC_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800135a:	f000 fb31 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800135e:	2301      	movs	r3, #1
 8001360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001362:	2301      	movs	r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001366:	2307      	movs	r3, #7
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	481b      	ldr	r0, [pc, #108]	@ (80013dc <MX_ADC1_Init+0xcc>)
 8001370:	f001 f82c 	bl	80023cc <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800137a:	f000 fb21 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800137e:	2302      	movs	r3, #2
 8001380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001382:	2302      	movs	r3, #2
 8001384:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4814      	ldr	r0, [pc, #80]	@ (80013dc <MX_ADC1_Init+0xcc>)
 800138c:	f001 f81e 	bl	80023cc <HAL_ADC_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001396:	f000 fb13 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800139a:	2303      	movs	r3, #3
 800139c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800139e:	2303      	movs	r3, #3
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	@ (80013dc <MX_ADC1_Init+0xcc>)
 80013a8:	f001 f810 	bl	80023cc <HAL_ADC_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80013b2:	f000 fb05 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013b6:	2304      	movs	r3, #4
 80013b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013ba:	2304      	movs	r3, #4
 80013bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	@ (80013dc <MX_ADC1_Init+0xcc>)
 80013c4:	f001 f802 	bl	80023cc <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80013ce:	f000 faf7 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000008c 	.word	0x2000008c
 80013e0:	40012400 	.word	0x40012400

080013e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b096      	sub	sp, #88	@ 0x58
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2220      	movs	r2, #32
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f003 fd15 	bl	8004e4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001422:	4b51      	ldr	r3, [pc, #324]	@ (8001568 <MX_TIM1_Init+0x184>)
 8001424:	4a51      	ldr	r2, [pc, #324]	@ (800156c <MX_TIM1_Init+0x188>)
 8001426:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400- 1;
 8001428:	4b4f      	ldr	r3, [pc, #316]	@ (8001568 <MX_TIM1_Init+0x184>)
 800142a:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800142e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b4d      	ldr	r3, [pc, #308]	@ (8001568 <MX_TIM1_Init+0x184>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001436:	4b4c      	ldr	r3, [pc, #304]	@ (8001568 <MX_TIM1_Init+0x184>)
 8001438:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800143c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b4a      	ldr	r3, [pc, #296]	@ (8001568 <MX_TIM1_Init+0x184>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001444:	4b48      	ldr	r3, [pc, #288]	@ (8001568 <MX_TIM1_Init+0x184>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800144a:	4b47      	ldr	r3, [pc, #284]	@ (8001568 <MX_TIM1_Init+0x184>)
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001450:	4845      	ldr	r0, [pc, #276]	@ (8001568 <MX_TIM1_Init+0x184>)
 8001452:	f002 fb2b 	bl	8003aac <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800145c:	f000 fab0 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001460:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001464:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001466:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800146a:	4619      	mov	r1, r3
 800146c:	483e      	ldr	r0, [pc, #248]	@ (8001568 <MX_TIM1_Init+0x184>)
 800146e:	f002 ffbb 	bl	80043e8 <HAL_TIM_ConfigClockSource>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001478:	f000 faa2 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800147c:	483a      	ldr	r0, [pc, #232]	@ (8001568 <MX_TIM1_Init+0x184>)
 800147e:	f002 fbb7 	bl	8003bf0 <HAL_TIM_PWM_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001488:	f000 fa9a 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001494:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001498:	4619      	mov	r1, r3
 800149a:	4833      	ldr	r0, [pc, #204]	@ (8001568 <MX_TIM1_Init+0x184>)
 800149c:	f003 fb36 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80014a6:	f000 fa8b 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014aa:	2360      	movs	r3, #96	@ 0x60
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014b6:	2300      	movs	r3, #0
 80014b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4826      	ldr	r0, [pc, #152]	@ (8001568 <MX_TIM1_Init+0x184>)
 80014d0:	f002 fec8 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80014da:	f000 fa71 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e2:	2204      	movs	r2, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4820      	ldr	r0, [pc, #128]	@ (8001568 <MX_TIM1_Init+0x184>)
 80014e8:	f002 febc 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80014f2:	f000 fa65 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fa:	2208      	movs	r2, #8
 80014fc:	4619      	mov	r1, r3
 80014fe:	481a      	ldr	r0, [pc, #104]	@ (8001568 <MX_TIM1_Init+0x184>)
 8001500:	f002 feb0 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800150a:	f000 fa59 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800150e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001512:	220c      	movs	r2, #12
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	@ (8001568 <MX_TIM1_Init+0x184>)
 8001518:	f002 fea4 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001522:	f000 fa4d 	bl	80019c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800153a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	@ (8001568 <MX_TIM1_Init+0x184>)
 800154a:	f003 fb3d 	bl	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001554:	f000 fa34 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001558:	4803      	ldr	r0, [pc, #12]	@ (8001568 <MX_TIM1_Init+0x184>)
 800155a:	f000 fbc5 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3758      	adds	r7, #88	@ 0x58
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000100 	.word	0x20000100
 800156c:	40012c00 	.word	0x40012c00

08001570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2224      	movs	r2, #36	@ 0x24
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fc64 	bl	8004e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158c:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <MX_TIM2_Init+0xa4>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001594:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <MX_TIM2_Init+0xa4>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <MX_TIM2_Init+0xa4>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015b4:	2303      	movs	r3, #3
 80015b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015bc:	2301      	movs	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015cc:	2301      	movs	r3, #1
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015e0:	f002 fc00 	bl	8003de4 <HAL_TIM_Encoder_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015ea:	f000 f9e9 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015fc:	f003 fa86 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001606:	f000 f9db 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3730      	adds	r7, #48	@ 0x30
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000148 	.word	0x20000148

08001618 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2224      	movs	r2, #36	@ 0x24
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fc10 	bl	8004e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001634:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <MX_TIM3_Init+0xa0>)
 8001636:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <MX_TIM3_Init+0xa4>)
 8001638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800163a:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <MX_TIM3_Init+0xa0>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <MX_TIM3_Init+0xa0>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <MX_TIM3_Init+0xa0>)
 8001648:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800164c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <MX_TIM3_Init+0xa0>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <MX_TIM3_Init+0xa0>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800165a:	2303      	movs	r3, #3
 800165c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800166e:	2302      	movs	r3, #2
 8001670:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001672:	2301      	movs	r3, #1
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4619      	mov	r1, r3
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <MX_TIM3_Init+0xa0>)
 8001686:	f002 fbad 	bl	8003de4 <HAL_TIM_Encoder_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001690:	f000 f996 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_TIM3_Init+0xa0>)
 80016a2:	f003 fa33 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016ac:	f000 f988 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3730      	adds	r7, #48	@ 0x30
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000190 	.word	0x20000190
 80016bc:	40000400 	.word	0x40000400

080016c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_TIM4_Init+0x94>)
 80016de:	4a1e      	ldr	r2, [pc, #120]	@ (8001758 <MX_TIM4_Init+0x98>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <MX_TIM4_Init+0x94>)
 80016e4:	223f      	movs	r2, #63	@ 0x3f
 80016e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_TIM4_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 -1;
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <MX_TIM4_Init+0x94>)
 80016f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <MX_TIM4_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_TIM4_Init+0x94>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001702:	4814      	ldr	r0, [pc, #80]	@ (8001754 <MX_TIM4_Init+0x94>)
 8001704:	f002 f9d2 	bl	8003aac <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800170e:	f000 f957 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001716:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4619      	mov	r1, r3
 800171e:	480d      	ldr	r0, [pc, #52]	@ (8001754 <MX_TIM4_Init+0x94>)
 8001720:	f002 fe62 	bl	80043e8 <HAL_TIM_ConfigClockSource>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800172a:	f000 f949 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	@ (8001754 <MX_TIM4_Init+0x94>)
 800173c:	f003 f9e6 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001746:	f000 f93b 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001d8 	.word	0x200001d8
 8001758:	40000800 	.word	0x40000800

0800175c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <MX_USART1_UART_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001768:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800176c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001782:	2208      	movs	r2, #8
 8001784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001794:	f003 fa7b 	bl	8004c8e <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800179e:	f000 f90f 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000220 	.word	0x20000220
 80017ac:	40013800 	.word	0x40013800

080017b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017b6:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <MX_DMA_Init+0x38>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	4a0b      	ldr	r2, [pc, #44]	@ (80017e8 <MX_DMA_Init+0x38>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6153      	str	r3, [r2, #20]
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <MX_DMA_Init+0x38>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	200b      	movs	r0, #11
 80017d4:	f001 f8cb 	bl	800296e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017d8:	200b      	movs	r0, #11
 80017da:	f001 f8e4 	bl	80029a6 <HAL_NVIC_EnableIRQ>

}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <MX_GPIO_Init+0x104>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a3a      	ldr	r2, [pc, #232]	@ (80018f0 <MX_GPIO_Init+0x104>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b38      	ldr	r3, [pc, #224]	@ (80018f0 <MX_GPIO_Init+0x104>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <MX_GPIO_Init+0x104>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a34      	ldr	r2, [pc, #208]	@ (80018f0 <MX_GPIO_Init+0x104>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <MX_GPIO_Init+0x104>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <MX_GPIO_Init+0x104>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a2e      	ldr	r2, [pc, #184]	@ (80018f0 <MX_GPIO_Init+0x104>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <MX_GPIO_Init+0x104>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800184e:	4829      	ldr	r0, [pc, #164]	@ (80018f4 <MX_GPIO_Init+0x108>)
 8001850:	f001 fc36 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	21e0      	movs	r1, #224	@ 0xe0
 8001858:	4827      	ldr	r0, [pc, #156]	@ (80018f8 <MX_GPIO_Init+0x10c>)
 800185a:	f001 fc31 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	4826      	ldr	r0, [pc, #152]	@ (80018fc <MX_GPIO_Init+0x110>)
 8001864:	f001 fc2c 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2302      	movs	r3, #2
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	481c      	ldr	r0, [pc, #112]	@ (80018f4 <MX_GPIO_Init+0x108>)
 8001882:	f001 fa99 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001886:	23e0      	movs	r3, #224	@ 0xe0
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	4816      	ldr	r0, [pc, #88]	@ (80018f8 <MX_GPIO_Init+0x10c>)
 800189e:	f001 fa8b 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a2:	2301      	movs	r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	4810      	ldr	r0, [pc, #64]	@ (80018fc <MX_GPIO_Init+0x110>)
 80018ba:	f001 fa7d 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80018be:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_GPIO_Init+0x114>)
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4619      	mov	r1, r3
 80018d2:	480a      	ldr	r0, [pc, #40]	@ (80018fc <MX_GPIO_Init+0x110>)
 80018d4:	f001 fa70 	bl	8002db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2028      	movs	r0, #40	@ 0x28
 80018de:	f001 f846 	bl	800296e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e2:	2028      	movs	r0, #40	@ 0x28
 80018e4:	f001 f85f 	bl	80029a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e8:	bf00      	nop
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40011000 	.word	0x40011000
 80018f8:	40010800 	.word	0x40010800
 80018fc:	40010c00 	.word	0x40010c00
 8001900:	10210000 	.word	0x10210000

08001904 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d104      	bne.n	8001922 <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		en_value1 = TIM2->CNT;
 8001918:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	4a09      	ldr	r2, [pc, #36]	@ (8001944 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001920:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == htim3.Instance)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d103      	bne.n	8001936 <HAL_TIM_IC_CaptureCallback+0x32>
	{
		en_value2 = TIM3->CNT;
 800192e:	4b07      	ldr	r3, [pc, #28]	@ (800194c <HAL_TIM_IC_CaptureCallback+0x48>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001934:	6013      	str	r3, [r2, #0]
	}

}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000148 	.word	0x20000148
 8001944:	20000040 	.word	0x20000040
 8001948:	20000190 	.word	0x20000190
 800194c:	40000400 	.word	0x40000400
 8001950:	20000044 	.word	0x20000044

08001954 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	Millis2++;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001964:	6013      	str	r3, [r2, #0]
	Millis++;
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800196e:	6013      	str	r3, [r2, #0]
	EncoderStatus();
 8001970:	f7ff fb78 	bl	8001064 <EncoderStatus>
	SpeedStatus();
 8001974:	f7ff fa68 	bl	8000e48 <SpeedStatus>
//	updateSpeed();
//	SensorStatus();
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000084 	.word	0x20000084
 8001984:	2000007c 	.word	0x2000007c

08001988 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_15)
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001998:	d102      	bne.n	80019a0 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	flag1 = 1;
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_GPIO_EXTI_Callback+0x30>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == GPIO_PIN_13)
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019a6:	d102      	bne.n	80019ae <HAL_GPIO_EXTI_Callback+0x26>
    {
    	flag2 = 1;
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <HAL_GPIO_EXTI_Callback+0x34>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
    }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000088 	.word	0x20000088
 80019bc:	20000089 	.word	0x20000089

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <Error_Handler+0x8>

080019cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_MspInit+0x5c>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <HAL_MspInit+0x5c>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6193      	str	r3, [r2, #24]
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_MspInit+0x5c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_MspInit+0x5c>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001a28 <HAL_MspInit+0x5c>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <HAL_MspInit+0x5c>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_MspInit+0x60>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <HAL_MspInit+0x60>)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000

08001a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a28      	ldr	r2, [pc, #160]	@ (8001aec <HAL_ADC_MspInit+0xbc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d149      	bne.n	8001ae4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a50:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a26      	ldr	r2, [pc, #152]	@ (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	@ (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001a80:	231e      	movs	r3, #30
 8001a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a84:	2303      	movs	r3, #3
 8001a86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4819      	ldr	r0, [pc, #100]	@ (8001af4 <HAL_ADC_MspInit+0xc4>)
 8001a90:	f001 f992 	bl	8002db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001a96:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <HAL_ADC_MspInit+0xcc>)
 8001a98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ab2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001ab6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001abe:	2220      	movs	r2, #32
 8001ac0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac8:	480b      	ldr	r0, [pc, #44]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001aca:	f000 ff87 	bl	80029dc <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001ad4:	f7ff ff74 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001adc:	621a      	str	r2, [r3, #32]
 8001ade:	4a06      	ldr	r2, [pc, #24]	@ (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40012400 	.word	0x40012400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	200000bc 	.word	0x200000bc
 8001afc:	40020008 	.word	0x40020008

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a16      	ldr	r2, [pc, #88]	@ (8001b68 <HAL_TIM_Base_MspInit+0x68>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10c      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_TIM_Base_MspInit+0x6c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a15      	ldr	r2, [pc, #84]	@ (8001b6c <HAL_TIM_Base_MspInit+0x6c>)
 8001b18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_TIM_Base_MspInit+0x6c>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b2a:	e018      	b.n	8001b5e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0f      	ldr	r2, [pc, #60]	@ (8001b70 <HAL_TIM_Base_MspInit+0x70>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d113      	bne.n	8001b5e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <HAL_TIM_Base_MspInit+0x6c>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <HAL_TIM_Base_MspInit+0x6c>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	61d3      	str	r3, [r2, #28]
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <HAL_TIM_Base_MspInit+0x6c>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	201e      	movs	r0, #30
 8001b54:	f000 ff0b 	bl	800296e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b58:	201e      	movs	r0, #30
 8001b5a:	f000 ff24 	bl	80029a6 <HAL_NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40000800 	.word	0x40000800

08001b74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	@ 0x38
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b92:	d157      	bne.n	8001c44 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b94:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	4a4e      	ldr	r2, [pc, #312]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	61d3      	str	r3, [r2, #28]
 8001ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b49      	ldr	r3, [pc, #292]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b46      	ldr	r3, [pc, #280]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a42      	ldr	r2, [pc, #264]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b40      	ldr	r3, [pc, #256]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0320 	add.w	r3, r7, #32
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4839      	ldr	r0, [pc, #228]	@ (8001cd8 <HAL_TIM_Encoder_MspInit+0x164>)
 8001bf2:	f001 f8e1 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0320 	add.w	r3, r7, #32
 8001c06:	4619      	mov	r1, r3
 8001c08:	4834      	ldr	r0, [pc, #208]	@ (8001cdc <HAL_TIM_Encoder_MspInit+0x168>)
 8001c0a:	f001 f8d5 	bl	8002db8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce0 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c30:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	201c      	movs	r0, #28
 8001c38:	f000 fe99 	bl	800296e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c3c:	201c      	movs	r0, #28
 8001c3e:	f000 feb2 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c42:	e042      	b.n	8001cca <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a26      	ldr	r2, [pc, #152]	@ (8001ce4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d13d      	bne.n	8001cca <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c4e:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a20      	ldr	r2, [pc, #128]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6193      	str	r3, [r2, #24]
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x160>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c7e:	2330      	movs	r3, #48	@ 0x30
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4812      	ldr	r0, [pc, #72]	@ (8001cdc <HAL_TIM_Encoder_MspInit+0x168>)
 8001c92:	f001 f891 	bl	8002db8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001c96:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb8:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	201d      	movs	r0, #29
 8001cc0:	f000 fe55 	bl	800296e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc4:	201d      	movs	r0, #29
 8001cc6:	f000 fe6e 	bl	80029a6 <HAL_NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3738      	adds	r7, #56	@ 0x38
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40000400 	.word	0x40000400

08001ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a10      	ldr	r2, [pc, #64]	@ (8001d44 <HAL_TIM_MspPostInit+0x5c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d118      	bne.n	8001d3a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_TIM_MspPostInit+0x60>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <HAL_TIM_MspPostInit+0x60>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <HAL_TIM_MspPostInit+0x60>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001d20:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <HAL_TIM_MspPostInit+0x64>)
 8001d36:	f001 f83f 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010800 	.word	0x40010800

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a22      	ldr	r2, [pc, #136]	@ (8001df4 <HAL_UART_MspInit+0xa4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d13d      	bne.n	8001dec <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d70:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <HAL_UART_MspInit+0xa8>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a20      	ldr	r2, [pc, #128]	@ (8001df8 <HAL_UART_MspInit+0xa8>)
 8001d76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <HAL_UART_MspInit+0xa8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_UART_MspInit+0xa8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8001df8 <HAL_UART_MspInit+0xa8>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_UART_MspInit+0xa8>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001da0:	2340      	movs	r3, #64	@ 0x40
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4812      	ldr	r0, [pc, #72]	@ (8001dfc <HAL_UART_MspInit+0xac>)
 8001db4:	f001 f800 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480c      	ldr	r0, [pc, #48]	@ (8001dfc <HAL_UART_MspInit+0xac>)
 8001dcc:	f000 fff4 	bl	8002db8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_UART_MspInit+0xb0>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de6:	4a06      	ldr	r2, [pc, #24]	@ (8001e00 <HAL_UART_MspInit+0xb0>)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	6053      	str	r3, [r2, #4]

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	@ 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	40010000 	.word	0x40010000

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <NMI_Handler+0x4>

08001e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f000 f8a8 	bl	8001fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <DMA1_Channel1_IRQHandler+0x10>)
 8001e62:	f000 fe75 	bl	8002b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000bc 	.word	0x200000bc

08001e70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <TIM2_IRQHandler+0x10>)
 8001e76:	f002 f905 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000148 	.word	0x20000148

08001e84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <TIM3_IRQHandler+0x10>)
 8001e8a:	f002 f8fb 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000190 	.word	0x20000190

08001e98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <TIM4_IRQHandler+0x10>)
 8001e9e:	f002 f8f1 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200001d8 	.word	0x200001d8

08001eac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001eb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001eb4:	f001 f91c 	bl	80030f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001eb8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ebc:	f001 f918 	bl	80030f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001ed0:	f7ff fff8 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed4:	480b      	ldr	r0, [pc, #44]	@ (8001f04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ed6:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8001f0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001eec:	4c09      	ldr	r4, [pc, #36]	@ (8001f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001efa:	f002 ffaf 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001efe:	f7ff f939 	bl	8001174 <main>
  bx lr
 8001f02:	4770      	bx	lr
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f0c:	08004ef0 	.word	0x08004ef0
  ldr r2, =_sbss
 8001f10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f14:	2000026c 	.word	0x2000026c

08001f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC1_2_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <HAL_Init+0x28>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_Init+0x28>)
 8001f26:	f043 0310 	orr.w	r3, r3, #16
 8001f2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 fd13 	bl	8002958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	200f      	movs	r0, #15
 8001f34:	f000 f808 	bl	8001f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f38:	f7ff fd48 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40022000 	.word	0x40022000

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_InitTick+0x54>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_InitTick+0x58>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fd2b 	bl	80029c2 <HAL_SYSTICK_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00e      	b.n	8001f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b0f      	cmp	r3, #15
 8001f7a:	d80a      	bhi.n	8001f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f000 fcf3 	bl	800296e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f88:	4a06      	ldr	r2, [pc, #24]	@ (8001fa4 <HAL_InitTick+0x5c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_IncTick+0x1c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_IncTick+0x20>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a03      	ldr	r2, [pc, #12]	@ (8001fc8 <HAL_IncTick+0x20>)
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000268 	.word	0x20000268

08001fcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b02      	ldr	r3, [pc, #8]	@ (8001fdc <HAL_GetTick+0x10>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	20000268 	.word	0x20000268

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffe0 	bl	8001fcc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008

08002028 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0be      	b.n	80021c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fce2 	bl	8001a30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 faff 	bl	8002670 <ADC_ConversionStop_Disable>
 8002072:	4603      	mov	r3, r0
 8002074:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 8099 	bne.w	80021b6 <HAL_ADC_Init+0x18e>
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 8095 	bne.w	80021b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002094:	f023 0302 	bic.w	r3, r3, #2
 8002098:	f043 0202 	orr.w	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7b1b      	ldrb	r3, [r3, #12]
 80020ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c0:	d003      	beq.n	80020ca <HAL_ADC_Init+0xa2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <HAL_ADC_Init+0xa8>
 80020ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ce:	e000      	b.n	80020d2 <HAL_ADC_Init+0xaa>
 80020d0:	2300      	movs	r3, #0
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7d1b      	ldrb	r3, [r3, #20]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d119      	bne.n	8002114 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7b1b      	ldrb	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	035a      	lsls	r2, r3, #13
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	e00b      	b.n	8002114 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HAL_ADC_Init+0x1a8>)
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	430b      	orrs	r3, r1
 800213a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002144:	d003      	beq.n	800214e <HAL_ADC_Init+0x126>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d104      	bne.n	8002158 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	3b01      	subs	r3, #1
 8002154:	051b      	lsls	r3, r3, #20
 8002156:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	430a      	orrs	r2, r1
 800216a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <HAL_ADC_Init+0x1ac>)
 8002174:	4013      	ands	r3, r2
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	429a      	cmp	r2, r3
 800217a:	d10b      	bne.n	8002194 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002192:	e018      	b.n	80021c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002198:	f023 0312 	bic.w	r3, r3, #18
 800219c:	f043 0210 	orr.w	r2, r3, #16
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b4:	e007      	b.n	80021c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	f043 0210 	orr.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	ffe1f7fd 	.word	0xffe1f7fd
 80021d4:	ff1f0efe 	.word	0xff1f0efe

080021d8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a64      	ldr	r2, [pc, #400]	@ (8002380 <HAL_ADC_Start_DMA+0x1a8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_ADC_Start_DMA+0x24>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a63      	ldr	r2, [pc, #396]	@ (8002384 <HAL_ADC_Start_DMA+0x1ac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d106      	bne.n	800220a <HAL_ADC_Start_DMA+0x32>
 80021fc:	4b60      	ldr	r3, [pc, #384]	@ (8002380 <HAL_ADC_Start_DMA+0x1a8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 80b3 	bne.w	8002370 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_ADC_Start_DMA+0x40>
 8002214:	2302      	movs	r3, #2
 8002216:	e0ae      	b.n	8002376 <HAL_ADC_Start_DMA+0x19e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f9cb 	bl	80025bc <ADC_Enable>
 8002226:	4603      	mov	r3, r0
 8002228:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 809a 	bne.w	8002366 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a4e      	ldr	r2, [pc, #312]	@ (8002384 <HAL_ADC_Start_DMA+0x1ac>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d105      	bne.n	800225c <HAL_ADC_Start_DMA+0x84>
 8002250:	4b4b      	ldr	r3, [pc, #300]	@ (8002380 <HAL_ADC_Start_DMA+0x1a8>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d115      	bne.n	8002288 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002272:	2b00      	cmp	r3, #0
 8002274:	d026      	beq.n	80022c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800227e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002286:	e01d      	b.n	80022c4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a39      	ldr	r2, [pc, #228]	@ (8002380 <HAL_ADC_Start_DMA+0x1a8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_ADC_Start_DMA+0xd0>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a38      	ldr	r2, [pc, #224]	@ (8002384 <HAL_ADC_Start_DMA+0x1ac>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10d      	bne.n	80022c4 <HAL_ADC_Start_DMA+0xec>
 80022a8:	4b35      	ldr	r3, [pc, #212]	@ (8002380 <HAL_ADC_Start_DMA+0x1a8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	f023 0206 	bic.w	r2, r3, #6
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a25      	ldr	r2, [pc, #148]	@ (8002388 <HAL_ADC_Start_DMA+0x1b0>)
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a24      	ldr	r2, [pc, #144]	@ (800238c <HAL_ADC_Start_DMA+0x1b4>)
 80022fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a23      	ldr	r2, [pc, #140]	@ (8002390 <HAL_ADC_Start_DMA+0x1b8>)
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0202 	mvn.w	r2, #2
 800230c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800231c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a18      	ldr	r0, [r3, #32]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	334c      	adds	r3, #76	@ 0x4c
 8002328:	4619      	mov	r1, r3
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f000 fbaf 	bl	8002a90 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800233c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002340:	d108      	bne.n	8002354 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002350:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002352:	e00f      	b.n	8002374 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002362:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002364:	e006      	b.n	8002374 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800236e:	e001      	b.n	8002374 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002374:	7dfb      	ldrb	r3, [r7, #23]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40012400 	.word	0x40012400
 8002384:	40012800 	.word	0x40012800
 8002388:	080026f3 	.word	0x080026f3
 800238c:	0800276f 	.word	0x0800276f
 8002390:	0800278b 	.word	0x0800278b

08002394 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x20>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e0dc      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1da>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d81c      	bhi.n	8002436 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b05      	subs	r3, #5
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	4019      	ands	r1, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b05      	subs	r3, #5
 8002428:	fa00 f203 	lsl.w	r2, r0, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34
 8002434:	e03c      	b.n	80024b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d81c      	bhi.n	8002478 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b23      	subs	r3, #35	@ 0x23
 8002450:	221f      	movs	r2, #31
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	4019      	ands	r1, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b23      	subs	r3, #35	@ 0x23
 800246a:	fa00 f203 	lsl.w	r2, r0, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	631a      	str	r2, [r3, #48]	@ 0x30
 8002476:	e01b      	b.n	80024b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b41      	subs	r3, #65	@ 0x41
 800248a:	221f      	movs	r2, #31
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	4019      	ands	r1, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b41      	subs	r3, #65	@ 0x41
 80024a4:	fa00 f203 	lsl.w	r2, r0, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d91c      	bls.n	80024f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68d9      	ldr	r1, [r3, #12]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	3b1e      	subs	r3, #30
 80024ca:	2207      	movs	r2, #7
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4019      	ands	r1, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6898      	ldr	r0, [r3, #8]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	3b1e      	subs	r3, #30
 80024e4:	fa00 f203 	lsl.w	r2, r0, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	e019      	b.n	8002526 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	2207      	movs	r2, #7
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	4019      	ands	r1, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6898      	ldr	r0, [r3, #8]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	fa00 f203 	lsl.w	r2, r0, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b10      	cmp	r3, #16
 800252c:	d003      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002532:	2b11      	cmp	r3, #17
 8002534:	d132      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d125      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d126      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800255c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b10      	cmp	r3, #16
 8002564:	d11a      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9a      	lsrs	r2, r3, #18
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800257c:	e002      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3b01      	subs	r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_ConfigChannel+0x1b2>
 800258a:	e007      	b.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40012400 	.word	0x40012400
 80025b4:	20000000 	.word	0x20000000
 80025b8:	431bde83 	.word	0x431bde83

080025bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d040      	beq.n	800265c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <ADC_Enable+0xac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1f      	ldr	r2, [pc, #124]	@ (800266c <ADC_Enable+0xb0>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	0c9b      	lsrs	r3, r3, #18
 80025f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025f8:	e002      	b.n	8002600 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f9      	bne.n	80025fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002606:	f7ff fce1 	bl	8001fcc <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800260c:	e01f      	b.n	800264e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800260e:	f7ff fcdd 	bl	8001fcc <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d918      	bls.n	800264e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d011      	beq.n	800264e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e007      	b.n	800265e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d1d8      	bne.n	800260e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000
 800266c:	431bde83 	.word	0x431bde83

08002670 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d12e      	bne.n	80026e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269a:	f7ff fc97 	bl	8001fcc <HAL_GetTick>
 800269e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026a0:	e01b      	b.n	80026da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026a2:	f7ff fc93 	bl	8001fcc <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d914      	bls.n	80026da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10d      	bne.n	80026da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e007      	b.n	80026ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d0dc      	beq.n	80026a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002708:	2b00      	cmp	r3, #0
 800270a:	d127      	bne.n	800275c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002722:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002726:	d115      	bne.n	8002754 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800272c:	2b00      	cmp	r3, #0
 800272e:	d111      	bne.n	8002754 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7ff fe1d 	bl	8002394 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800275a:	e004      	b.n	8002766 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff fe12 	bl	80023a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	f043 0204 	orr.w	r2, r3, #4
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fe01 	bl	80023b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db0b      	blt.n	800284e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	4906      	ldr	r1, [pc, #24]	@ (8002858 <__NVIC_EnableIRQ+0x34>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2001      	movs	r0, #1
 8002846:	fa00 f202 	lsl.w	r2, r0, r2
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100

0800285c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	490c      	ldr	r1, [pc, #48]	@ (80028a8 <__NVIC_SetPriority+0x4c>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4908      	ldr	r1, [pc, #32]	@ (80028ac <__NVIC_SetPriority+0x50>)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3b04      	subs	r3, #4
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	@ 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf28      	it	cs
 80028ce:	2304      	movcs	r3, #4
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b03      	subs	r3, #3
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43d9      	mvns	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	4313      	orrs	r3, r2
         );
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	@ 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002924:	d301      	bcc.n	800292a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002926:	2301      	movs	r3, #1
 8002928:	e00f      	b.n	800294a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292a:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <SysTick_Config+0x40>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002932:	210f      	movs	r1, #15
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f7ff ff90 	bl	800285c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <SysTick_Config+0x40>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <SysTick_Config+0x40>)
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff2d 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002980:	f7ff ff42 	bl	8002808 <__NVIC_GetPriorityGrouping>
 8002984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7ff ff90 	bl	80028b0 <NVIC_EncodePriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff5f 	bl	800285c <__NVIC_SetPriority>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff35 	bl	8002824 <__NVIC_EnableIRQ>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ffa2 	bl	8002914 <SysTick_Config>
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e043      	b.n	8002a7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <HAL_DMA_Init+0xa8>)
 80029fa:	4413      	add	r3, r2
 80029fc:	4a22      	ldr	r2, [pc, #136]	@ (8002a88 <HAL_DMA_Init+0xac>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	009a      	lsls	r2, r3, #2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a8c <HAL_DMA_Init+0xb0>)
 8002a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a26:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	bffdfff8 	.word	0xbffdfff8
 8002a88:	cccccccd 	.word	0xcccccccd
 8002a8c:	40020000 	.word	0x40020000

08002a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_DMA_Start_IT+0x20>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e04b      	b.n	8002b48 <HAL_DMA_Start_IT+0xb8>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d13a      	bne.n	8002b3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f937 	bl	8002d5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 020e 	orr.w	r2, r2, #14
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e00f      	b.n	8002b28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0204 	bic.w	r2, r2, #4
 8002b16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 020a 	orr.w	r2, r2, #10
 8002b26:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e005      	b.n	8002b46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
 8002b44:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d04f      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xc8>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04a      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a66      	ldr	r2, [pc, #408]	@ (8002d40 <HAL_DMA_IRQHandler+0x1f0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d029      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xae>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a65      	ldr	r2, [pc, #404]	@ (8002d44 <HAL_DMA_IRQHandler+0x1f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d022      	beq.n	8002bfa <HAL_DMA_IRQHandler+0xaa>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a63      	ldr	r2, [pc, #396]	@ (8002d48 <HAL_DMA_IRQHandler+0x1f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0xa4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a62      	ldr	r2, [pc, #392]	@ (8002d4c <HAL_DMA_IRQHandler+0x1fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d012      	beq.n	8002bee <HAL_DMA_IRQHandler+0x9e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a60      	ldr	r2, [pc, #384]	@ (8002d50 <HAL_DMA_IRQHandler+0x200>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00a      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x98>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d54 <HAL_DMA_IRQHandler+0x204>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_DMA_IRQHandler+0x92>
 8002bdc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002be0:	e00e      	b.n	8002c00 <HAL_DMA_IRQHandler+0xb0>
 8002be2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002be6:	e00b      	b.n	8002c00 <HAL_DMA_IRQHandler+0xb0>
 8002be8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bec:	e008      	b.n	8002c00 <HAL_DMA_IRQHandler+0xb0>
 8002bee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bf2:	e005      	b.n	8002c00 <HAL_DMA_IRQHandler+0xb0>
 8002bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf8:	e002      	b.n	8002c00 <HAL_DMA_IRQHandler+0xb0>
 8002bfa:	2340      	movs	r3, #64	@ 0x40
 8002bfc:	e000      	b.n	8002c00 <HAL_DMA_IRQHandler+0xb0>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	4a55      	ldr	r2, [pc, #340]	@ (8002d58 <HAL_DMA_IRQHandler+0x208>)
 8002c02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8094 	beq.w	8002d36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c16:	e08e      	b.n	8002d36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d056      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x186>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d051      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 020a 	bic.w	r2, r2, #10
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a38      	ldr	r2, [pc, #224]	@ (8002d40 <HAL_DMA_IRQHandler+0x1f0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d029      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x166>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a37      	ldr	r2, [pc, #220]	@ (8002d44 <HAL_DMA_IRQHandler+0x1f4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x162>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a35      	ldr	r2, [pc, #212]	@ (8002d48 <HAL_DMA_IRQHandler+0x1f8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01a      	beq.n	8002cac <HAL_DMA_IRQHandler+0x15c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a34      	ldr	r2, [pc, #208]	@ (8002d4c <HAL_DMA_IRQHandler+0x1fc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d012      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x156>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a32      	ldr	r2, [pc, #200]	@ (8002d50 <HAL_DMA_IRQHandler+0x200>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x150>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a31      	ldr	r2, [pc, #196]	@ (8002d54 <HAL_DMA_IRQHandler+0x204>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d102      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x14a>
 8002c94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c98:	e00e      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x168>
 8002c9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9e:	e00b      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x168>
 8002ca0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ca4:	e008      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x168>
 8002ca6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002caa:	e005      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x168>
 8002cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cb0:	e002      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x168>
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x168>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	4a27      	ldr	r2, [pc, #156]	@ (8002d58 <HAL_DMA_IRQHandler+0x208>)
 8002cba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d034      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cd4:	e02f      	b.n	8002d36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2208      	movs	r2, #8
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d028      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x1e8>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d023      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020e 	bic.w	r2, r2, #14
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
    }
  }
  return;
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
}
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40020008 	.word	0x40020008
 8002d44:	4002001c 	.word	0x4002001c
 8002d48:	40020030 	.word	0x40020030
 8002d4c:	40020044 	.word	0x40020044
 8002d50:	40020058 	.word	0x40020058
 8002d54:	4002006c 	.word	0x4002006c
 8002d58:	40020000 	.word	0x40020000

08002d5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d72:	2101      	movs	r1, #1
 8002d74:	fa01 f202 	lsl.w	r2, r1, r2
 8002d78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d108      	bne.n	8002d9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d9a:	e007      	b.n	8002dac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b08b      	sub	sp, #44	@ 0x2c
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dca:	e169      	b.n	80030a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	f040 8158 	bne.w	800309a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a9a      	ldr	r2, [pc, #616]	@ (8003058 <HAL_GPIO_Init+0x2a0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d05e      	beq.n	8002eb2 <HAL_GPIO_Init+0xfa>
 8002df4:	4a98      	ldr	r2, [pc, #608]	@ (8003058 <HAL_GPIO_Init+0x2a0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d875      	bhi.n	8002ee6 <HAL_GPIO_Init+0x12e>
 8002dfa:	4a98      	ldr	r2, [pc, #608]	@ (800305c <HAL_GPIO_Init+0x2a4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d058      	beq.n	8002eb2 <HAL_GPIO_Init+0xfa>
 8002e00:	4a96      	ldr	r2, [pc, #600]	@ (800305c <HAL_GPIO_Init+0x2a4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d86f      	bhi.n	8002ee6 <HAL_GPIO_Init+0x12e>
 8002e06:	4a96      	ldr	r2, [pc, #600]	@ (8003060 <HAL_GPIO_Init+0x2a8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d052      	beq.n	8002eb2 <HAL_GPIO_Init+0xfa>
 8002e0c:	4a94      	ldr	r2, [pc, #592]	@ (8003060 <HAL_GPIO_Init+0x2a8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d869      	bhi.n	8002ee6 <HAL_GPIO_Init+0x12e>
 8002e12:	4a94      	ldr	r2, [pc, #592]	@ (8003064 <HAL_GPIO_Init+0x2ac>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04c      	beq.n	8002eb2 <HAL_GPIO_Init+0xfa>
 8002e18:	4a92      	ldr	r2, [pc, #584]	@ (8003064 <HAL_GPIO_Init+0x2ac>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d863      	bhi.n	8002ee6 <HAL_GPIO_Init+0x12e>
 8002e1e:	4a92      	ldr	r2, [pc, #584]	@ (8003068 <HAL_GPIO_Init+0x2b0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d046      	beq.n	8002eb2 <HAL_GPIO_Init+0xfa>
 8002e24:	4a90      	ldr	r2, [pc, #576]	@ (8003068 <HAL_GPIO_Init+0x2b0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d85d      	bhi.n	8002ee6 <HAL_GPIO_Init+0x12e>
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	d82a      	bhi.n	8002e84 <HAL_GPIO_Init+0xcc>
 8002e2e:	2b12      	cmp	r3, #18
 8002e30:	d859      	bhi.n	8002ee6 <HAL_GPIO_Init+0x12e>
 8002e32:	a201      	add	r2, pc, #4	@ (adr r2, 8002e38 <HAL_GPIO_Init+0x80>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002eb3 	.word	0x08002eb3
 8002e3c:	08002e8d 	.word	0x08002e8d
 8002e40:	08002e9f 	.word	0x08002e9f
 8002e44:	08002ee1 	.word	0x08002ee1
 8002e48:	08002ee7 	.word	0x08002ee7
 8002e4c:	08002ee7 	.word	0x08002ee7
 8002e50:	08002ee7 	.word	0x08002ee7
 8002e54:	08002ee7 	.word	0x08002ee7
 8002e58:	08002ee7 	.word	0x08002ee7
 8002e5c:	08002ee7 	.word	0x08002ee7
 8002e60:	08002ee7 	.word	0x08002ee7
 8002e64:	08002ee7 	.word	0x08002ee7
 8002e68:	08002ee7 	.word	0x08002ee7
 8002e6c:	08002ee7 	.word	0x08002ee7
 8002e70:	08002ee7 	.word	0x08002ee7
 8002e74:	08002ee7 	.word	0x08002ee7
 8002e78:	08002ee7 	.word	0x08002ee7
 8002e7c:	08002e95 	.word	0x08002e95
 8002e80:	08002ea9 	.word	0x08002ea9
 8002e84:	4a79      	ldr	r2, [pc, #484]	@ (800306c <HAL_GPIO_Init+0x2b4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e8a:	e02c      	b.n	8002ee6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	623b      	str	r3, [r7, #32]
          break;
 8002e92:	e029      	b.n	8002ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	623b      	str	r3, [r7, #32]
          break;
 8002e9c:	e024      	b.n	8002ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	623b      	str	r3, [r7, #32]
          break;
 8002ea6:	e01f      	b.n	8002ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	330c      	adds	r3, #12
 8002eae:	623b      	str	r3, [r7, #32]
          break;
 8002eb0:	e01a      	b.n	8002ee8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eba:	2304      	movs	r3, #4
 8002ebc:	623b      	str	r3, [r7, #32]
          break;
 8002ebe:	e013      	b.n	8002ee8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec8:	2308      	movs	r3, #8
 8002eca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	611a      	str	r2, [r3, #16]
          break;
 8002ed2:	e009      	b.n	8002ee8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	615a      	str	r2, [r3, #20]
          break;
 8002ede:	e003      	b.n	8002ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	623b      	str	r3, [r7, #32]
          break;
 8002ee4:	e000      	b.n	8002ee8 <HAL_GPIO_Init+0x130>
          break;
 8002ee6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2bff      	cmp	r3, #255	@ 0xff
 8002eec:	d801      	bhi.n	8002ef2 <HAL_GPIO_Init+0x13a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	e001      	b.n	8002ef6 <HAL_GPIO_Init+0x13e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2bff      	cmp	r3, #255	@ 0xff
 8002efc:	d802      	bhi.n	8002f04 <HAL_GPIO_Init+0x14c>
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x152>
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	3b08      	subs	r3, #8
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	210f      	movs	r1, #15
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	6a39      	ldr	r1, [r7, #32]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	431a      	orrs	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80b1 	beq.w	800309a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f38:	4b4d      	ldr	r3, [pc, #308]	@ (8003070 <HAL_GPIO_Init+0x2b8>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4a4c      	ldr	r2, [pc, #304]	@ (8003070 <HAL_GPIO_Init+0x2b8>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6193      	str	r3, [r2, #24]
 8002f44:	4b4a      	ldr	r3, [pc, #296]	@ (8003070 <HAL_GPIO_Init+0x2b8>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f50:	4a48      	ldr	r2, [pc, #288]	@ (8003074 <HAL_GPIO_Init+0x2bc>)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	3302      	adds	r3, #2
 8002f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	220f      	movs	r2, #15
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a40      	ldr	r2, [pc, #256]	@ (8003078 <HAL_GPIO_Init+0x2c0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <HAL_GPIO_Init+0x1ec>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800307c <HAL_GPIO_Init+0x2c4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00d      	beq.n	8002fa0 <HAL_GPIO_Init+0x1e8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3e      	ldr	r2, [pc, #248]	@ (8003080 <HAL_GPIO_Init+0x2c8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <HAL_GPIO_Init+0x1e4>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003084 <HAL_GPIO_Init+0x2cc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_GPIO_Init+0x1e0>
 8002f94:	2303      	movs	r3, #3
 8002f96:	e006      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	e004      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e002      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa8:	f002 0203 	and.w	r2, r2, #3
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	4093      	lsls	r3, r2
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fb6:	492f      	ldr	r1, [pc, #188]	@ (8003074 <HAL_GPIO_Init+0x2bc>)
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	492c      	ldr	r1, [pc, #176]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]
 8002fdc:	e006      	b.n	8002fec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fde:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4928      	ldr	r1, [pc, #160]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ff8:	4b23      	ldr	r3, [pc, #140]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	4922      	ldr	r1, [pc, #136]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	60cb      	str	r3, [r1, #12]
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003006:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	43db      	mvns	r3, r3
 800300e:	491e      	ldr	r1, [pc, #120]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8003010:	4013      	ands	r3, r2
 8003012:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d006      	beq.n	800302e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4918      	ldr	r1, [pc, #96]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
 800302c:	e006      	b.n	800303c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800302e:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	43db      	mvns	r3, r3
 8003036:	4914      	ldr	r1, [pc, #80]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 8003038:	4013      	ands	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d021      	beq.n	800308c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003048:	4b0f      	ldr	r3, [pc, #60]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	490e      	ldr	r1, [pc, #56]	@ (8003088 <HAL_GPIO_Init+0x2d0>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]
 8003054:	e021      	b.n	800309a <HAL_GPIO_Init+0x2e2>
 8003056:	bf00      	nop
 8003058:	10320000 	.word	0x10320000
 800305c:	10310000 	.word	0x10310000
 8003060:	10220000 	.word	0x10220000
 8003064:	10210000 	.word	0x10210000
 8003068:	10120000 	.word	0x10120000
 800306c:	10110000 	.word	0x10110000
 8003070:	40021000 	.word	0x40021000
 8003074:	40010000 	.word	0x40010000
 8003078:	40010800 	.word	0x40010800
 800307c:	40010c00 	.word	0x40010c00
 8003080:	40011000 	.word	0x40011000
 8003084:	40011400 	.word	0x40011400
 8003088:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_GPIO_Init+0x304>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	43db      	mvns	r3, r3
 8003094:	4909      	ldr	r1, [pc, #36]	@ (80030bc <HAL_GPIO_Init+0x304>)
 8003096:	4013      	ands	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	3301      	adds	r3, #1
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f47f ae8e 	bne.w	8002dcc <HAL_GPIO_Init+0x14>
  }
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	372c      	adds	r7, #44	@ 0x2c
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	40010400 	.word	0x40010400

080030c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
 80030cc:	4613      	mov	r3, r2
 80030ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030d0:	787b      	ldrb	r3, [r7, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030dc:	e003      	b.n	80030e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	041a      	lsls	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030fa:	4b08      	ldr	r3, [pc, #32]	@ (800311c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003106:	4a05      	ldr	r2, [pc, #20]	@ (800311c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fc3a 	bl	8001988 <HAL_GPIO_EXTI_Callback>
  }
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40010400 	.word	0x40010400

08003120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e272      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8087 	beq.w	800324e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003140:	4b92      	ldr	r3, [pc, #584]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b04      	cmp	r3, #4
 800314a:	d00c      	beq.n	8003166 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800314c:	4b8f      	ldr	r3, [pc, #572]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d112      	bne.n	800317e <HAL_RCC_OscConfig+0x5e>
 8003158:	4b8c      	ldr	r3, [pc, #560]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003164:	d10b      	bne.n	800317e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003166:	4b89      	ldr	r3, [pc, #548]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d06c      	beq.n	800324c <HAL_RCC_OscConfig+0x12c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d168      	bne.n	800324c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e24c      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x76>
 8003188:	4b80      	ldr	r3, [pc, #512]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a7f      	ldr	r2, [pc, #508]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e02e      	b.n	80031f4 <HAL_RCC_OscConfig+0xd4>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x98>
 800319e:	4b7b      	ldr	r3, [pc, #492]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7a      	ldr	r2, [pc, #488]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b78      	ldr	r3, [pc, #480]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a77      	ldr	r2, [pc, #476]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xd4>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0xbc>
 80031c2:	4b72      	ldr	r3, [pc, #456]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a71      	ldr	r2, [pc, #452]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b6f      	ldr	r3, [pc, #444]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6e      	ldr	r2, [pc, #440]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xd4>
 80031dc:	4b6b      	ldr	r3, [pc, #428]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6a      	ldr	r2, [pc, #424]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b68      	ldr	r3, [pc, #416]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a67      	ldr	r2, [pc, #412]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe fee6 	bl	8001fcc <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fee2 	bl	8001fcc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e200      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b5d      	ldr	r3, [pc, #372]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xe4>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe fed2 	bl	8001fcc <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe fece 	bl	8001fcc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	@ 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1ec      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b53      	ldr	r3, [pc, #332]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x10c>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d063      	beq.n	8003322 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800325a:	4b4c      	ldr	r3, [pc, #304]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003266:	4b49      	ldr	r3, [pc, #292]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x18c>
 8003272:	4b46      	ldr	r3, [pc, #280]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b43      	ldr	r3, [pc, #268]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x176>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1c0      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3d      	ldr	r3, [pc, #244]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4939      	ldr	r1, [pc, #228]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b36      	ldr	r3, [pc, #216]	@ (8003390 <HAL_RCC_OscConfig+0x270>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fe fe87 	bl	8001fcc <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fe83 	bl	8001fcc <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1a1      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2d      	ldr	r3, [pc, #180]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b2a      	ldr	r3, [pc, #168]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4927      	ldr	r1, [pc, #156]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b26      	ldr	r3, [pc, #152]	@ (8003390 <HAL_RCC_OscConfig+0x270>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe fe66 	bl	8001fcc <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003304:	f7fe fe62 	bl	8001fcc <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e180      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03a      	beq.n	80033a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d019      	beq.n	800336a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <HAL_RCC_OscConfig+0x274>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333c:	f7fe fe46 	bl	8001fcc <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003344:	f7fe fe42 	bl	8001fcc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e160      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <HAL_RCC_OscConfig+0x26c>)
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003362:	2001      	movs	r0, #1
 8003364:	f000 face 	bl	8003904 <RCC_Delay>
 8003368:	e01c      	b.n	80033a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800336a:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <HAL_RCC_OscConfig+0x274>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fe fe2c 	bl	8001fcc <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003376:	e00f      	b.n	8003398 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe fe28 	bl	8001fcc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d908      	bls.n	8003398 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e146      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	42420000 	.word	0x42420000
 8003394:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003398:	4b92      	ldr	r3, [pc, #584]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e9      	bne.n	8003378 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80a6 	beq.w	80034fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b8b      	ldr	r3, [pc, #556]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b88      	ldr	r3, [pc, #544]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4a87      	ldr	r2, [pc, #540]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	61d3      	str	r3, [r2, #28]
 80033ce:	4b85      	ldr	r3, [pc, #532]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b82      	ldr	r3, [pc, #520]	@ (80035e8 <HAL_RCC_OscConfig+0x4c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b7f      	ldr	r3, [pc, #508]	@ (80035e8 <HAL_RCC_OscConfig+0x4c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7e      	ldr	r2, [pc, #504]	@ (80035e8 <HAL_RCC_OscConfig+0x4c8>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fe fde9 	bl	8001fcc <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7fe fde5 	bl	8001fcc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	@ 0x64
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e103      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	4b75      	ldr	r3, [pc, #468]	@ (80035e8 <HAL_RCC_OscConfig+0x4c8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x312>
 8003424:	4b6f      	ldr	r3, [pc, #444]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a6e      	ldr	r2, [pc, #440]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	e02d      	b.n	800348e <HAL_RCC_OscConfig+0x36e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x334>
 800343a:	4b6a      	ldr	r3, [pc, #424]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a69      	ldr	r2, [pc, #420]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6213      	str	r3, [r2, #32]
 8003446:	4b67      	ldr	r3, [pc, #412]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a66      	ldr	r2, [pc, #408]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6213      	str	r3, [r2, #32]
 8003452:	e01c      	b.n	800348e <HAL_RCC_OscConfig+0x36e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d10c      	bne.n	8003476 <HAL_RCC_OscConfig+0x356>
 800345c:	4b61      	ldr	r3, [pc, #388]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4a60      	ldr	r2, [pc, #384]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	6213      	str	r3, [r2, #32]
 8003468:	4b5e      	ldr	r3, [pc, #376]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a5d      	ldr	r2, [pc, #372]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6213      	str	r3, [r2, #32]
 8003474:	e00b      	b.n	800348e <HAL_RCC_OscConfig+0x36e>
 8003476:	4b5b      	ldr	r3, [pc, #364]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4a5a      	ldr	r2, [pc, #360]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6213      	str	r3, [r2, #32]
 8003482:	4b58      	ldr	r3, [pc, #352]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a57      	ldr	r2, [pc, #348]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d015      	beq.n	80034c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003496:	f7fe fd99 	bl	8001fcc <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fe fd95 	bl	8001fcc <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0b1      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	4b4b      	ldr	r3, [pc, #300]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ee      	beq.n	800349e <HAL_RCC_OscConfig+0x37e>
 80034c0:	e014      	b.n	80034ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe fd83 	bl	8001fcc <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe fd7f 	bl	8001fcc <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e09b      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e0:	4b40      	ldr	r3, [pc, #256]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4b3c      	ldr	r3, [pc, #240]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4a3b      	ldr	r2, [pc, #236]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8087 	beq.w	8003616 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003508:	4b36      	ldr	r3, [pc, #216]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d061      	beq.n	80035d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d146      	bne.n	80035aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b33      	ldr	r3, [pc, #204]	@ (80035ec <HAL_RCC_OscConfig+0x4cc>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fd53 	bl	8001fcc <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe fd4f 	bl	8001fcc <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e06d      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353c:	4b29      	ldr	r3, [pc, #164]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f0      	bne.n	800352a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003550:	d108      	bne.n	8003564 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003552:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4921      	ldr	r1, [pc, #132]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003564:	4b1f      	ldr	r3, [pc, #124]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a19      	ldr	r1, [r3, #32]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	430b      	orrs	r3, r1
 8003576:	491b      	ldr	r1, [pc, #108]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <HAL_RCC_OscConfig+0x4cc>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fe fd23 	bl	8001fcc <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358a:	f7fe fd1f 	bl	8001fcc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e03d      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359c:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x46a>
 80035a8:	e035      	b.n	8003616 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <HAL_RCC_OscConfig+0x4cc>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fd0c 	bl	8001fcc <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fd08 	bl	8001fcc <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e026      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ca:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x498>
 80035d6:	e01e      	b.n	8003616 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e019      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <HAL_RCC_OscConfig+0x500>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	429a      	cmp	r2, r3
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000

08003624 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0d0      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003638:	4b6a      	ldr	r3, [pc, #424]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d910      	bls.n	8003668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b67      	ldr	r3, [pc, #412]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 0207 	bic.w	r2, r3, #7
 800364e:	4965      	ldr	r1, [pc, #404]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b59      	ldr	r3, [pc, #356]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a58      	ldr	r2, [pc, #352]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800368a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4a52      	ldr	r2, [pc, #328]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80036a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	494d      	ldr	r1, [pc, #308]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d040      	beq.n	8003744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d115      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	4b41      	ldr	r3, [pc, #260]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e073      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	4b3d      	ldr	r3, [pc, #244]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06b      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b39      	ldr	r3, [pc, #228]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4936      	ldr	r1, [pc, #216]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003714:	f7fe fc5a 	bl	8001fcc <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe fc56 	bl	8001fcc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e053      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b2d      	ldr	r3, [pc, #180]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003744:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d210      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	4922      	ldr	r1, [pc, #136]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4916      	ldr	r1, [pc, #88]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	490e      	ldr	r1, [pc, #56]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f821 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490a      	ldr	r1, [pc, #40]	@ (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_RCC_ClockConfig+0x1cc>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1d0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fbb8 	bl	8001f48 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40022000 	.word	0x40022000
 80037e8:	40021000 	.word	0x40021000
 80037ec:	08004ebc 	.word	0x08004ebc
 80037f0:	20000000 	.word	0x20000000
 80037f4:	20000004 	.word	0x20000004

080037f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003812:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <HAL_RCC_GetSysClockFreq+0x94>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d002      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x30>
 8003822:	2b08      	cmp	r3, #8
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x36>
 8003826:	e027      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003828:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x98>)
 800382a:	613b      	str	r3, [r7, #16]
      break;
 800382c:	e027      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	0c9b      	lsrs	r3, r3, #18
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	4a17      	ldr	r2, [pc, #92]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003838:	5cd3      	ldrb	r3, [r2, r3]
 800383a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d010      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003846:	4b11      	ldr	r3, [pc, #68]	@ (800388c <HAL_RCC_GetSysClockFreq+0x94>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0c5b      	lsrs	r3, r3, #17
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	4a11      	ldr	r2, [pc, #68]	@ (8003898 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003852:	5cd3      	ldrb	r3, [r2, r3]
 8003854:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a0d      	ldr	r2, [pc, #52]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x98>)
 800385a:	fb03 f202 	mul.w	r2, r3, r2
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e004      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a0c      	ldr	r2, [pc, #48]	@ (800389c <HAL_RCC_GetSysClockFreq+0xa4>)
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	613b      	str	r3, [r7, #16]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x98>)
 800387a:	613b      	str	r3, [r7, #16]
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	693b      	ldr	r3, [r7, #16]
}
 8003880:	4618      	mov	r0, r3
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	007a1200 	.word	0x007a1200
 8003894:	08004ed4 	.word	0x08004ed4
 8003898:	08004ee4 	.word	0x08004ee4
 800389c:	003d0900 	.word	0x003d0900

080038a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a4:	4b02      	ldr	r3, [pc, #8]	@ (80038b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	20000000 	.word	0x20000000

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff2 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	@ (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08004ecc 	.word	0x08004ecc

080038dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e0:	f7ff ffde 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0adb      	lsrs	r3, r3, #11
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	@ (8003900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	08004ecc 	.word	0x08004ecc

08003904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800390c:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <RCC_Delay+0x34>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <RCC_Delay+0x38>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0a5b      	lsrs	r3, r3, #9
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003920:	bf00      	nop
  }
  while (Delay --);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e5a      	subs	r2, r3, #1
 8003926:	60fa      	str	r2, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f9      	bne.n	8003920 <RCC_Delay+0x1c>
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	20000000 	.word	0x20000000
 800393c:	10624dd3 	.word	0x10624dd3

08003940 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d07d      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800395c:	2300      	movs	r3, #0
 800395e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003960:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4a4b      	ldr	r2, [pc, #300]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003976:	61d3      	str	r3, [r2, #28]
 8003978:	4b49      	ldr	r3, [pc, #292]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	4b46      	ldr	r3, [pc, #280]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d118      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003994:	4b43      	ldr	r3, [pc, #268]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a42      	ldr	r2, [pc, #264]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a0:	f7fe fb14 	bl	8001fcc <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe fb10 	bl	8001fcc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e06d      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ba:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c6:	4b36      	ldr	r3, [pc, #216]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d02e      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d027      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e4:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ee:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f4:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039fa:	4a29      	ldr	r2, [pc, #164]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d014      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fe fadf 	bl	8001fcc <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fe fadb 	bl	8001fcc <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e036      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ee      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a34:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4917      	ldr	r1, [pc, #92]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4c:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4a13      	ldr	r2, [pc, #76]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a64:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	490b      	ldr	r1, [pc, #44]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a82:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	4904      	ldr	r1, [pc, #16]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	42420440 	.word	0x42420440

08003aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e041      	b.n	8003b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe f814 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 fd5e 	bl	80045ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d001      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e03a      	b.n	8003bda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a18      	ldr	r2, [pc, #96]	@ (8003be4 <HAL_TIM_Base_Start_IT+0x98>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x58>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8e:	d009      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x58>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x58>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	@ (8003bec <HAL_TIM_Base_Start_IT+0xa0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d111      	bne.n	8003bc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d010      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0201 	orr.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc6:	e007      	b.n	8003bd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800

08003bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e041      	b.n	8003c86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f839 	bl	8003c8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 fcbc 	bl	80045ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_TIM_PWM_Start+0x24>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e022      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d109      	bne.n	8003cde <HAL_TIM_PWM_Start+0x3e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	e015      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d109      	bne.n	8003cf8 <HAL_TIM_PWM_Start+0x58>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e008      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e05e      	b.n	8003dd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start+0x82>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d20:	e013      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0x92>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d30:	e00b      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start+0xa2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d40:	e003      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	6839      	ldr	r1, [r7, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 feb6 	bl	8004ac4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd8 <HAL_TIM_PWM_Start+0x138>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d107      	bne.n	8003d72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a18      	ldr	r2, [pc, #96]	@ (8003dd8 <HAL_TIM_PWM_Start+0x138>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xfa>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d84:	d009      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xfa>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a14      	ldr	r2, [pc, #80]	@ (8003ddc <HAL_TIM_PWM_Start+0x13c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xfa>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a12      	ldr	r2, [pc, #72]	@ (8003de0 <HAL_TIM_PWM_Start+0x140>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d111      	bne.n	8003dbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d010      	beq.n	8003dce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	e007      	b.n	8003dce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800

08003de4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e093      	b.n	8003f20 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fd feb1 	bl	8001b74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e28:	f023 0307 	bic.w	r3, r3, #7
 8003e2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f000 fbb7 	bl	80045ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	4313      	orrs	r3, r2
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e84:	f023 030c 	bic.w	r3, r3, #12
 8003e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	011a      	lsls	r2, r3, #4
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	031b      	lsls	r3, r3, #12
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d110      	bne.n	8003f7a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d102      	bne.n	8003f64 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f5e:	7b7b      	ldrb	r3, [r7, #13]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e089      	b.n	800407c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f78:	e031      	b.n	8003fde <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d110      	bne.n	8003fa2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f80:	7bbb      	ldrb	r3, [r7, #14]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f86:	7b3b      	ldrb	r3, [r7, #12]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e075      	b.n	800407c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fa0:	e01d      	b.n	8003fde <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa8:	7bbb      	ldrb	r3, [r7, #14]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d105      	bne.n	8003fba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fae:	7b7b      	ldrb	r3, [r7, #13]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fb4:	7b3b      	ldrb	r3, [r7, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e05e      	b.n	800407c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_TIM_Encoder_Start_IT+0xc4>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d010      	beq.n	800400c <HAL_TIM_Encoder_Start_IT+0xe4>
 8003fea:	e01f      	b.n	800402c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fd65 	bl	8004ac4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0202 	orr.w	r2, r2, #2
 8004008:	60da      	str	r2, [r3, #12]
      break;
 800400a:	e02e      	b.n	800406a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	2104      	movs	r1, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fd55 	bl	8004ac4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0204 	orr.w	r2, r2, #4
 8004028:	60da      	str	r2, [r3, #12]
      break;
 800402a:	e01e      	b.n	800406a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fd45 	bl	8004ac4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	2104      	movs	r1, #4
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fd3e 	bl	8004ac4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0202 	orr.w	r2, r2, #2
 8004056:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0204 	orr.w	r2, r2, #4
 8004066:	60da      	str	r2, [r3, #12]
      break;
 8004068:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d020      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0202 	mvn.w	r2, #2
 80040b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd fc18 	bl	8001904 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fa4d 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fa53 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d020      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0204 	mvn.w	r2, #4
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fbf2 	bl	8001904 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa27 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fa2d 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d020      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0208 	mvn.w	r2, #8
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fd fbcc 	bl	8001904 <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa01 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fa07 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d020      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0210 	mvn.w	r2, #16
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd fba6 	bl	8001904 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9db 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f9e1 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0201 	mvn.w	r2, #1
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fbb2 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00c      	beq.n	8004214 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fd34 	bl	8004c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9b1 	bl	800459a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0220 	mvn.w	r2, #32
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fd07 	bl	8004c6a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800427e:	2302      	movs	r3, #2
 8004280:	e0ae      	b.n	80043e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	f200 809f 	bhi.w	80043d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004292:	a201      	add	r2, pc, #4	@ (adr r2, 8004298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080043d1 	.word	0x080043d1
 80042a0:	080043d1 	.word	0x080043d1
 80042a4:	080043d1 	.word	0x080043d1
 80042a8:	0800430d 	.word	0x0800430d
 80042ac:	080043d1 	.word	0x080043d1
 80042b0:	080043d1 	.word	0x080043d1
 80042b4:	080043d1 	.word	0x080043d1
 80042b8:	0800434f 	.word	0x0800434f
 80042bc:	080043d1 	.word	0x080043d1
 80042c0:	080043d1 	.word	0x080043d1
 80042c4:	080043d1 	.word	0x080043d1
 80042c8:	0800438f 	.word	0x0800438f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f9d8 	bl	8004688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e064      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fa1e 	bl	8004754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e043      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fa67 	bl	8004828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e023      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fab1 	bl	80048fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
      break;
 80043d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_ConfigClockSource+0x1c>
 8004400:	2302      	movs	r3, #2
 8004402:	e0b4      	b.n	800456e <HAL_TIM_ConfigClockSource+0x186>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800442a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800443c:	d03e      	beq.n	80044bc <HAL_TIM_ConfigClockSource+0xd4>
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004442:	f200 8087 	bhi.w	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444a:	f000 8086 	beq.w	800455a <HAL_TIM_ConfigClockSource+0x172>
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004452:	d87f      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b70      	cmp	r3, #112	@ 0x70
 8004456:	d01a      	beq.n	800448e <HAL_TIM_ConfigClockSource+0xa6>
 8004458:	2b70      	cmp	r3, #112	@ 0x70
 800445a:	d87b      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b60      	cmp	r3, #96	@ 0x60
 800445e:	d050      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x11a>
 8004460:	2b60      	cmp	r3, #96	@ 0x60
 8004462:	d877      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b50      	cmp	r3, #80	@ 0x50
 8004466:	d03c      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004468:	2b50      	cmp	r3, #80	@ 0x50
 800446a:	d873      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b40      	cmp	r3, #64	@ 0x40
 800446e:	d058      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x13a>
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d86f      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b30      	cmp	r3, #48	@ 0x30
 8004476:	d064      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	2b30      	cmp	r3, #48	@ 0x30
 800447a:	d86b      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b20      	cmp	r3, #32
 800447e:	d060      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004480:	2b20      	cmp	r3, #32
 8004482:	d867      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d05c      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004488:	2b10      	cmp	r3, #16
 800448a:	d05a      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 800448c:	e062      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800449e:	f000 faf2 	bl	8004a86 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	609a      	str	r2, [r3, #8]
      break;
 80044ba:	e04f      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044cc:	f000 fadb 	bl	8004a86 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044de:	609a      	str	r2, [r3, #8]
      break;
 80044e0:	e03c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	461a      	mov	r2, r3
 80044f0:	f000 fa52 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2150      	movs	r1, #80	@ 0x50
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 faa9 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 8004500:	e02c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800450e:	461a      	mov	r2, r3
 8004510:	f000 fa70 	bl	80049f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2160      	movs	r1, #96	@ 0x60
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fa99 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 8004520:	e01c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	461a      	mov	r2, r3
 8004530:	f000 fa32 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2140      	movs	r1, #64	@ 0x40
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fa89 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 8004540:	e00c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f000 fa80 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 8004552:	e003      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e000      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800455a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a2f      	ldr	r2, [pc, #188]	@ (800467c <TIM_Base_SetConfig+0xd0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0x30>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0x30>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004680 <TIM_Base_SetConfig+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0x30>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004684 <TIM_Base_SetConfig+0xd8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a22      	ldr	r2, [pc, #136]	@ (800467c <TIM_Base_SetConfig+0xd0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00b      	beq.n	800460e <TIM_Base_SetConfig+0x62>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fc:	d007      	beq.n	800460e <TIM_Base_SetConfig+0x62>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1f      	ldr	r2, [pc, #124]	@ (8004680 <TIM_Base_SetConfig+0xd4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_Base_SetConfig+0x62>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <TIM_Base_SetConfig+0xd8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d108      	bne.n	8004620 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a0d      	ldr	r2, [pc, #52]	@ (800467c <TIM_Base_SetConfig+0xd0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d103      	bne.n	8004654 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	611a      	str	r2, [r3, #16]
  }
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800

08004688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 0201 	bic.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 0302 	bic.w	r3, r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <TIM_OC1_SetConfig+0xc8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10c      	bne.n	80046fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0308 	bic.w	r3, r3, #8
 80046ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a13      	ldr	r2, [pc, #76]	@ (8004750 <TIM_OC1_SetConfig+0xc8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800470c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40012c00 	.word	0x40012c00

08004754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f023 0210 	bic.w	r2, r3, #16
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800478a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0320 	bic.w	r3, r3, #32
 800479e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <TIM_OC2_SetConfig+0xd0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10d      	bne.n	80047d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <TIM_OC2_SetConfig+0xd0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d113      	bne.n	8004800 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr
 8004824:	40012c00 	.word	0x40012c00

08004828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1d      	ldr	r2, [pc, #116]	@ (80048f8 <TIM_OC3_SetConfig+0xd0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10d      	bne.n	80048a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800488c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <TIM_OC3_SetConfig+0xd0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d113      	bne.n	80048d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00

080048fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0f      	ldr	r2, [pc, #60]	@ (8004994 <TIM_OC4_SetConfig+0x98>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d109      	bne.n	8004970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	019b      	lsls	r3, r3, #6
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0210 	bic.w	r2, r3, #16
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	031b      	lsls	r3, r3, #12
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f043 0307 	orr.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	021a      	lsls	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	609a      	str	r2, [r3, #8]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1a      	ldr	r2, [r3, #32]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1a      	ldr	r2, [r3, #32]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e046      	b.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b70:	d009      	beq.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a10      	ldr	r2, [pc, #64]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d10c      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	40012c00 	.word	0x40012c00
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800

08004bc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e03d      	b.n	8004c60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr

08004c6a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e042      	b.n	8004d26 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fd f84b 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2224      	movs	r2, #36	@ 0x24
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cd0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f82c 	bl	8004d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ce6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cf6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d6a:	f023 030c 	bic.w	r3, r3, #12
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2c      	ldr	r2, [pc, #176]	@ (8004e44 <UART_SetConfig+0x114>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d103      	bne.n	8004da0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d98:	f7fe fda0 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	e002      	b.n	8004da6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004da0:	f7fe fd88 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004da4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009a      	lsls	r2, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	4a22      	ldr	r2, [pc, #136]	@ (8004e48 <UART_SetConfig+0x118>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	0119      	lsls	r1, r3, #4
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009a      	lsls	r2, r3, #2
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e48 <UART_SetConfig+0x118>)
 8004dde:	fba3 0302 	umull	r0, r3, r3, r2
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2064      	movs	r0, #100	@ 0x64
 8004de6:	fb00 f303 	mul.w	r3, r0, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	3332      	adds	r3, #50	@ 0x32
 8004df0:	4a15      	ldr	r2, [pc, #84]	@ (8004e48 <UART_SetConfig+0x118>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dfc:	4419      	add	r1, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009a      	lsls	r2, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e14:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <UART_SetConfig+0x118>)
 8004e16:	fba3 0302 	umull	r0, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2064      	movs	r0, #100	@ 0x64
 8004e1e:	fb00 f303 	mul.w	r3, r0, r3
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	3332      	adds	r3, #50	@ 0x32
 8004e28:	4a07      	ldr	r2, [pc, #28]	@ (8004e48 <UART_SetConfig+0x118>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	f003 020f 	and.w	r2, r3, #15
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	440a      	add	r2, r1
 8004e3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40013800 	.word	0x40013800
 8004e48:	51eb851f 	.word	0x51eb851f

08004e4c <memset>:
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4402      	add	r2, r0
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d100      	bne.n	8004e56 <memset+0xa>
 8004e54:	4770      	bx	lr
 8004e56:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5a:	e7f9      	b.n	8004e50 <memset+0x4>

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	2600      	movs	r6, #0
 8004e60:	4d0c      	ldr	r5, [pc, #48]	@ (8004e94 <__libc_init_array+0x38>)
 8004e62:	4c0d      	ldr	r4, [pc, #52]	@ (8004e98 <__libc_init_array+0x3c>)
 8004e64:	1b64      	subs	r4, r4, r5
 8004e66:	10a4      	asrs	r4, r4, #2
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	f000 f81a 	bl	8004ea4 <_init>
 8004e70:	2600      	movs	r6, #0
 8004e72:	4d0a      	ldr	r5, [pc, #40]	@ (8004e9c <__libc_init_array+0x40>)
 8004e74:	4c0a      	ldr	r4, [pc, #40]	@ (8004ea0 <__libc_init_array+0x44>)
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	10a4      	asrs	r4, r4, #2
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	08004ee8 	.word	0x08004ee8
 8004e98:	08004ee8 	.word	0x08004ee8
 8004e9c:	08004ee8 	.word	0x08004ee8
 8004ea0:	08004eec 	.word	0x08004eec

08004ea4 <_init>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr

08004eb0 <_fini>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	bf00      	nop
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr
