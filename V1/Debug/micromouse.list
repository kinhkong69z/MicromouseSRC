
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008008  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08008118  08008118  00009118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b8  080084b8  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  080084b8  080084b8  000094b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c0  080084c0  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c0  080084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084c4  080084c4  000094c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080084c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001e0  080086a8  0000a1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  080086a8  0000a70c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b815  00000000  00000000  0000a209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399b  00000000  00000000  00025a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c66d  00000000  00000000  000293b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  00035a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecd  00000000  00000000  00036d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd5b  00000000  00000000  00037c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219f8  00000000  00000000  00053970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094d1f  00000000  00000000  00075368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a087  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004800  00000000  00000000  0010a0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  0010e8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008100 	.word	0x08008100

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008100 	.word	0x08008100

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <update_speed>:
float ACC = 1500; // mm/s/s
float PREV_SPEED = 0;
float OMEGA = 0;
uint16_t cnt_cell = 0;

void update_speed(uint32_t dt, uint8_t state) {
 800115c:	b510      	push	{r4, lr}
	if (state == 1) {
 800115e:	2901      	cmp	r1, #1
 8001160:	d01c      	beq.n	800119c <update_speed+0x40>
		_SPEED = ACC * dt / 1000000 + PREV_SPEED;
		if(_SPEED >= SPEED_MAX) _SPEED = SPEED_MAX;
		PREV_SPEED = _SPEED;
	}
	else if(state == 0){
 8001162:	2900      	cmp	r1, #0
 8001164:	d135      	bne.n	80011d2 <update_speed+0x76>
		_SPEED = - ACC * dt / 1000000 + PREV_SPEED;
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <update_speed+0x80>)
 8001168:	681c      	ldr	r4, [r3, #0]
 800116a:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 800116e:	f7ff fd91 	bl	8000c94 <__aeabi_ui2f>
 8001172:	4621      	mov	r1, r4
 8001174:	f7ff fde6 	bl	8000d44 <__aeabi_fmul>
 8001178:	4919      	ldr	r1, [pc, #100]	@ (80011e0 <update_speed+0x84>)
 800117a:	f7ff fe97 	bl	8000eac <__aeabi_fdiv>
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <update_speed+0x88>)
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	f7ff fcd7 	bl	8000b34 <__addsf3>
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <update_speed+0x8c>)
 8001188:	6018      	str	r0, [r3, #0]
		if(_SPEED <= 0) _SPEED = 0;
 800118a:	2100      	movs	r1, #0
 800118c:	f7ff ff82 	bl	8001094 <__aeabi_fcmple>
 8001190:	bb00      	cbnz	r0, 80011d4 <update_speed+0x78>
		PREV_SPEED = _SPEED;
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <update_speed+0x8c>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <update_speed+0x88>)
 8001198:	601a      	str	r2, [r3, #0]
	}
}
 800119a:	e01a      	b.n	80011d2 <update_speed+0x76>
		_SPEED = ACC * dt / 1000000 + PREV_SPEED;
 800119c:	f7ff fd7a 	bl	8000c94 <__aeabi_ui2f>
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <update_speed+0x80>)
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	f7ff fdce 	bl	8000d44 <__aeabi_fmul>
 80011a8:	490d      	ldr	r1, [pc, #52]	@ (80011e0 <update_speed+0x84>)
 80011aa:	f7ff fe7f 	bl	8000eac <__aeabi_fdiv>
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <update_speed+0x88>)
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	f7ff fcbf 	bl	8000b34 <__addsf3>
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <update_speed+0x8c>)
 80011b8:	6018      	str	r0, [r3, #0]
		if(_SPEED >= SPEED_MAX) _SPEED = SPEED_MAX;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <update_speed+0x90>)
 80011bc:	681c      	ldr	r4, [r3, #0]
 80011be:	4621      	mov	r1, r4
 80011c0:	f7ff ff72 	bl	80010a8 <__aeabi_fcmpge>
 80011c4:	b108      	cbz	r0, 80011ca <update_speed+0x6e>
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <update_speed+0x8c>)
 80011c8:	601c      	str	r4, [r3, #0]
		PREV_SPEED = _SPEED;
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <update_speed+0x8c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <update_speed+0x88>)
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	bd10      	pop	{r4, pc}
		if(_SPEED <= 0) _SPEED = 0;
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <update_speed+0x8c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e7da      	b.n	8001192 <update_speed+0x36>
 80011dc:	20000000 	.word	0x20000000
 80011e0:	49742400 	.word	0x49742400
 80011e4:	20000200 	.word	0x20000200
 80011e8:	20000204 	.word	0x20000204
 80011ec:	20000004 	.word	0x20000004

080011f0 <mm_to_cnt>:
float cnt_to_omega(uint32_t cnt_left, uint32_t cnt_right) {
	uint32_t cnt_delta = cnt_left - cnt_right;
	return (cnt_delta / mm_to_cnt(perimeter) * 360);
}

float mm_to_cnt(float distance) {
 80011f0:	b508      	push	{r3, lr}
	return distance * 815 / 106.81;
 80011f2:	4909      	ldr	r1, [pc, #36]	@ (8001218 <mm_to_cnt+0x28>)
 80011f4:	f7ff fda6 	bl	8000d44 <__aeabi_fmul>
 80011f8:	f7ff f916 	bl	8000428 <__aeabi_f2d>
 80011fc:	a304      	add	r3, pc, #16	@ (adr r3, 8001210 <mm_to_cnt+0x20>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff fa93 	bl	800072c <__aeabi_ddiv>
 8001206:	f7ff fc3f 	bl	8000a88 <__aeabi_d2f>
}
 800120a:	bd08      	pop	{r3, pc}
 800120c:	f3af 8000 	nop.w
 8001210:	0a3d70a4 	.word	0x0a3d70a4
 8001214:	405ab3d7 	.word	0x405ab3d7
 8001218:	444bc000 	.word	0x444bc000

0800121c <check_state>:
uint8_t check_state() {
 800121c:	b510      	push	{r4, lr}
	if (get(&mouse_state, mouse_state.index + 1) == 1) {
 800121e:	4811      	ldr	r0, [pc, #68]	@ (8001264 <check_state+0x48>)
 8001220:	68c1      	ldr	r1, [r0, #12]
 8001222:	3101      	adds	r1, #1
 8001224:	f000 fdc2 	bl	8001dac <get>
 8001228:	2801      	cmp	r0, #1
 800122a:	d016      	beq.n	800125a <check_state+0x3e>
		if (mm_to_cnt(180) - encoder_cnt_left >= mm_to_cnt(20)) {
 800122c:	480e      	ldr	r0, [pc, #56]	@ (8001268 <check_state+0x4c>)
 800122e:	f7ff ffdf 	bl	80011f0 <mm_to_cnt>
 8001232:	4604      	mov	r4, r0
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <check_state+0x50>)
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	f7ff fd30 	bl	8000c9c <__aeabi_i2f>
 800123c:	4601      	mov	r1, r0
 800123e:	4620      	mov	r0, r4
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_fsub>
 8001244:	4604      	mov	r4, r0
 8001246:	480a      	ldr	r0, [pc, #40]	@ (8001270 <check_state+0x54>)
 8001248:	f7ff ffd2 	bl	80011f0 <mm_to_cnt>
 800124c:	4601      	mov	r1, r0
 800124e:	4620      	mov	r0, r4
 8001250:	f7ff ff2a 	bl	80010a8 <__aeabi_fcmpge>
 8001254:	b118      	cbz	r0, 800125e <check_state+0x42>
			return 0;
 8001256:	2000      	movs	r0, #0
}
 8001258:	bd10      	pop	{r4, pc}
		return 1;
 800125a:	2001      	movs	r0, #1
 800125c:	e7fc      	b.n	8001258 <check_state+0x3c>
		return 1;
 800125e:	2001      	movs	r0, #1
 8001260:	e7fa      	b.n	8001258 <check_state+0x3c>
 8001262:	bf00      	nop
 8001264:	20000304 	.word	0x20000304
 8001268:	43340000 	.word	0x43340000
 800126c:	2000021c 	.word	0x2000021c
 8001270:	41a00000 	.word	0x41a00000

08001274 <Encoder_Init>:
uint16_t curr_en_cnt_right = 0;
uint16_t prev_en_cnt_right = 0;
float speed_right = 0;


void Encoder_Init (Encoder *encoder, TIM_HandleTypeDef *en_tim) {
 8001274:	b508      	push	{r3, lr}
 8001276:	4603      	mov	r3, r0
 8001278:	4608      	mov	r0, r1
	encoder->EN_TIM = en_tim;
 800127a:	6019      	str	r1, [r3, #0]
	HAL_TIM_Encoder_Start(en_tim, TIM_CHANNEL_ALL);
 800127c:	213c      	movs	r1, #60	@ 0x3c
 800127e:	f004 f835 	bl	80052ec <HAL_TIM_Encoder_Start>
}
 8001282:	bd08      	pop	{r3, pc}

08001284 <reset_en>:

void reset_en() {
	encoder_cnt_left = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	4a03      	ldr	r2, [pc, #12]	@ (8001294 <reset_en+0x10>)
 8001288:	6013      	str	r3, [r2, #0]
//	curr_en_cnt_left = 0;
//	prev_en_cnt_left = 0;

	encoder_cnt_right = 0;
 800128a:	4a03      	ldr	r2, [pc, #12]	@ (8001298 <reset_en+0x14>)
 800128c:	6013      	str	r3, [r2, #0]
//	curr_en_cnt_right = 0;
//	prev_en_cnt_right = 0;

	prev_distance = 0;
 800128e:	4a03      	ldr	r2, [pc, #12]	@ (800129c <reset_en+0x18>)
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	4770      	bx	lr
 8001294:	2000021c 	.word	0x2000021c
 8001298:	20000210 	.word	0x20000210
 800129c:	20000220 	.word	0x20000220

080012a0 <left_pulse_per_sec>:
	encoder_cnt_right += en_increase;
	prev_en_cnt_right = curr_en_cnt_right;
	speed_right = right_pulse_per_sec(0.01, en_increase);
}

float left_pulse_per_sec(float delta_time, int16_t count) { // delta_time is micro second
 80012a0:	b508      	push	{r3, lr}

	return (float) (count * 100);
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	fb01 f000 	mul.w	r0, r1, r0
 80012a8:	f7ff fcf8 	bl	8000c9c <__aeabi_i2f>
}
 80012ac:	bd08      	pop	{r3, pc}
	...

080012b0 <read_en_left>:
void read_en_left(Encoder *encoder) {
 80012b0:	b510      	push	{r4, lr}
	curr_en_cnt_left = __HAL_TIM_GET_COUNTER(encoder->EN_TIM);
 80012b2:	6803      	ldr	r3, [r0, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <read_en_left+0x2c>)
 80012bc:	8013      	strh	r3, [r2, #0]
	int16_t en_increase = (int16_t) -(curr_en_cnt_left - prev_en_cnt_left);
 80012be:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <read_en_left+0x30>)
 80012c0:	8801      	ldrh	r1, [r0, #0]
 80012c2:	1ac9      	subs	r1, r1, r3
 80012c4:	b209      	sxth	r1, r1
	encoder_cnt_left += en_increase;
 80012c6:	4c07      	ldr	r4, [pc, #28]	@ (80012e4 <read_en_left+0x34>)
 80012c8:	6822      	ldr	r2, [r4, #0]
 80012ca:	440a      	add	r2, r1
 80012cc:	6022      	str	r2, [r4, #0]
	prev_en_cnt_left = curr_en_cnt_left;
 80012ce:	8003      	strh	r3, [r0, #0]
	speed_left = left_pulse_per_sec(0.01, en_increase);
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <read_en_left+0x38>)
 80012d2:	f7ff ffe5 	bl	80012a0 <left_pulse_per_sec>
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <read_en_left+0x3c>)
 80012d8:	6018      	str	r0, [r3, #0]
}
 80012da:	bd10      	pop	{r4, pc}
 80012dc:	2000021a 	.word	0x2000021a
 80012e0:	20000218 	.word	0x20000218
 80012e4:	2000021c 	.word	0x2000021c
 80012e8:	3c23d70a 	.word	0x3c23d70a
 80012ec:	20000214 	.word	0x20000214

080012f0 <right_pulse_per_sec>:

float right_pulse_per_sec(float delta_time, int16_t count) {
 80012f0:	b508      	push	{r3, lr}

	return (float) (count * 100);
 80012f2:	2064      	movs	r0, #100	@ 0x64
 80012f4:	fb01 f000 	mul.w	r0, r1, r0
 80012f8:	f7ff fcd0 	bl	8000c9c <__aeabi_i2f>
}
 80012fc:	bd08      	pop	{r3, pc}
	...

08001300 <read_en_right>:
void read_en_right(Encoder *encoder) {
 8001300:	b510      	push	{r4, lr}
	curr_en_cnt_right = __HAL_TIM_GET_COUNTER(encoder->EN_TIM);
 8001302:	6803      	ldr	r3, [r0, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	b29b      	uxth	r3, r3
 800130a:	4a08      	ldr	r2, [pc, #32]	@ (800132c <read_en_right+0x2c>)
 800130c:	8013      	strh	r3, [r2, #0]
	int16_t en_increase = (int16_t) -(curr_en_cnt_right - prev_en_cnt_right);
 800130e:	4808      	ldr	r0, [pc, #32]	@ (8001330 <read_en_right+0x30>)
 8001310:	8801      	ldrh	r1, [r0, #0]
 8001312:	1ac9      	subs	r1, r1, r3
 8001314:	b209      	sxth	r1, r1
	encoder_cnt_right += en_increase;
 8001316:	4c07      	ldr	r4, [pc, #28]	@ (8001334 <read_en_right+0x34>)
 8001318:	6822      	ldr	r2, [r4, #0]
 800131a:	440a      	add	r2, r1
 800131c:	6022      	str	r2, [r4, #0]
	prev_en_cnt_right = curr_en_cnt_right;
 800131e:	8003      	strh	r3, [r0, #0]
	speed_right = right_pulse_per_sec(0.01, en_increase);
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <read_en_right+0x38>)
 8001322:	f7ff ffe5 	bl	80012f0 <right_pulse_per_sec>
 8001326:	4b05      	ldr	r3, [pc, #20]	@ (800133c <read_en_right+0x3c>)
 8001328:	6018      	str	r0, [r3, #0]
}
 800132a:	bd10      	pop	{r4, pc}
 800132c:	2000020e 	.word	0x2000020e
 8001330:	2000020c 	.word	0x2000020c
 8001334:	20000210 	.word	0x20000210
 8001338:	3c23d70a 	.word	0x3c23d70a
 800133c:	20000208 	.word	0x20000208

08001340 <mode>:

uint16_t SPEED = 200;
uint8_t BTN_STATE1 = 0;
uint8_t BTN_STATE2 = 0;

void mode() {
 8001340:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001348:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <mode+0x68>)
 800134a:	f002 fa1c 	bl	8003786 <HAL_GPIO_WritePin>
	while(BTN_STATE1 < 1) {
 800134e:	e005      	b.n	800135c <mode+0x1c>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) {
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			wall_front_calibration();
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) {
 8001350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001354:	4815      	ldr	r0, [pc, #84]	@ (80013ac <mode+0x6c>)
 8001356:	f002 fa0f 	bl	8003778 <HAL_GPIO_ReadPin>
 800135a:	b9b8      	cbnz	r0, 800138c <mode+0x4c>
	while(BTN_STATE1 < 1) {
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <mode+0x70>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b9c3      	cbnz	r3, 8001394 <mode+0x54>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) {
 8001362:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001366:	4811      	ldr	r0, [pc, #68]	@ (80013ac <mode+0x6c>)
 8001368:	f002 fa06 	bl	8003778 <HAL_GPIO_ReadPin>
 800136c:	2800      	cmp	r0, #0
 800136e:	d0ef      	beq.n	8001350 <mode+0x10>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001370:	4c0d      	ldr	r4, [pc, #52]	@ (80013a8 <mode+0x68>)
 8001372:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001376:	4620      	mov	r0, r4
 8001378:	f002 fa0b 	bl	8003792 <HAL_GPIO_TogglePin>
			wall_front_calibration();
 800137c:	f000 fc2e 	bl	8001bdc <wall_front_calibration>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001380:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001384:	4620      	mov	r0, r4
 8001386:	f002 fa04 	bl	8003792 <HAL_GPIO_TogglePin>
 800138a:	e7e1      	b.n	8001350 <mode+0x10>
			BTN_STATE1 = 1;
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <mode+0x70>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e7e3      	b.n	800135c <mode+0x1c>
		}
	}
	delay_ms(2000);
 8001394:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001398:	f000 fcbe 	bl	8001d18 <delay_ms>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800139c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a0:	4801      	ldr	r0, [pc, #4]	@ (80013a8 <mode+0x68>)
 80013a2:	f002 f9f6 	bl	8003792 <HAL_GPIO_TogglePin>
}
 80013a6:	bd10      	pop	{r4, pc}
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	2000022c 	.word	0x2000022c

080013b4 <mouse_move>:

void mouse_move() {
 80013b4:	b508      	push	{r3, lr}
	switch (get(&mouse_state, mouse_state.index)) {
 80013b6:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <mouse_move+0x30>)
 80013b8:	68c1      	ldr	r1, [r0, #12]
 80013ba:	f000 fcf7 	bl	8001dac <get>
 80013be:	2803      	cmp	r0, #3
 80013c0:	d805      	bhi.n	80013ce <mouse_move+0x1a>
 80013c2:	e8df f000 	tbb	[pc, r0]
 80013c6:	0502      	.short	0x0502
 80013c8:	0b08      	.short	0x0b08
	case 0:
		Motor_stop();
 80013ca:	f000 f887 	bl	80014dc <Motor_stop>
		Turn_right90();
		break;
	default:
		break;
	}
}
 80013ce:	bd08      	pop	{r3, pc}
		Move_onecell();
 80013d0:	f000 f9ac 	bl	800172c <Move_onecell>
		break;
 80013d4:	e7fb      	b.n	80013ce <mouse_move+0x1a>
		Turn_left90();
 80013d6:	f000 f88f 	bl	80014f8 <Turn_left90>
		break;
 80013da:	e7f8      	b.n	80013ce <mouse_move+0x1a>
		Turn_right90();
 80013dc:	f000 f918 	bl	8001610 <Turn_right90>
}
 80013e0:	e7f5      	b.n	80013ce <mouse_move+0x1a>
 80013e2:	bf00      	nop
 80013e4:	20000304 	.word	0x20000304

080013e8 <Motor_Init>:
uint32_t prev_time_pid_forward = 0;
uint32_t prev_time_pid_rotation = 0;
int32_t debug_pwm = 0;

void Motor_Init(Motor *motor, TIM_HandleTypeDef *tim1, TIM_HandleTypeDef *tim2,
		uint16_t channel1, uint16_t channel2) {
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4684      	mov	ip, r0
 80013ec:	4608      	mov	r0, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	motor->M_TIM1 = tim1;
 80013f6:	f8cc 0000 	str.w	r0, [ip]
	motor->M_TIM2 = tim2;
 80013fa:	f8cc 2004 	str.w	r2, [ip, #4]
	motor->m_channel1 = channel1;
 80013fe:	f8ac 3008 	strh.w	r3, [ip, #8]
	motor->m_channel2 = channel2;
 8001402:	f8ac 500a 	strh.w	r5, [ip, #10]

	HAL_TIM_PWM_Start(tim1, channel1);
 8001406:	f003 ff03 	bl	8005210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(tim2, channel2);
 800140a:	4629      	mov	r1, r5
 800140c:	4620      	mov	r0, r4
 800140e:	f003 feff 	bl	8005210 <HAL_TIM_PWM_Start>
}
 8001412:	bd38      	pop	{r3, r4, r5, pc}

08001414 <Set_Motor_speed>:

void Set_Motor_speed(Motor *motor, int16_t speed) {
	if (speed > 0) {
 8001414:	2900      	cmp	r1, #0
 8001416:	dd2e      	ble.n	8001476 <Set_Motor_speed+0x62>
		__HAL_TIM_SET_COMPARE(motor->M_TIM1, motor->m_channel1, 0);
 8001418:	8903      	ldrh	r3, [r0, #8]
 800141a:	b94b      	cbnz	r3, 8001430 <Set_Motor_speed+0x1c>
 800141c:	6803      	ldr	r3, [r0, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, speed);
 8001424:	8943      	ldrh	r3, [r0, #10]
 8001426:	b9b3      	cbnz	r3, 8001456 <Set_Motor_speed+0x42>
 8001428:	6843      	ldr	r3, [r0, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6359      	str	r1, [r3, #52]	@ 0x34
 800142e:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(motor->M_TIM1, motor->m_channel1, 0);
 8001430:	2b04      	cmp	r3, #4
 8001432:	d006      	beq.n	8001442 <Set_Motor_speed+0x2e>
 8001434:	2b08      	cmp	r3, #8
 8001436:	d009      	beq.n	800144c <Set_Motor_speed+0x38>
 8001438:	6803      	ldr	r3, [r0, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001440:	e7f0      	b.n	8001424 <Set_Motor_speed+0x10>
 8001442:	6803      	ldr	r3, [r0, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	@ 0x38
 800144a:	e7eb      	b.n	8001424 <Set_Motor_speed+0x10>
 800144c:	6803      	ldr	r3, [r0, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001454:	e7e6      	b.n	8001424 <Set_Motor_speed+0x10>
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, speed);
 8001456:	2b04      	cmp	r3, #4
 8001458:	d005      	beq.n	8001466 <Set_Motor_speed+0x52>
 800145a:	2b08      	cmp	r3, #8
 800145c:	d007      	beq.n	800146e <Set_Motor_speed+0x5a>
 800145e:	6843      	ldr	r3, [r0, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6419      	str	r1, [r3, #64]	@ 0x40
 8001464:	4770      	bx	lr
 8001466:	6843      	ldr	r3, [r0, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6399      	str	r1, [r3, #56]	@ 0x38
 800146c:	4770      	bx	lr
 800146e:	6843      	ldr	r3, [r0, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8001474:	4770      	bx	lr
	} else {
		__HAL_TIM_SET_COMPARE(motor->M_TIM1, motor->m_channel1, -speed);
 8001476:	8903      	ldrh	r3, [r0, #8]
 8001478:	b953      	cbnz	r3, 8001490 <Set_Motor_speed+0x7c>
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4249      	negs	r1, r1
 8001480:	6359      	str	r1, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, 0);
 8001482:	8943      	ldrh	r3, [r0, #10]
 8001484:	b9bb      	cbnz	r3, 80014b6 <Set_Motor_speed+0xa2>
 8001486:	6843      	ldr	r3, [r0, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
 800148e:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(motor->M_TIM1, motor->m_channel1, -speed);
 8001490:	2b04      	cmp	r3, #4
 8001492:	d006      	beq.n	80014a2 <Set_Motor_speed+0x8e>
 8001494:	2b08      	cmp	r3, #8
 8001496:	d009      	beq.n	80014ac <Set_Motor_speed+0x98>
 8001498:	6803      	ldr	r3, [r0, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4249      	negs	r1, r1
 800149e:	6419      	str	r1, [r3, #64]	@ 0x40
 80014a0:	e7ef      	b.n	8001482 <Set_Motor_speed+0x6e>
 80014a2:	6803      	ldr	r3, [r0, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4249      	negs	r1, r1
 80014a8:	6399      	str	r1, [r3, #56]	@ 0x38
 80014aa:	e7ea      	b.n	8001482 <Set_Motor_speed+0x6e>
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4249      	negs	r1, r1
 80014b2:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80014b4:	e7e5      	b.n	8001482 <Set_Motor_speed+0x6e>
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, 0);
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d006      	beq.n	80014c8 <Set_Motor_speed+0xb4>
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d009      	beq.n	80014d2 <Set_Motor_speed+0xbe>
 80014be:	6843      	ldr	r3, [r0, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2200      	movs	r2, #0
 80014c4:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 80014c6:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(motor->M_TIM2, motor->m_channel2, 0);
 80014c8:	6843      	ldr	r3, [r0, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80014d0:	4770      	bx	lr
 80014d2:	6843      	ldr	r3, [r0, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014da:	4770      	bx	lr

080014dc <Motor_stop>:
	Motor_stop();
//	delay_ms(20);
	printf("%f\n", angle);
}

void Motor_stop() {
 80014dc:	b508      	push	{r3, lr}
	Set_Motor_speed(&motor_right, 0);
 80014de:	2100      	movs	r1, #0
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <Motor_stop+0x14>)
 80014e2:	f7ff ff97 	bl	8001414 <Set_Motor_speed>
	Set_Motor_speed(&motor_left, 0);
 80014e6:	2100      	movs	r1, #0
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <Motor_stop+0x18>)
 80014ea:	f7ff ff93 	bl	8001414 <Set_Motor_speed>
}
 80014ee:	bd08      	pop	{r3, pc}
 80014f0:	20000234 	.word	0x20000234
 80014f4:	20000240 	.word	0x20000240

080014f8 <Turn_left90>:
void Turn_left90() {
 80014f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	angle = 0;
 80014fc:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <Turn_left90+0xe8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	uint32_t prev_time = micros();
 8001502:	f000 fbeb 	bl	8001cdc <micros>
 8001506:	4604      	mov	r4, r0
	uint32_t curt = Millis;
 8001508:	4b36      	ldr	r3, [pc, #216]	@ (80015e4 <Turn_left90+0xec>)
 800150a:	681f      	ldr	r7, [r3, #0]
	PID_reset(&pid_forward_right);
 800150c:	4836      	ldr	r0, [pc, #216]	@ (80015e8 <Turn_left90+0xf0>)
 800150e:	f000 fa1f 	bl	8001950 <PID_reset>
	PID_reset(&pid_forward_left);
 8001512:	4836      	ldr	r0, [pc, #216]	@ (80015ec <Turn_left90+0xf4>)
 8001514:	f000 fa1c 	bl	8001950 <PID_reset>
	while (fabs(80 - angle) > 4) {
 8001518:	e047      	b.n	80015aa <Turn_left90+0xb2>
		MPU6050_getAngle(MPU6050.I2Cx, micros() - prev_time);
 800151a:	4b35      	ldr	r3, [pc, #212]	@ (80015f0 <Turn_left90+0xf8>)
 800151c:	681d      	ldr	r5, [r3, #0]
 800151e:	f000 fbdd 	bl	8001cdc <micros>
 8001522:	1b01      	subs	r1, r0, r4
 8001524:	4628      	mov	r0, r5
 8001526:	f001 f8d7 	bl	80026d8 <MPU6050_getAngle>
		int16_t pwm_target = 25 * (80 - angle);
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <Turn_left90+0xe8>)
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	4831      	ldr	r0, [pc, #196]	@ (80015f4 <Turn_left90+0xfc>)
 8001530:	f7ff fafe 	bl	8000b30 <__aeabi_fsub>
 8001534:	4930      	ldr	r1, [pc, #192]	@ (80015f8 <Turn_left90+0x100>)
 8001536:	f7ff fc05 	bl	8000d44 <__aeabi_fmul>
 800153a:	f7ff fdc9 	bl	80010d0 <__aeabi_f2iz>
 800153e:	b205      	sxth	r5, r0
		int16_t left_pwm = PID_calc(&pid_forward_left, -pwm_target, speed_left,
 8001540:	4268      	negs	r0, r5
 8001542:	f7ff fbab 	bl	8000c9c <__aeabi_i2f>
 8001546:	4606      	mov	r6, r0
 8001548:	4b2c      	ldr	r3, [pc, #176]	@ (80015fc <Turn_left90+0x104>)
 800154a:	f8d3 8000 	ldr.w	r8, [r3]
				micros() - prev_time);
 800154e:	f000 fbc5 	bl	8001cdc <micros>
		int16_t left_pwm = PID_calc(&pid_forward_left, -pwm_target, speed_left,
 8001552:	1b03      	subs	r3, r0, r4
 8001554:	4642      	mov	r2, r8
 8001556:	4631      	mov	r1, r6
 8001558:	4824      	ldr	r0, [pc, #144]	@ (80015ec <Turn_left90+0xf4>)
 800155a:	f000 f9b7 	bl	80018cc <PID_calc>
 800155e:	f7ff fdb7 	bl	80010d0 <__aeabi_f2iz>
 8001562:	b206      	sxth	r6, r0
		int16_t right_pwm = PID_calc(&pid_forward_right, pwm_target,
 8001564:	4628      	mov	r0, r5
 8001566:	f7ff fb99 	bl	8000c9c <__aeabi_i2f>
 800156a:	4605      	mov	r5, r0
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <Turn_left90+0x108>)
 800156e:	f8d3 8000 	ldr.w	r8, [r3]
				speed_right, micros() - prev_time);
 8001572:	f000 fbb3 	bl	8001cdc <micros>
		int16_t right_pwm = PID_calc(&pid_forward_right, pwm_target,
 8001576:	1b03      	subs	r3, r0, r4
 8001578:	4642      	mov	r2, r8
 800157a:	4629      	mov	r1, r5
 800157c:	481a      	ldr	r0, [pc, #104]	@ (80015e8 <Turn_left90+0xf0>)
 800157e:	f000 f9a5 	bl	80018cc <PID_calc>
 8001582:	f7ff fda5 	bl	80010d0 <__aeabi_f2iz>
 8001586:	b205      	sxth	r5, r0
		prev_time = micros();
 8001588:	f000 fba8 	bl	8001cdc <micros>
 800158c:	4604      	mov	r4, r0
		Set_Motor_speed(&motor_left, left_pwm);
 800158e:	4631      	mov	r1, r6
 8001590:	481c      	ldr	r0, [pc, #112]	@ (8001604 <Turn_left90+0x10c>)
 8001592:	f7ff ff3f 	bl	8001414 <Set_Motor_speed>
		Set_Motor_speed(&motor_right, right_pwm);
 8001596:	4629      	mov	r1, r5
 8001598:	481b      	ldr	r0, [pc, #108]	@ (8001608 <Turn_left90+0x110>)
 800159a:	f7ff ff3b 	bl	8001414 <Set_Motor_speed>
		elapseMillis(2, curt);
 800159e:	4639      	mov	r1, r7
 80015a0:	2002      	movs	r0, #2
 80015a2:	f000 fbd2 	bl	8001d4a <elapseMillis>
		curt = Millis;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <Turn_left90+0xec>)
 80015a8:	681f      	ldr	r7, [r3, #0]
	while (fabs(80 - angle) > 4) {
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <Turn_left90+0xe8>)
 80015ac:	681d      	ldr	r5, [r3, #0]
 80015ae:	4629      	mov	r1, r5
 80015b0:	4810      	ldr	r0, [pc, #64]	@ (80015f4 <Turn_left90+0xfc>)
 80015b2:	f7ff fabd 	bl	8000b30 <__aeabi_fsub>
 80015b6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80015ba:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80015be:	f7ff fd7d 	bl	80010bc <__aeabi_fcmpgt>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d1a9      	bne.n	800151a <Turn_left90+0x22>
	printf("%f\n", angle);
 80015c6:	4628      	mov	r0, r5
 80015c8:	f7fe ff2e 	bl	8000428 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	480e      	ldr	r0, [pc, #56]	@ (800160c <Turn_left90+0x114>)
 80015d2:	f004 fec1 	bl	8006358 <iprintf>
	Motor_stop();
 80015d6:	f7ff ff81 	bl	80014dc <Motor_stop>
}
 80015da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015de:	bf00      	nop
 80015e0:	20000550 	.word	0x20000550
 80015e4:	200002fc 	.word	0x200002fc
 80015e8:	200002a0 	.word	0x200002a0
 80015ec:	200002b4 	.word	0x200002b4
 80015f0:	20000558 	.word	0x20000558
 80015f4:	42a00000 	.word	0x42a00000
 80015f8:	41c80000 	.word	0x41c80000
 80015fc:	20000214 	.word	0x20000214
 8001600:	20000208 	.word	0x20000208
 8001604:	20000240 	.word	0x20000240
 8001608:	20000234 	.word	0x20000234
 800160c:	08008118 	.word	0x08008118

08001610 <Turn_right90>:
void Turn_right90() {
 8001610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	angle = 0;
 8001614:	4b39      	ldr	r3, [pc, #228]	@ (80016fc <Turn_right90+0xec>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
	reset_en();
 800161a:	f7ff fe33 	bl	8001284 <reset_en>
	uint32_t prev_time = micros();
 800161e:	f000 fb5d 	bl	8001cdc <micros>
 8001622:	4604      	mov	r4, r0
	uint32_t curt = Millis;
 8001624:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <Turn_right90+0xf0>)
 8001626:	681f      	ldr	r7, [r3, #0]
	PID_reset(&pid_forward_right);
 8001628:	4836      	ldr	r0, [pc, #216]	@ (8001704 <Turn_right90+0xf4>)
 800162a:	f000 f991 	bl	8001950 <PID_reset>
	PID_reset(&pid_forward_left);
 800162e:	4836      	ldr	r0, [pc, #216]	@ (8001708 <Turn_right90+0xf8>)
 8001630:	f000 f98e 	bl	8001950 <PID_reset>
	while (fabs(80 + angle) > 4) {
 8001634:	e047      	b.n	80016c6 <Turn_right90+0xb6>
		MPU6050_getAngle(MPU6050.I2Cx, micros() - prev_time);
 8001636:	4b35      	ldr	r3, [pc, #212]	@ (800170c <Turn_right90+0xfc>)
 8001638:	681d      	ldr	r5, [r3, #0]
 800163a:	f000 fb4f 	bl	8001cdc <micros>
 800163e:	1b01      	subs	r1, r0, r4
 8001640:	4628      	mov	r0, r5
 8001642:	f001 f849 	bl	80026d8 <MPU6050_getAngle>
		int16_t pwm_target = 25 * (80 + angle);
 8001646:	4932      	ldr	r1, [pc, #200]	@ (8001710 <Turn_right90+0x100>)
 8001648:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <Turn_right90+0xec>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	f7ff fa72 	bl	8000b34 <__addsf3>
 8001650:	4930      	ldr	r1, [pc, #192]	@ (8001714 <Turn_right90+0x104>)
 8001652:	f7ff fb77 	bl	8000d44 <__aeabi_fmul>
 8001656:	f7ff fd3b 	bl	80010d0 <__aeabi_f2iz>
 800165a:	b205      	sxth	r5, r0
		int16_t left_pwm = PID_calc(&pid_forward_left, pwm_target, speed_left,
 800165c:	4628      	mov	r0, r5
 800165e:	f7ff fb1d 	bl	8000c9c <__aeabi_i2f>
 8001662:	4606      	mov	r6, r0
 8001664:	4b2c      	ldr	r3, [pc, #176]	@ (8001718 <Turn_right90+0x108>)
 8001666:	f8d3 8000 	ldr.w	r8, [r3]
				micros() - prev_time);
 800166a:	f000 fb37 	bl	8001cdc <micros>
		int16_t left_pwm = PID_calc(&pid_forward_left, pwm_target, speed_left,
 800166e:	1b03      	subs	r3, r0, r4
 8001670:	4642      	mov	r2, r8
 8001672:	4631      	mov	r1, r6
 8001674:	4824      	ldr	r0, [pc, #144]	@ (8001708 <Turn_right90+0xf8>)
 8001676:	f000 f929 	bl	80018cc <PID_calc>
 800167a:	f7ff fd29 	bl	80010d0 <__aeabi_f2iz>
 800167e:	b206      	sxth	r6, r0
		int16_t right_pwm = PID_calc(&pid_forward_right, -pwm_target,
 8001680:	4268      	negs	r0, r5
 8001682:	f7ff fb0b 	bl	8000c9c <__aeabi_i2f>
 8001686:	4605      	mov	r5, r0
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <Turn_right90+0x10c>)
 800168a:	f8d3 8000 	ldr.w	r8, [r3]
				speed_right, micros() - prev_time);
 800168e:	f000 fb25 	bl	8001cdc <micros>
		int16_t right_pwm = PID_calc(&pid_forward_right, -pwm_target,
 8001692:	1b03      	subs	r3, r0, r4
 8001694:	4642      	mov	r2, r8
 8001696:	4629      	mov	r1, r5
 8001698:	481a      	ldr	r0, [pc, #104]	@ (8001704 <Turn_right90+0xf4>)
 800169a:	f000 f917 	bl	80018cc <PID_calc>
 800169e:	f7ff fd17 	bl	80010d0 <__aeabi_f2iz>
 80016a2:	b205      	sxth	r5, r0
		prev_time = micros();
 80016a4:	f000 fb1a 	bl	8001cdc <micros>
 80016a8:	4604      	mov	r4, r0
		Set_Motor_speed(&motor_left, left_pwm);
 80016aa:	4631      	mov	r1, r6
 80016ac:	481c      	ldr	r0, [pc, #112]	@ (8001720 <Turn_right90+0x110>)
 80016ae:	f7ff feb1 	bl	8001414 <Set_Motor_speed>
		Set_Motor_speed(&motor_right, right_pwm);
 80016b2:	4629      	mov	r1, r5
 80016b4:	481b      	ldr	r0, [pc, #108]	@ (8001724 <Turn_right90+0x114>)
 80016b6:	f7ff fead 	bl	8001414 <Set_Motor_speed>
		elapseMillis(2, curt);
 80016ba:	4639      	mov	r1, r7
 80016bc:	2002      	movs	r0, #2
 80016be:	f000 fb44 	bl	8001d4a <elapseMillis>
		curt = Millis;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <Turn_right90+0xf0>)
 80016c4:	681f      	ldr	r7, [r3, #0]
	while (fabs(80 + angle) > 4) {
 80016c6:	4912      	ldr	r1, [pc, #72]	@ (8001710 <Turn_right90+0x100>)
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <Turn_right90+0xec>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	f7ff fa32 	bl	8000b34 <__addsf3>
 80016d0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80016d4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80016d8:	f7ff fcf0 	bl	80010bc <__aeabi_fcmpgt>
 80016dc:	2800      	cmp	r0, #0
 80016de:	d1aa      	bne.n	8001636 <Turn_right90+0x26>
	Motor_stop();
 80016e0:	f7ff fefc 	bl	80014dc <Motor_stop>
	printf("%f\n", angle);
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <Turn_right90+0xec>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	f7fe fe9e 	bl	8000428 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	480d      	ldr	r0, [pc, #52]	@ (8001728 <Turn_right90+0x118>)
 80016f2:	f004 fe31 	bl	8006358 <iprintf>
}
 80016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016fa:	bf00      	nop
 80016fc:	20000550 	.word	0x20000550
 8001700:	200002fc 	.word	0x200002fc
 8001704:	200002a0 	.word	0x200002a0
 8001708:	200002b4 	.word	0x200002b4
 800170c:	20000558 	.word	0x20000558
 8001710:	42a00000 	.word	0x42a00000
 8001714:	41c80000 	.word	0x41c80000
 8001718:	20000214 	.word	0x20000214
 800171c:	20000208 	.word	0x20000208
 8001720:	20000240 	.word	0x20000240
 8001724:	20000234 	.word	0x20000234
 8001728:	08008118 	.word	0x08008118

0800172c <Move_onecell>:
	Set_Motor_speed(&motor_left, (WALL_FL - IR_FL) * 10); //set left motor speed
	Set_Motor_speed(&motor_right, (WALL_FR - IR_FR) * 10); //set right motor speed
	elapseMicros(1, curt); //elapse 1000 micro seconds
}

void Move_onecell() {
 800172c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	reset_en();
 8001730:	f7ff fda8 	bl	8001284 <reset_en>
	uint8_t state = check_state();
 8001734:	f7ff fd72 	bl	800121c <check_state>
 8001738:	4607      	mov	r7, r0
	if (state == 2) {
 800173a:	2802      	cmp	r0, #2
 800173c:	d00b      	beq.n	8001756 <Move_onecell+0x2a>
		PID_reset(&pid_steering);
		PID_reset(&pid_wall_stable);
		PID_reset(&pid_forward_right);
		PID_reset(&pid_forward_left);
	}
	uint32_t prev_time = micros();
 800173e:	f000 facd 	bl	8001cdc <micros>
 8001742:	4605      	mov	r5, r0
	uint32_t distance = mm_to_cnt(onecell);
 8001744:	484f      	ldr	r0, [pc, #316]	@ (8001884 <Move_onecell+0x158>)
 8001746:	f7ff fd53 	bl	80011f0 <mm_to_cnt>
 800174a:	f7ff fce7 	bl	800111c <__aeabi_f2uiz>
 800174e:	4606      	mov	r6, r0
	uint32_t curt = Millis;
 8001750:	4b4d      	ldr	r3, [pc, #308]	@ (8001888 <Move_onecell+0x15c>)
 8001752:	681b      	ldr	r3, [r3, #0]
	int16_t right_pwm;
	int16_t left_pwm;
	while (((distance > encoder_cnt_left) || (distance > encoder_cnt_right))){
 8001754:	e022      	b.n	800179c <Move_onecell+0x70>
		PID_reset(&pid_steering);
 8001756:	484d      	ldr	r0, [pc, #308]	@ (800188c <Move_onecell+0x160>)
 8001758:	f000 f8fa 	bl	8001950 <PID_reset>
		PID_reset(&pid_wall_stable);
 800175c:	484c      	ldr	r0, [pc, #304]	@ (8001890 <Move_onecell+0x164>)
 800175e:	f000 f8f7 	bl	8001950 <PID_reset>
		PID_reset(&pid_forward_right);
 8001762:	484c      	ldr	r0, [pc, #304]	@ (8001894 <Move_onecell+0x168>)
 8001764:	f000 f8f4 	bl	8001950 <PID_reset>
		PID_reset(&pid_forward_left);
 8001768:	484b      	ldr	r0, [pc, #300]	@ (8001898 <Move_onecell+0x16c>)
 800176a:	f000 f8f1 	bl	8001950 <PID_reset>
 800176e:	e7e6      	b.n	800173e <Move_onecell+0x12>
		debug_pwm = left_pwm;
		left_pwm += error_steering + error_wall;
		right_pwm += -error_steering - error_wall;

		if (left_pwm > 10000)
			left_pwm = 10000;
 8001770:	f242 7110 	movw	r1, #10000	@ 0x2710
		if (left_pwm < 0)
			left_pwm = 0;
		if (right_pwm > 10000)
 8001774:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001778:	429c      	cmp	r4, r3
 800177a:	dc03      	bgt.n	8001784 <Move_onecell+0x58>
			right_pwm = 10000;
		if (right_pwm < 0)
 800177c:	2c00      	cmp	r4, #0
 800177e:	da03      	bge.n	8001788 <Move_onecell+0x5c>
			right_pwm = 0;
 8001780:	2400      	movs	r4, #0
 8001782:	e001      	b.n	8001788 <Move_onecell+0x5c>
			right_pwm = 10000;
 8001784:	f242 7410 	movw	r4, #10000	@ 0x2710

		Set_Motor_speed(&motor_left, left_pwm);
 8001788:	4844      	ldr	r0, [pc, #272]	@ (800189c <Move_onecell+0x170>)
 800178a:	f7ff fe43 	bl	8001414 <Set_Motor_speed>
		Set_Motor_speed(&motor_right, right_pwm);
 800178e:	4621      	mov	r1, r4
 8001790:	4843      	ldr	r0, [pc, #268]	@ (80018a0 <Move_onecell+0x174>)
 8001792:	f7ff fe3f 	bl	8001414 <Set_Motor_speed>

//		elapseMillis(2, curt);
//		curt = Millis;
		delay_ms(1);
 8001796:	2001      	movs	r0, #1
 8001798:	f000 fabe 	bl	8001d18 <delay_ms>
	while (((distance > encoder_cnt_left) || (distance > encoder_cnt_right))){
 800179c:	4b41      	ldr	r3, [pc, #260]	@ (80018a4 <Move_onecell+0x178>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	42b3      	cmp	r3, r6
 80017a2:	d303      	bcc.n	80017ac <Move_onecell+0x80>
 80017a4:	4b40      	ldr	r3, [pc, #256]	@ (80018a8 <Move_onecell+0x17c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	42b3      	cmp	r3, r6
 80017aa:	d269      	bcs.n	8001880 <Move_onecell+0x154>
		update_speed(micros() - prev_time, state);
 80017ac:	f000 fa96 	bl	8001cdc <micros>
 80017b0:	4639      	mov	r1, r7
 80017b2:	1b40      	subs	r0, r0, r5
 80017b4:	f7ff fcd2 	bl	800115c <update_speed>
		left_pwm = PID_calc(&pid_forward_left, mm_to_cnt(_SPEED), speed_left,
 80017b8:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 80018ac <Move_onecell+0x180>
 80017bc:	f8d9 0000 	ldr.w	r0, [r9]
 80017c0:	f7ff fd16 	bl	80011f0 <mm_to_cnt>
 80017c4:	4604      	mov	r4, r0
 80017c6:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <Move_onecell+0x184>)
 80017c8:	f8d3 8000 	ldr.w	r8, [r3]
				micros() - prev_time);
 80017cc:	f000 fa86 	bl	8001cdc <micros>
		left_pwm = PID_calc(&pid_forward_left, mm_to_cnt(_SPEED), speed_left,
 80017d0:	1b43      	subs	r3, r0, r5
 80017d2:	4642      	mov	r2, r8
 80017d4:	4621      	mov	r1, r4
 80017d6:	4830      	ldr	r0, [pc, #192]	@ (8001898 <Move_onecell+0x16c>)
 80017d8:	f000 f878 	bl	80018cc <PID_calc>
 80017dc:	f7ff fc78 	bl	80010d0 <__aeabi_f2iz>
 80017e0:	fa0f f880 	sxth.w	r8, r0
		right_pwm = PID_calc(&pid_forward_right, mm_to_cnt(_SPEED), speed_right,
 80017e4:	f8d9 0000 	ldr.w	r0, [r9]
 80017e8:	f7ff fd02 	bl	80011f0 <mm_to_cnt>
 80017ec:	4604      	mov	r4, r0
 80017ee:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <Move_onecell+0x188>)
 80017f0:	f8d3 9000 	ldr.w	r9, [r3]
				micros() - prev_time);
 80017f4:	f000 fa72 	bl	8001cdc <micros>
		right_pwm = PID_calc(&pid_forward_right, mm_to_cnt(_SPEED), speed_right,
 80017f8:	1b43      	subs	r3, r0, r5
 80017fa:	464a      	mov	r2, r9
 80017fc:	4621      	mov	r1, r4
 80017fe:	4825      	ldr	r0, [pc, #148]	@ (8001894 <Move_onecell+0x168>)
 8001800:	f000 f864 	bl	80018cc <PID_calc>
 8001804:	f7ff fc64 	bl	80010d0 <__aeabi_f2iz>
 8001808:	b204      	sxth	r4, r0
				encoder_cnt_left - encoder_cnt_right, micros() - prev_time);
 800180a:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <Move_onecell+0x178>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	4b26      	ldr	r3, [pc, #152]	@ (80018a8 <Move_onecell+0x17c>)
 8001810:	681b      	ldr	r3, [r3, #0]
		int16_t error_steering = PID_calc(&pid_steering, 0,
 8001812:	1ac0      	subs	r0, r0, r3
 8001814:	f7ff fa42 	bl	8000c9c <__aeabi_i2f>
 8001818:	4681      	mov	r9, r0
				encoder_cnt_left - encoder_cnt_right, micros() - prev_time);
 800181a:	f000 fa5f 	bl	8001cdc <micros>
		int16_t error_steering = PID_calc(&pid_steering, 0,
 800181e:	f04f 0b00 	mov.w	fp, #0
 8001822:	1b43      	subs	r3, r0, r5
 8001824:	464a      	mov	r2, r9
 8001826:	4659      	mov	r1, fp
 8001828:	4818      	ldr	r0, [pc, #96]	@ (800188c <Move_onecell+0x160>)
 800182a:	f000 f84f 	bl	80018cc <PID_calc>
 800182e:	f7ff fc4f 	bl	80010d0 <__aeabi_f2iz>
 8001832:	fa0f f980 	sxth.w	r9, r0
		int16_t error_wall = PID_calc(&pid_wall_stable, 0, wall_calibration(),
 8001836:	f000 fa0d 	bl	8001c54 <wall_calibration>
 800183a:	f7ff fa2f 	bl	8000c9c <__aeabi_i2f>
 800183e:	4682      	mov	sl, r0
				micros() - prev_time);
 8001840:	f000 fa4c 	bl	8001cdc <micros>
		int16_t error_wall = PID_calc(&pid_wall_stable, 0, wall_calibration(),
 8001844:	1b43      	subs	r3, r0, r5
 8001846:	4652      	mov	r2, sl
 8001848:	4659      	mov	r1, fp
 800184a:	4811      	ldr	r0, [pc, #68]	@ (8001890 <Move_onecell+0x164>)
 800184c:	f000 f83e 	bl	80018cc <PID_calc>
		prev_time = micros();
 8001850:	f000 fa44 	bl	8001cdc <micros>
 8001854:	4605      	mov	r5, r0
		debug_pwm = left_pwm;
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <Move_onecell+0x18c>)
 8001858:	f8c3 8000 	str.w	r8, [r3]
		left_pwm += error_steering + error_wall;
 800185c:	fa1f f089 	uxth.w	r0, r9
 8001860:	eb00 0108 	add.w	r1, r0, r8
 8001864:	b209      	sxth	r1, r1
		right_pwm += -error_steering - error_wall;
 8001866:	b2a4      	uxth	r4, r4
 8001868:	1a24      	subs	r4, r4, r0
 800186a:	b224      	sxth	r4, r4
		if (left_pwm > 10000)
 800186c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001870:	4299      	cmp	r1, r3
 8001872:	f73f af7d 	bgt.w	8001770 <Move_onecell+0x44>
		if (left_pwm < 0)
 8001876:	2900      	cmp	r1, #0
 8001878:	f6bf af7c 	bge.w	8001774 <Move_onecell+0x48>
			left_pwm = 0;
 800187c:	2100      	movs	r1, #0
 800187e:	e779      	b.n	8001774 <Move_onecell+0x48>
//		read_ir_adc();
	}
}
 8001880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001884:	43340000 	.word	0x43340000
 8001888:	200002fc 	.word	0x200002fc
 800188c:	2000028c 	.word	0x2000028c
 8001890:	20000250 	.word	0x20000250
 8001894:	200002a0 	.word	0x200002a0
 8001898:	200002b4 	.word	0x200002b4
 800189c:	20000240 	.word	0x20000240
 80018a0:	20000234 	.word	0x20000234
 80018a4:	2000021c 	.word	0x2000021c
 80018a8:	20000210 	.word	0x20000210
 80018ac:	20000204 	.word	0x20000204
 80018b0:	20000214 	.word	0x20000214
 80018b4:	20000208 	.word	0x20000208
 80018b8:	20000230 	.word	0x20000230

080018bc <PID_init>:
PID pid_wall_stable;

int16_t debug_pid;

void PID_init(PID *pid, float kp, float ki, float kd, float integrator, float prev_error) {
	pid->kp = kp;
 80018bc:	6001      	str	r1, [r0, #0]
	pid->ki = ki;
 80018be:	6042      	str	r2, [r0, #4]
	pid->kd = kd;
 80018c0:	6083      	str	r3, [r0, #8]
	pid->integrator = integrator;
 80018c2:	9b00      	ldr	r3, [sp, #0]
 80018c4:	60c3      	str	r3, [r0, #12]
	pid->prev_error = prev_error;
 80018c6:	9b01      	ldr	r3, [sp, #4]
 80018c8:	6103      	str	r3, [r0, #16]
}
 80018ca:	4770      	bx	lr

080018cc <PID_calc>:

float PID_calc(PID *pid, float set_point, float real_data, uint32_t delta_time) {
 80018cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018d0:	4604      	mov	r4, r0
 80018d2:	4608      	mov	r0, r1
 80018d4:	461e      	mov	r6, r3
	float error = set_point - real_data;
 80018d6:	4611      	mov	r1, r2
 80018d8:	f7ff f92a 	bl	8000b30 <__aeabi_fsub>
 80018dc:	4605      	mov	r5, r0

	float P = (pid->kp) * error;
 80018de:	4601      	mov	r1, r0
 80018e0:	6820      	ldr	r0, [r4, #0]
 80018e2:	f7ff fa2f 	bl	8000d44 <__aeabi_fmul>
 80018e6:	4607      	mov	r7, r0

	pid->integrator += error * delta_time / 1000;
 80018e8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80018ec:	4630      	mov	r0, r6
 80018ee:	f7ff f9d1 	bl	8000c94 <__aeabi_ui2f>
 80018f2:	4681      	mov	r9, r0
 80018f4:	4629      	mov	r1, r5
 80018f6:	f7ff fa25 	bl	8000d44 <__aeabi_fmul>
 80018fa:	4913      	ldr	r1, [pc, #76]	@ (8001948 <PID_calc+0x7c>)
 80018fc:	f7ff fad6 	bl	8000eac <__aeabi_fdiv>
 8001900:	4601      	mov	r1, r0
 8001902:	4640      	mov	r0, r8
 8001904:	f7ff f916 	bl	8000b34 <__addsf3>
 8001908:	60e0      	str	r0, [r4, #12]
	float I = ( pid->integrator ) * ( pid->ki );
 800190a:	6861      	ldr	r1, [r4, #4]
 800190c:	f7ff fa1a 	bl	8000d44 <__aeabi_fmul>
 8001910:	4680      	mov	r8, r0

	float derivative = ( error - ( pid->prev_error ) ) * 1000 / delta_time;
 8001912:	6921      	ldr	r1, [r4, #16]
 8001914:	4628      	mov	r0, r5
 8001916:	f7ff f90b 	bl	8000b30 <__aeabi_fsub>
 800191a:	490b      	ldr	r1, [pc, #44]	@ (8001948 <PID_calc+0x7c>)
 800191c:	f7ff fa12 	bl	8000d44 <__aeabi_fmul>
 8001920:	4649      	mov	r1, r9
 8001922:	f7ff fac3 	bl	8000eac <__aeabi_fdiv>
 8001926:	4601      	mov	r1, r0
	debug_pid = delta_time;
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <PID_calc+0x80>)
 800192a:	801e      	strh	r6, [r3, #0]
	float D = pid->kd * derivative;
 800192c:	68a0      	ldr	r0, [r4, #8]
 800192e:	f7ff fa09 	bl	8000d44 <__aeabi_fmul>
 8001932:	4606      	mov	r6, r0
	pid->prev_error = error;
 8001934:	6125      	str	r5, [r4, #16]

	return P + I + D;
 8001936:	4641      	mov	r1, r8
 8001938:	4638      	mov	r0, r7
 800193a:	f7ff f8fb 	bl	8000b34 <__addsf3>
 800193e:	4631      	mov	r1, r6
 8001940:	f7ff f8f8 	bl	8000b34 <__addsf3>
}
 8001944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001948:	447a0000 	.word	0x447a0000
 800194c:	2000024c 	.word	0x2000024c

08001950 <PID_reset>:

void PID_reset(PID *pid) {
	pid->integrator = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	60c3      	str	r3, [r0, #12]
	pid->prev_error = 0;
 8001954:	6103      	str	r3, [r0, #16]
}
 8001956:	4770      	bx	lr

08001958 <IR_init>:
float IR_RR = 0;

uint16_t IR_data[4];
uint8_t completeADC = 0;

void IR_init(ADC_HandleTypeDef *ADCx) {
 8001958:	b538      	push	{r3, r4, r5, lr}
	IR_sensor.ADCx = ADCx;
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <IR_init+0x44>)
 800195c:	6018      	str	r0, [r3, #0]
	IR_sensor.prev_ir_state_left = 1;
 800195e:	2401      	movs	r4, #1
 8001960:	711c      	strb	r4, [r3, #4]
	IR_sensor.prev_ir_state_right = 1;
 8001962:	715c      	strb	r4, [r3, #5]
	IR_sensor.ir_state_left = 1;
 8001964:	719c      	strb	r4, [r3, #6]
	IR_sensor.ir_state_right = 1;
 8001966:	71dc      	strb	r4, [r3, #7]
	HAL_ADC_Start_DMA(IR_sensor.ADCx, (uint32_t*) IR_data, 4);
 8001968:	2204      	movs	r2, #4
 800196a:	490d      	ldr	r1, [pc, #52]	@ (80019a0 <IR_init+0x48>)
 800196c:	f001 faba 	bl	8002ee4 <HAL_ADC_Start_DMA>
	RF_EM_ON;
 8001970:	4d0c      	ldr	r5, [pc, #48]	@ (80019a4 <IR_init+0x4c>)
 8001972:	4622      	mov	r2, r4
 8001974:	2120      	movs	r1, #32
 8001976:	4628      	mov	r0, r5
 8001978:	f001 ff05 	bl	8003786 <HAL_GPIO_WritePin>
	LF_EM_ON;
 800197c:	4622      	mov	r2, r4
 800197e:	4621      	mov	r1, r4
 8001980:	4809      	ldr	r0, [pc, #36]	@ (80019a8 <IR_init+0x50>)
 8001982:	f001 ff00 	bl	8003786 <HAL_GPIO_WritePin>
	L_EM_ON;
 8001986:	4622      	mov	r2, r4
 8001988:	2180      	movs	r1, #128	@ 0x80
 800198a:	4628      	mov	r0, r5
 800198c:	f001 fefb 	bl	8003786 <HAL_GPIO_WritePin>
	R_EM_ON;
 8001990:	4622      	mov	r2, r4
 8001992:	2140      	movs	r1, #64	@ 0x40
 8001994:	4628      	mov	r0, r5
 8001996:	f001 fef6 	bl	8003786 <HAL_GPIO_WritePin>
}
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	200002f4 	.word	0x200002f4
 80019a0:	200002cc 	.word	0x200002cc
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00

080019ac <read_ir_adc>:

void read_ir_adc() {
 80019ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(completeADC == 0) {
 80019b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b30 <read_ir_adc+0x184>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 80b0 	bne.w	8001b1a <read_ir_adc+0x16e>
		uint32_t curt = Micros;
 80019ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <read_ir_adc+0x188>)
 80019bc:	681c      	ldr	r4, [r3, #0]
		RF_EM_ON;
 80019be:	4d5e      	ldr	r5, [pc, #376]	@ (8001b38 <read_ir_adc+0x18c>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	2120      	movs	r1, #32
 80019c4:	4628      	mov	r0, r5
 80019c6:	f001 fede 	bl	8003786 <HAL_GPIO_WritePin>
		IR_FR = (float) IR_data[0] * alpha + (float) (1 - alpha) * IR_FR;
 80019ca:	4e5c      	ldr	r6, [pc, #368]	@ (8001b3c <read_ir_adc+0x190>)
 80019cc:	8830      	ldrh	r0, [r6, #0]
 80019ce:	f7ff f961 	bl	8000c94 <__aeabi_ui2f>
 80019d2:	4f5b      	ldr	r7, [pc, #364]	@ (8001b40 <read_ir_adc+0x194>)
 80019d4:	f8d7 9000 	ldr.w	r9, [r7]
 80019d8:	4649      	mov	r1, r9
 80019da:	f7ff f9b3 	bl	8000d44 <__aeabi_fmul>
 80019de:	4680      	mov	r8, r0
 80019e0:	4649      	mov	r1, r9
 80019e2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80019e6:	f7ff f8a3 	bl	8000b30 <__aeabi_fsub>
 80019ea:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 8001b44 <read_ir_adc+0x198>
 80019ee:	f8d9 1000 	ldr.w	r1, [r9]
 80019f2:	f7ff f9a7 	bl	8000d44 <__aeabi_fmul>
 80019f6:	4601      	mov	r1, r0
 80019f8:	4640      	mov	r0, r8
 80019fa:	f7ff f89b 	bl	8000b34 <__addsf3>
 80019fe:	f8c9 0000 	str.w	r0, [r9]
		elapseMicros(100, curt);
 8001a02:	4621      	mov	r1, r4
 8001a04:	2064      	movs	r0, #100	@ 0x64
 8001a06:	f000 f997 	bl	8001d38 <elapseMicros>
		RF_EM_OFF;
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f001 feb9 	bl	8003786 <HAL_GPIO_WritePin>
		elapseMicros(160,curt);
 8001a14:	4621      	mov	r1, r4
 8001a16:	20a0      	movs	r0, #160	@ 0xa0
 8001a18:	f000 f98e 	bl	8001d38 <elapseMicros>

		LF_EM_ON;
 8001a1c:	f8df 9128 	ldr.w	r9, [pc, #296]	@ 8001b48 <read_ir_adc+0x19c>
 8001a20:	2201      	movs	r2, #1
 8001a22:	4611      	mov	r1, r2
 8001a24:	4648      	mov	r0, r9
 8001a26:	f001 feae 	bl	8003786 <HAL_GPIO_WritePin>
		IR_FL = (float) IR_data[3] * alpha + (float) (1 - alpha) * IR_FL;
 8001a2a:	88f0      	ldrh	r0, [r6, #6]
 8001a2c:	f7ff f932 	bl	8000c94 <__aeabi_ui2f>
 8001a30:	f8d7 a000 	ldr.w	sl, [r7]
 8001a34:	4651      	mov	r1, sl
 8001a36:	f7ff f985 	bl	8000d44 <__aeabi_fmul>
 8001a3a:	4680      	mov	r8, r0
 8001a3c:	4651      	mov	r1, sl
 8001a3e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001a42:	f7ff f875 	bl	8000b30 <__aeabi_fsub>
 8001a46:	f8df a104 	ldr.w	sl, [pc, #260]	@ 8001b4c <read_ir_adc+0x1a0>
 8001a4a:	f8da 1000 	ldr.w	r1, [sl]
 8001a4e:	f7ff f979 	bl	8000d44 <__aeabi_fmul>
 8001a52:	4601      	mov	r1, r0
 8001a54:	4640      	mov	r0, r8
 8001a56:	f7ff f86d 	bl	8000b34 <__addsf3>
 8001a5a:	f8ca 0000 	str.w	r0, [sl]
		elapseMicros(240,curt);
 8001a5e:	4621      	mov	r1, r4
 8001a60:	20f0      	movs	r0, #240	@ 0xf0
 8001a62:	f000 f969 	bl	8001d38 <elapseMicros>
		LF_EM_OFF;
 8001a66:	2200      	movs	r2, #0
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4648      	mov	r0, r9
 8001a6c:	f001 fe8b 	bl	8003786 <HAL_GPIO_WritePin>
		elapseMicros(320,curt);
 8001a70:	4621      	mov	r1, r4
 8001a72:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8001a76:	f000 f95f 	bl	8001d38 <elapseMicros>

		L_EM_ON;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2180      	movs	r1, #128	@ 0x80
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f001 fe81 	bl	8003786 <HAL_GPIO_WritePin>
		R_EM_ON;
 8001a84:	2201      	movs	r2, #1
 8001a86:	2140      	movs	r1, #64	@ 0x40
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f001 fe7c 	bl	8003786 <HAL_GPIO_WritePin>
		IR_RR = (float) IR_data[1] * alpha + (float) (1 - alpha) * IR_RR;
 8001a8e:	8870      	ldrh	r0, [r6, #2]
 8001a90:	f7ff f900 	bl	8000c94 <__aeabi_ui2f>
 8001a94:	f8d7 8000 	ldr.w	r8, [r7]
 8001a98:	4641      	mov	r1, r8
 8001a9a:	f7ff f953 	bl	8000d44 <__aeabi_fmul>
 8001a9e:	4681      	mov	r9, r0
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001aa6:	f7ff f843 	bl	8000b30 <__aeabi_fsub>
 8001aaa:	4607      	mov	r7, r0
 8001aac:	f8df a0a0 	ldr.w	sl, [pc, #160]	@ 8001b50 <read_ir_adc+0x1a4>
 8001ab0:	f8da 1000 	ldr.w	r1, [sl]
 8001ab4:	f7ff f946 	bl	8000d44 <__aeabi_fmul>
 8001ab8:	4601      	mov	r1, r0
 8001aba:	4648      	mov	r0, r9
 8001abc:	f7ff f83a 	bl	8000b34 <__addsf3>
 8001ac0:	f8ca 0000 	str.w	r0, [sl]
		IR_LL = (float) IR_data[2] * alpha + (float) (1 - alpha) * IR_LL;
 8001ac4:	88b0      	ldrh	r0, [r6, #4]
 8001ac6:	f7ff f8e5 	bl	8000c94 <__aeabi_ui2f>
 8001aca:	4601      	mov	r1, r0
 8001acc:	4640      	mov	r0, r8
 8001ace:	f7ff f939 	bl	8000d44 <__aeabi_fmul>
 8001ad2:	4606      	mov	r6, r0
 8001ad4:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8001b54 <read_ir_adc+0x1a8>
 8001ad8:	f8d8 1000 	ldr.w	r1, [r8]
 8001adc:	4638      	mov	r0, r7
 8001ade:	f7ff f931 	bl	8000d44 <__aeabi_fmul>
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	4630      	mov	r0, r6
 8001ae6:	f7ff f825 	bl	8000b34 <__addsf3>
 8001aea:	f8c8 0000 	str.w	r0, [r8]
		elapseMicros(400,curt);
 8001aee:	4621      	mov	r1, r4
 8001af0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001af4:	f000 f920 	bl	8001d38 <elapseMicros>
		L_EM_OFF;
 8001af8:	2200      	movs	r2, #0
 8001afa:	2180      	movs	r1, #128	@ 0x80
 8001afc:	4628      	mov	r0, r5
 8001afe:	f001 fe42 	bl	8003786 <HAL_GPIO_WritePin>
		R_EM_OFF;
 8001b02:	2200      	movs	r2, #0
 8001b04:	2140      	movs	r1, #64	@ 0x40
 8001b06:	4628      	mov	r0, r5
 8001b08:	f001 fe3d 	bl	8003786 <HAL_GPIO_WritePin>
		elapseMicros(480, curt);
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001b12:	f000 f911 	bl	8001d38 <elapseMicros>
	else {
		completeADC = 0;
		HAL_ADC_Start_DMA(IR_sensor.ADCx,(uint32_t*) IR_data, 4);
	}
//	delay_us(300);
}
 8001b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		completeADC = 0;
 8001b1a:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <read_ir_adc+0x184>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(IR_sensor.ADCx,(uint32_t*) IR_data, 4);
 8001b20:	2204      	movs	r2, #4
 8001b22:	4906      	ldr	r1, [pc, #24]	@ (8001b3c <read_ir_adc+0x190>)
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <read_ir_adc+0x1ac>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f001 f9dc 	bl	8002ee4 <HAL_ADC_Start_DMA>
}
 8001b2c:	e7f3      	b.n	8001b16 <read_ir_adc+0x16a>
 8001b2e:	bf00      	nop
 8001b30:	200002c8 	.word	0x200002c8
 8001b34:	20000300 	.word	0x20000300
 8001b38:	40010800 	.word	0x40010800
 8001b3c:	200002cc 	.word	0x200002cc
 8001b40:	20000008 	.word	0x20000008
 8001b44:	200002dc 	.word	0x200002dc
 8001b48:	40010c00 	.word	0x40010c00
 8001b4c:	200002e0 	.word	0x200002e0
 8001b50:	200002d4 	.word	0x200002d4
 8001b54:	200002d8 	.word	0x200002d8
 8001b58:	200002f4 	.word	0x200002f4

08001b5c <ir_calibration>:

void ir_calibration() {
 8001b5c:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < 4000; i++) {
 8001b5e:	2400      	movs	r4, #0
 8001b60:	e018      	b.n	8001b94 <ir_calibration+0x38>
		read_ir_adc();
 8001b62:	f7ff ff23 	bl	80019ac <read_ir_adc>
		WALL_L += IR_LL;
 8001b66:	4d17      	ldr	r5, [pc, #92]	@ (8001bc4 <ir_calibration+0x68>)
 8001b68:	6828      	ldr	r0, [r5, #0]
 8001b6a:	f7ff f897 	bl	8000c9c <__aeabi_i2f>
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <ir_calibration+0x6c>)
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	f7fe ffdf 	bl	8000b34 <__addsf3>
 8001b76:	f7ff faab 	bl	80010d0 <__aeabi_f2iz>
 8001b7a:	6028      	str	r0, [r5, #0]
		WALL_R += IR_RR;
 8001b7c:	4d13      	ldr	r5, [pc, #76]	@ (8001bcc <ir_calibration+0x70>)
 8001b7e:	6828      	ldr	r0, [r5, #0]
 8001b80:	f7ff f88c 	bl	8000c9c <__aeabi_i2f>
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <ir_calibration+0x74>)
 8001b86:	6819      	ldr	r1, [r3, #0]
 8001b88:	f7fe ffd4 	bl	8000b34 <__addsf3>
 8001b8c:	f7ff faa0 	bl	80010d0 <__aeabi_f2iz>
 8001b90:	6028      	str	r0, [r5, #0]
	for (int i = 0; i < 4000; i++) {
 8001b92:	3401      	adds	r4, #1
 8001b94:	f5b4 6f7a 	cmp.w	r4, #4000	@ 0xfa0
 8001b98:	dbe3      	blt.n	8001b62 <ir_calibration+0x6>
	}
	WALL_L /= 4000;
 8001b9a:	480a      	ldr	r0, [pc, #40]	@ (8001bc4 <ir_calibration+0x68>)
 8001b9c:	6803      	ldr	r3, [r0, #0]
 8001b9e:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <ir_calibration+0x78>)
 8001ba0:	fb81 4203 	smull	r4, r2, r1, r3
 8001ba4:	17db      	asrs	r3, r3, #31
 8001ba6:	ebc3 2222 	rsb	r2, r3, r2, asr #8
 8001baa:	6002      	str	r2, [r0, #0]
	WALL_R /= 4000;
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <ir_calibration+0x70>)
 8001bae:	6803      	ldr	r3, [r0, #0]
 8001bb0:	fb81 4103 	smull	r4, r1, r1, r3
 8001bb4:	17db      	asrs	r3, r3, #31
 8001bb6:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8001bba:	6003      	str	r3, [r0, #0]
	IR_sensor.prev_ir_state_left = WALL_L;
 8001bbc:	4906      	ldr	r1, [pc, #24]	@ (8001bd8 <ir_calibration+0x7c>)
 8001bbe:	710a      	strb	r2, [r1, #4]
	IR_sensor.prev_ir_state_right = WALL_R;
 8001bc0:	714b      	strb	r3, [r1, #5]
}
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	200002f0 	.word	0x200002f0
 8001bc8:	200002d8 	.word	0x200002d8
 8001bcc:	200002ec 	.word	0x200002ec
 8001bd0:	200002d4 	.word	0x200002d4
 8001bd4:	10624dd3 	.word	0x10624dd3
 8001bd8:	200002f4 	.word	0x200002f4

08001bdc <wall_front_calibration>:

void wall_front_calibration() {
 8001bdc:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < 4000; i++) {
 8001bde:	2400      	movs	r4, #0
 8001be0:	e018      	b.n	8001c14 <wall_front_calibration+0x38>
		read_ir_adc();
 8001be2:	f7ff fee3 	bl	80019ac <read_ir_adc>
		WALL_FL += IR_FL;
 8001be6:	4d16      	ldr	r5, [pc, #88]	@ (8001c40 <wall_front_calibration+0x64>)
 8001be8:	6828      	ldr	r0, [r5, #0]
 8001bea:	f7ff f857 	bl	8000c9c <__aeabi_i2f>
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <wall_front_calibration+0x68>)
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	f7fe ff9f 	bl	8000b34 <__addsf3>
 8001bf6:	f7ff fa6b 	bl	80010d0 <__aeabi_f2iz>
 8001bfa:	6028      	str	r0, [r5, #0]
		WALL_FR += IR_FR;
 8001bfc:	4d12      	ldr	r5, [pc, #72]	@ (8001c48 <wall_front_calibration+0x6c>)
 8001bfe:	6828      	ldr	r0, [r5, #0]
 8001c00:	f7ff f84c 	bl	8000c9c <__aeabi_i2f>
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <wall_front_calibration+0x70>)
 8001c06:	6819      	ldr	r1, [r3, #0]
 8001c08:	f7fe ff94 	bl	8000b34 <__addsf3>
 8001c0c:	f7ff fa60 	bl	80010d0 <__aeabi_f2iz>
 8001c10:	6028      	str	r0, [r5, #0]
	for (int i = 0; i < 4000; i++) {
 8001c12:	3401      	adds	r4, #1
 8001c14:	f5b4 6f7a 	cmp.w	r4, #4000	@ 0xfa0
 8001c18:	dbe3      	blt.n	8001be2 <wall_front_calibration+0x6>
	}
	WALL_FL /= 4000;
 8001c1a:	4909      	ldr	r1, [pc, #36]	@ (8001c40 <wall_front_calibration+0x64>)
 8001c1c:	680b      	ldr	r3, [r1, #0]
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c50 <wall_front_calibration+0x74>)
 8001c20:	fb82 4003 	smull	r4, r0, r2, r3
 8001c24:	17db      	asrs	r3, r3, #31
 8001c26:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8001c2a:	600b      	str	r3, [r1, #0]
	WALL_FR /= 4000;
 8001c2c:	4906      	ldr	r1, [pc, #24]	@ (8001c48 <wall_front_calibration+0x6c>)
 8001c2e:	680b      	ldr	r3, [r1, #0]
 8001c30:	fb82 0203 	smull	r0, r2, r2, r3
 8001c34:	17db      	asrs	r3, r3, #31
 8001c36:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 8001c3a:	600b      	str	r3, [r1, #0]

}
 8001c3c:	bd38      	pop	{r3, r4, r5, pc}
 8001c3e:	bf00      	nop
 8001c40:	200002e4 	.word	0x200002e4
 8001c44:	200002e0 	.word	0x200002e0
 8001c48:	200002e8 	.word	0x200002e8
 8001c4c:	200002dc 	.word	0x200002dc
 8001c50:	10624dd3 	.word	0x10624dd3

08001c54 <wall_calibration>:

int16_t wall_calibration() {
 8001c54:	b538      	push	{r3, r4, r5, lr}
	read_ir_adc();
 8001c56:	f7ff fea9 	bl	80019ac <read_ir_adc>
	 *
	 * When IR_LL - IR_RR > 0 then go right. Set pwm + pwm_left and - pwm_right

	 */

	if (IR_LL > WALL_L && IR_RR < WALL_R) {
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <wall_calibration+0x78>)
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	f7ff f81d 	bl	8000c9c <__aeabi_i2f>
 8001c62:	4604      	mov	r4, r0
 8001c64:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <wall_calibration+0x7c>)
 8001c66:	681d      	ldr	r5, [r3, #0]
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f7ff fa09 	bl	8001080 <__aeabi_fcmplt>
 8001c6e:	b180      	cbz	r0, 8001c92 <wall_calibration+0x3e>
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <wall_calibration+0x80>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f7ff f812 	bl	8000c9c <__aeabi_i2f>
 8001c78:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <wall_calibration+0x84>)
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	f7ff fa1e 	bl	80010bc <__aeabi_fcmpgt>
 8001c80:	b138      	cbz	r0, 8001c92 <wall_calibration+0x3e>
		error = WALL_L - IR_LL;
 8001c82:	4629      	mov	r1, r5
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7fe ff53 	bl	8000b30 <__aeabi_fsub>
 8001c8a:	f7ff fa21 	bl	80010d0 <__aeabi_f2iz>
 8001c8e:	b200      	sxth	r0, r0
 8001c90:	e018      	b.n	8001cc4 <wall_calibration+0x70>
	}
	else if(IR_LL < WALL_L && IR_RR > WALL_R) {
 8001c92:	4629      	mov	r1, r5
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff fa11 	bl	80010bc <__aeabi_fcmpgt>
 8001c9a:	b190      	cbz	r0, 8001cc2 <wall_calibration+0x6e>
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <wall_calibration+0x80>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	f7fe fffc 	bl	8000c9c <__aeabi_i2f>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <wall_calibration+0x84>)
 8001ca8:	681d      	ldr	r5, [r3, #0]
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7ff f9e8 	bl	8001080 <__aeabi_fcmplt>
 8001cb0:	b148      	cbz	r0, 8001cc6 <wall_calibration+0x72>
		error = IR_RR - WALL_R;
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f7fe ff3b 	bl	8000b30 <__aeabi_fsub>
 8001cba:	f7ff fa09 	bl	80010d0 <__aeabi_f2iz>
 8001cbe:	b200      	sxth	r0, r0
 8001cc0:	e000      	b.n	8001cc4 <wall_calibration+0x70>
	}
	else
		error = 0;
 8001cc2:	2000      	movs	r0, #0
	return error;
}
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
		error = 0;
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	e7fc      	b.n	8001cc4 <wall_calibration+0x70>
 8001cca:	bf00      	nop
 8001ccc:	200002f0 	.word	0x200002f0
 8001cd0:	200002d8 	.word	0x200002d8
 8001cd4:	200002ec 	.word	0x200002ec
 8001cd8:	200002d4 	.word	0x200002d4

08001cdc <micros>:
	Millis = 0;//reset Millis
}

uint32_t micros(void)
{
	Micros = Millis*1000 + 1000 - SysTick->VAL/systemFrequency;//=Millis*1000+(SystemCoreClock/1000-SysTick->VAL)/168;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <micros+0x24>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce4:	fb02 3303 	mla	r3, r2, r3, r3
 8001ce8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001cec:	6992      	ldr	r2, [r2, #24]
 8001cee:	4905      	ldr	r1, [pc, #20]	@ (8001d04 <micros+0x28>)
 8001cf0:	fba1 1202 	umull	r1, r2, r1, r2
 8001cf4:	eba3 1312 	sub.w	r3, r3, r2, lsr #4
 8001cf8:	4a03      	ldr	r2, [pc, #12]	@ (8001d08 <micros+0x2c>)
 8001cfa:	6013      	str	r3, [r2, #0]
	return Micros;
 8001cfc:	6810      	ldr	r0, [r2, #0]
}
 8001cfe:	4770      	bx	lr
 8001d00:	200002fc 	.word	0x200002fc
 8001d04:	38e38e39 	.word	0x38e38e39
 8001d08:	20000300 	.word	0x20000300

08001d0c <millis>:

uint32_t millis(void)
{
	return Millis;
 8001d0c:	4b01      	ldr	r3, [pc, #4]	@ (8001d14 <millis+0x8>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200002fc 	.word	0x200002fc

08001d18 <delay_ms>:

void delay_ms(uint32_t nTime)
{
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4604      	mov	r4, r0
	uint32_t curTime = Millis;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <delay_ms+0x1c>)
 8001d1e:	681d      	ldr	r5, [r3, #0]
	while((nTime-(Millis-curTime)) > 0)
 8001d20:	e001      	b.n	8001d26 <delay_ms+0xe>
	{
		read_ir_adc();
 8001d22:	f7ff fe43 	bl	80019ac <read_ir_adc>
	while((nTime-(Millis-curTime)) > 0)
 8001d26:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <delay_ms+0x1c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	1aeb      	subs	r3, r5, r3
 8001d2c:	42e3      	cmn	r3, r4
 8001d2e:	d1f8      	bne.n	8001d22 <delay_ms+0xa>
	}
}
 8001d30:	bd38      	pop	{r3, r4, r5, pc}
 8001d32:	bf00      	nop
 8001d34:	200002fc 	.word	0x200002fc

08001d38 <elapseMicros>:
	uint32_t curTime = micros();
	while((nTime-(micros()-curTime)) > 0);
}

void elapseMicros(uint32_t targetTime, uint32_t oldt)
{
 8001d38:	b538      	push	{r3, r4, r5, lr}
 8001d3a:	4605      	mov	r5, r0
 8001d3c:	460c      	mov	r4, r1
	while((micros()-oldt)<targetTime);
 8001d3e:	f7ff ffcd 	bl	8001cdc <micros>
 8001d42:	1b00      	subs	r0, r0, r4
 8001d44:	42a8      	cmp	r0, r5
 8001d46:	d3fa      	bcc.n	8001d3e <elapseMicros+0x6>
}
 8001d48:	bd38      	pop	{r3, r4, r5, pc}

08001d4a <elapseMillis>:


void elapseMillis(uint32_t targetTime, uint32_t oldt)
{
 8001d4a:	b538      	push	{r3, r4, r5, lr}
 8001d4c:	4605      	mov	r5, r0
 8001d4e:	460c      	mov	r4, r1
	while((millis()-oldt)<targetTime);
 8001d50:	f7ff ffdc 	bl	8001d0c <millis>
 8001d54:	1b00      	subs	r0, r0, r4
 8001d56:	42a8      	cmp	r0, r5
 8001d58:	d3fa      	bcc.n	8001d50 <elapseMillis+0x6>
}
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}

08001d5c <initVector>:

#include "function_c.h"

Vector mouse_state;

void initVector(Vector *vec, size_t initialCapacity) {
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	4604      	mov	r4, r0
 8001d60:	460d      	mov	r5, r1
    vec->data = (int *)malloc(initialCapacity * sizeof(int));
 8001d62:	0088      	lsls	r0, r1, #2
 8001d64:	f003 fcee 	bl	8005744 <malloc>
 8001d68:	6020      	str	r0, [r4, #0]
    vec->size = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	6063      	str	r3, [r4, #4]
    vec->capacity = initialCapacity;
 8001d6e:	60a5      	str	r5, [r4, #8]
    vec->index = 0;
 8001d70:	60e3      	str	r3, [r4, #12]
}
 8001d72:	bd38      	pop	{r3, r4, r5, pc}

08001d74 <resizeVector>:

void resizeVector(Vector *vec) {
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4604      	mov	r4, r0
    vec->capacity *= 2;
 8001d78:	6881      	ldr	r1, [r0, #8]
 8001d7a:	004b      	lsls	r3, r1, #1
 8001d7c:	6083      	str	r3, [r0, #8]
    vec->data = (int *)realloc(vec->data, vec->capacity * sizeof(int));
 8001d7e:	00c9      	lsls	r1, r1, #3
 8001d80:	6800      	ldr	r0, [r0, #0]
 8001d82:	f003 fd95 	bl	80058b0 <realloc>
 8001d86:	6020      	str	r0, [r4, #0]
}
 8001d88:	bd10      	pop	{r4, pc}

08001d8a <pushBack>:

void pushBack(Vector *vec, int value) {
 8001d8a:	b538      	push	{r3, r4, r5, lr}
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	460d      	mov	r5, r1
    if (vec->size == vec->capacity) {
 8001d90:	6842      	ldr	r2, [r0, #4]
 8001d92:	6883      	ldr	r3, [r0, #8]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d006      	beq.n	8001da6 <pushBack+0x1c>
        resizeVector(vec);
    }
    vec->data[vec->size++] = value;
 8001d98:	6822      	ldr	r2, [r4, #0]
 8001d9a:	6863      	ldr	r3, [r4, #4]
 8001d9c:	1c59      	adds	r1, r3, #1
 8001d9e:	6061      	str	r1, [r4, #4]
 8001da0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
 8001da4:	bd38      	pop	{r3, r4, r5, pc}
        resizeVector(vec);
 8001da6:	f7ff ffe5 	bl	8001d74 <resizeVector>
 8001daa:	e7f5      	b.n	8001d98 <pushBack+0xe>

08001dac <get>:

int get(Vector *vec, size_t index) {
 8001dac:	b508      	push	{r3, lr}
    if (index < vec->size) {
 8001dae:	6843      	ldr	r3, [r0, #4]
 8001db0:	428b      	cmp	r3, r1
 8001db2:	d903      	bls.n	8001dbc <get+0x10>
        return vec->data[index];
 8001db4:	6803      	ldr	r3, [r0, #0]
 8001db6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    }
    exit(EXIT_FAILURE);
}
 8001dba:	bd08      	pop	{r3, pc}
    exit(EXIT_FAILURE);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f003 fcaf 	bl	8005720 <exit>
	...

08001dc4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dc8:	b089      	sub	sp, #36	@ 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dca:	2400      	movs	r4, #0
 8001dcc:	9404      	str	r4, [sp, #16]
 8001dce:	9405      	str	r4, [sp, #20]
 8001dd0:	9406      	str	r4, [sp, #24]
 8001dd2:	9407      	str	r4, [sp, #28]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <MX_GPIO_Init+0xe0>)
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	f042 0210 	orr.w	r2, r2, #16
 8001ddc:	619a      	str	r2, [r3, #24]
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	f002 0210 	and.w	r2, r2, #16
 8001de4:	9200      	str	r2, [sp, #0]
 8001de6:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	619a      	str	r2, [r3, #24]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	f002 0220 	and.w	r2, r2, #32
 8001df6:	9201      	str	r2, [sp, #4]
 8001df8:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	f042 0204 	orr.w	r2, r2, #4
 8001e00:	619a      	str	r2, [r3, #24]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	f002 0204 	and.w	r2, r2, #4
 8001e08:	9202      	str	r2, [sp, #8]
 8001e0a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	f042 0208 	orr.w	r2, r2, #8
 8001e12:	619a      	str	r2, [r3, #24]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	9303      	str	r3, [sp, #12]
 8001e1c:	9b03      	ldr	r3, [sp, #12]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e1e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8001ea8 <MX_GPIO_Init+0xe4>
 8001e22:	4622      	mov	r2, r4
 8001e24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e28:	4640      	mov	r0, r8
 8001e2a:	f001 fcac 	bl	8003786 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
 8001e2e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8001eac <MX_GPIO_Init+0xe8>
 8001e32:	4622      	mov	r2, r4
 8001e34:	21e0      	movs	r1, #224	@ 0xe0
 8001e36:	4648      	mov	r0, r9
 8001e38:	f001 fca5 	bl	8003786 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e3c:	4e1c      	ldr	r6, [pc, #112]	@ (8001eb0 <MX_GPIO_Init+0xec>)
 8001e3e:	4622      	mov	r2, r4
 8001e40:	2101      	movs	r1, #1
 8001e42:	4630      	mov	r0, r6
 8001e44:	f001 fc9f 	bl	8003786 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e4c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2501      	movs	r5, #1
 8001e50:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2702      	movs	r7, #2
 8001e56:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e58:	a904      	add	r1, sp, #16
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	f001 fb7e 	bl	800355c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8001e60:	23e0      	movs	r3, #224	@ 0xe0
 8001e62:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e68:	f04f 0803 	mov.w	r8, #3
 8001e6c:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	a904      	add	r1, sp, #16
 8001e72:	4648      	mov	r0, r9
 8001e74:	f001 fb72 	bl	800355c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e78:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7e:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	a904      	add	r1, sp, #16
 8001e84:	4630      	mov	r0, r6
 8001e86:	f001 fb69 	bl	800355c <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin BTN1_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | BTN1_Pin;
 8001e8a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001e8e:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e92:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	a904      	add	r1, sp, #16
 8001e96:	4630      	mov	r0, r6
 8001e98:	f001 fb60 	bl	800355c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e9c:	b009      	add	sp, #36	@ 0x24
 8001e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40010c00 	.word	0x40010c00

08001eb4 <MX_DMA_Init>:
static void MX_DMA_Init(void) {
 8001eb4:	b500      	push	{lr}
 8001eb6:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <MX_DMA_Init+0x30>)
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	615a      	str	r2, [r3, #20]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4611      	mov	r1, r2
 8001ed0:	200b      	movs	r0, #11
 8001ed2:	f001 f9c5 	bl	8003260 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ed6:	200b      	movs	r0, #11
 8001ed8:	f001 f9d2 	bl	8003280 <HAL_NVIC_EnableIRQ>
}
 8001edc:	b003      	add	sp, #12
 8001ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ee8:	b508      	push	{r3, lr}
	if (htim == &htim4) {
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001eec:	4283      	cmp	r3, r0
 8001eee:	d000      	beq.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001ef0:	bd08      	pop	{r3, pc}
		read_en_left(&encoder_left);
 8001ef2:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001ef4:	f7ff f9dc 	bl	80012b0 <read_en_left>
		read_en_right(&encoder_right);
 8001ef8:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001efa:	f7ff fa01 	bl	8001300 <read_en_right>
}
 8001efe:	e7f7      	b.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x8>
 8001f00:	2000035c 	.word	0x2000035c
 8001f04:	20000228 	.word	0x20000228
 8001f08:	20000224 	.word	0x20000224

08001f0c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001f0c:	b508      	push	{r3, lr}
	if (hadc->Instance == ADC1) {
 8001f0e:	6802      	ldr	r2, [r0, #0]
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <HAL_ADC_ConvCpltCallback+0x18>)
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d000      	beq.n	8001f18 <HAL_ADC_ConvCpltCallback+0xc>
}
 8001f16:	bd08      	pop	{r3, pc}
		HAL_ADC_Stop_DMA(hadc);  // Dừng ADC
 8001f18:	f001 f92c 	bl	8003174 <HAL_ADC_Stop_DMA>
		completeADC = 1;            // �?ánh dấu đã hoàn tất
 8001f1c:	4b02      	ldr	r3, [pc, #8]	@ (8001f28 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
}
 8001f22:	e7f8      	b.n	8001f16 <HAL_ADC_ConvCpltCallback+0xa>
 8001f24:	40012400 	.word	0x40012400
 8001f28:	200002c8 	.word	0x200002c8

08001f2c <test2>:
void test2() {
 8001f2c:	b510      	push	{r4, lr}
	pushBack(&mouse_state, 1);
 8001f2e:	4c12      	ldr	r4, [pc, #72]	@ (8001f78 <test2+0x4c>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7ff ff29 	bl	8001d8a <pushBack>
	pushBack(&mouse_state, 1);
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff ff25 	bl	8001d8a <pushBack>
	pushBack(&mouse_state, 1);
 8001f40:	2101      	movs	r1, #1
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff ff21 	bl	8001d8a <pushBack>
	pushBack(&mouse_state, 0);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7ff ff1d 	bl	8001d8a <pushBack>
	cnt_cell = 4;
 8001f50:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <test2+0x50>)
 8001f52:	2204      	movs	r2, #4
 8001f54:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < mouse_state.size; i++) {
 8001f56:	2400      	movs	r4, #0
 8001f58:	e006      	b.n	8001f68 <test2+0x3c>
		mouse_move();
 8001f5a:	f7ff fa2b 	bl	80013b4 <mouse_move>
		mouse_state.index++;
 8001f5e:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <test2+0x4c>)
 8001f60:	68d3      	ldr	r3, [r2, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	60d3      	str	r3, [r2, #12]
	for(int i = 0; i < mouse_state.size; i++) {
 8001f66:	3401      	adds	r4, #1
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <test2+0x4c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	42a3      	cmp	r3, r4
 8001f6e:	d8f4      	bhi.n	8001f5a <test2+0x2e>
	Motor_stop();
 8001f70:	f7ff fab4 	bl	80014dc <Motor_stop>
}
 8001f74:	bd10      	pop	{r4, pc}
 8001f76:	bf00      	nop
 8001f78:	20000304 	.word	0x20000304
 8001f7c:	200001fc 	.word	0x200001fc

08001f80 <_write>:
	if (fd == 1 || fd == 2) {
 8001f80:	3801      	subs	r0, #1
 8001f82:	2801      	cmp	r0, #1
 8001f84:	d80a      	bhi.n	8001f9c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8001f86:	b510      	push	{r4, lr}
 8001f88:	4614      	mov	r4, r2
		hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <_write+0x28>)
 8001f92:	f003 fb5e 	bl	8005652 <HAL_UART_Transmit>
		if (hstatus == HAL_OK)
 8001f96:	b920      	cbnz	r0, 8001fa2 <_write+0x22>
			return len;
 8001f98:	4620      	mov	r0, r4
}
 8001f9a:	bd10      	pop	{r4, pc}
	return -1;
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001fa0:	4770      	bx	lr
			return -1;
 8001fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa6:	e7f8      	b.n	8001f9a <_write+0x1a>
 8001fa8:	20000314 	.word	0x20000314

08001fac <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fae:	e7fe      	b.n	8001fae <Error_Handler+0x2>

08001fb0 <MX_TIM1_Init>:
static void MX_TIM1_Init(void) {
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	b096      	sub	sp, #88	@ 0x58
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fb4:	2400      	movs	r4, #0
 8001fb6:	9412      	str	r4, [sp, #72]	@ 0x48
 8001fb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8001fba:	9414      	str	r4, [sp, #80]	@ 0x50
 8001fbc:	9415      	str	r4, [sp, #84]	@ 0x54
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fbe:	9410      	str	r4, [sp, #64]	@ 0x40
 8001fc0:	9411      	str	r4, [sp, #68]	@ 0x44
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001fc2:	9409      	str	r4, [sp, #36]	@ 0x24
 8001fc4:	940a      	str	r4, [sp, #40]	@ 0x28
 8001fc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001fc8:	940c      	str	r4, [sp, #48]	@ 0x30
 8001fca:	940d      	str	r4, [sp, #52]	@ 0x34
 8001fcc:	940e      	str	r4, [sp, #56]	@ 0x38
 8001fce:	940f      	str	r4, [sp, #60]	@ 0x3c
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	a801      	add	r0, sp, #4
 8001fd6:	f004 fa14 	bl	8006402 <memset>
	htim1.Instance = TIM1;
 8001fda:	4837      	ldr	r0, [pc, #220]	@ (80020b8 <MX_TIM1_Init+0x108>)
 8001fdc:	4b37      	ldr	r3, [pc, #220]	@ (80020bc <MX_TIM1_Init+0x10c>)
 8001fde:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001fe0:	2347      	movs	r3, #71	@ 0x47
 8001fe2:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	6084      	str	r4, [r0, #8]
	htim1.Init.Period = 10000 - 1;
 8001fe6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001fea:	60c3      	str	r3, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fec:	6104      	str	r4, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8001fee:	6144      	str	r4, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001ff4:	f002 ff22 	bl	8004e3c <HAL_TIM_Base_Init>
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d14a      	bne.n	8002092 <MX_TIM1_Init+0xe2>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002000:	9312      	str	r3, [sp, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002002:	a912      	add	r1, sp, #72	@ 0x48
 8002004:	482c      	ldr	r0, [pc, #176]	@ (80020b8 <MX_TIM1_Init+0x108>)
 8002006:	f003 f875 	bl	80050f4 <HAL_TIM_ConfigClockSource>
 800200a:	2800      	cmp	r0, #0
 800200c:	d143      	bne.n	8002096 <MX_TIM1_Init+0xe6>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800200e:	482a      	ldr	r0, [pc, #168]	@ (80020b8 <MX_TIM1_Init+0x108>)
 8002010:	f002 ff40 	bl	8004e94 <HAL_TIM_PWM_Init>
 8002014:	2800      	cmp	r0, #0
 8002016:	d140      	bne.n	800209a <MX_TIM1_Init+0xea>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	9310      	str	r3, [sp, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	9311      	str	r3, [sp, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800201e:	a910      	add	r1, sp, #64	@ 0x40
 8002020:	4825      	ldr	r0, [pc, #148]	@ (80020b8 <MX_TIM1_Init+0x108>)
 8002022:	f003 f9c9 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	2800      	cmp	r0, #0
 8002028:	d139      	bne.n	800209e <MX_TIM1_Init+0xee>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202a:	2360      	movs	r3, #96	@ 0x60
 800202c:	9309      	str	r3, [sp, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800202e:	2200      	movs	r2, #0
 8002030:	920a      	str	r2, [sp, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002032:	920b      	str	r2, [sp, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002034:	920c      	str	r2, [sp, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002036:	920d      	str	r2, [sp, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002038:	920e      	str	r2, [sp, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800203a:	920f      	str	r2, [sp, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800203c:	a909      	add	r1, sp, #36	@ 0x24
 800203e:	481e      	ldr	r0, [pc, #120]	@ (80020b8 <MX_TIM1_Init+0x108>)
 8002040:	f002 ffde 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 8002044:	bb68      	cbnz	r0, 80020a2 <MX_TIM1_Init+0xf2>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002046:	2204      	movs	r2, #4
 8002048:	a909      	add	r1, sp, #36	@ 0x24
 800204a:	481b      	ldr	r0, [pc, #108]	@ (80020b8 <MX_TIM1_Init+0x108>)
 800204c:	f002 ffd8 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 8002050:	bb48      	cbnz	r0, 80020a6 <MX_TIM1_Init+0xf6>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8002052:	2208      	movs	r2, #8
 8002054:	a909      	add	r1, sp, #36	@ 0x24
 8002056:	4818      	ldr	r0, [pc, #96]	@ (80020b8 <MX_TIM1_Init+0x108>)
 8002058:	f002 ffd2 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 800205c:	bb28      	cbnz	r0, 80020aa <MX_TIM1_Init+0xfa>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800205e:	220c      	movs	r2, #12
 8002060:	a909      	add	r1, sp, #36	@ 0x24
 8002062:	4815      	ldr	r0, [pc, #84]	@ (80020b8 <MX_TIM1_Init+0x108>)
 8002064:	f002 ffcc 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 8002068:	bb08      	cbnz	r0, 80020ae <MX_TIM1_Init+0xfe>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800206e:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002070:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002072:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002074:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002076:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800207a:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800207c:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800207e:	a901      	add	r1, sp, #4
 8002080:	480d      	ldr	r0, [pc, #52]	@ (80020b8 <MX_TIM1_Init+0x108>)
 8002082:	f003 f9cf 	bl	8005424 <HAL_TIMEx_ConfigBreakDeadTime>
 8002086:	b9a0      	cbnz	r0, 80020b2 <MX_TIM1_Init+0x102>
	HAL_TIM_MspPostInit(&htim1);
 8002088:	480b      	ldr	r0, [pc, #44]	@ (80020b8 <MX_TIM1_Init+0x108>)
 800208a:	f000 fca7 	bl	80029dc <HAL_TIM_MspPostInit>
}
 800208e:	b016      	add	sp, #88	@ 0x58
 8002090:	bd10      	pop	{r4, pc}
		Error_Handler();
 8002092:	f7ff ff8b 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002096:	f7ff ff89 	bl	8001fac <Error_Handler>
		Error_Handler();
 800209a:	f7ff ff87 	bl	8001fac <Error_Handler>
		Error_Handler();
 800209e:	f7ff ff85 	bl	8001fac <Error_Handler>
		Error_Handler();
 80020a2:	f7ff ff83 	bl	8001fac <Error_Handler>
		Error_Handler();
 80020a6:	f7ff ff81 	bl	8001fac <Error_Handler>
		Error_Handler();
 80020aa:	f7ff ff7f 	bl	8001fac <Error_Handler>
		Error_Handler();
 80020ae:	f7ff ff7d 	bl	8001fac <Error_Handler>
		Error_Handler();
 80020b2:	f7ff ff7b 	bl	8001fac <Error_Handler>
 80020b6:	bf00      	nop
 80020b8:	20000434 	.word	0x20000434
 80020bc:	40012c00 	.word	0x40012c00

080020c0 <MX_TIM2_Init>:
static void MX_TIM2_Init(void) {
 80020c0:	b500      	push	{lr}
 80020c2:	b08d      	sub	sp, #52	@ 0x34
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80020c4:	2224      	movs	r2, #36	@ 0x24
 80020c6:	2100      	movs	r1, #0
 80020c8:	a803      	add	r0, sp, #12
 80020ca:	f004 f99a 	bl	8006402 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80020ce:	2300      	movs	r3, #0
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	9302      	str	r3, [sp, #8]
	htim2.Instance = TIM2;
 80020d4:	4811      	ldr	r0, [pc, #68]	@ (800211c <MX_TIM2_Init+0x5c>)
 80020d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020da:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 0;
 80020dc:	6043      	str	r3, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 65535;
 80020e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020e4:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e8:	6183      	str	r3, [r0, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020ea:	2303      	movs	r3, #3
 80020ec:	9303      	str	r3, [sp, #12]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ee:	2301      	movs	r3, #1
 80020f0:	9305      	str	r3, [sp, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020f2:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80020f4:	a903      	add	r1, sp, #12
 80020f6:	f002 fef9 	bl	8004eec <HAL_TIM_Encoder_Init>
 80020fa:	b950      	cbnz	r0, 8002112 <MX_TIM2_Init+0x52>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002102:	a901      	add	r1, sp, #4
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <MX_TIM2_Init+0x5c>)
 8002106:	f003 f957 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	b920      	cbnz	r0, 8002116 <MX_TIM2_Init+0x56>
}
 800210c:	b00d      	add	sp, #52	@ 0x34
 800210e:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8002112:	f7ff ff4b 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002116:	f7ff ff49 	bl	8001fac <Error_Handler>
 800211a:	bf00      	nop
 800211c:	200003ec 	.word	0x200003ec

08002120 <MX_TIM3_Init>:
static void MX_TIM3_Init(void) {
 8002120:	b500      	push	{lr}
 8002122:	b08d      	sub	sp, #52	@ 0x34
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002124:	2224      	movs	r2, #36	@ 0x24
 8002126:	2100      	movs	r1, #0
 8002128:	a803      	add	r0, sp, #12
 800212a:	f004 f96a 	bl	8006402 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800212e:	2300      	movs	r3, #0
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	9302      	str	r3, [sp, #8]
	htim3.Instance = TIM3;
 8002134:	4811      	ldr	r0, [pc, #68]	@ (800217c <MX_TIM3_Init+0x5c>)
 8002136:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <MX_TIM3_Init+0x60>)
 8002138:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 0;
 800213a:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 65535;
 800213e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002142:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002144:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	6183      	str	r3, [r0, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002148:	2303      	movs	r3, #3
 800214a:	9303      	str	r3, [sp, #12]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800214c:	2301      	movs	r3, #1
 800214e:	9305      	str	r3, [sp, #20]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002150:	2202      	movs	r2, #2
 8002152:	9208      	str	r2, [sp, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002154:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8002156:	a903      	add	r1, sp, #12
 8002158:	f002 fec8 	bl	8004eec <HAL_TIM_Encoder_Init>
 800215c:	b950      	cbnz	r0, 8002174 <MX_TIM3_Init+0x54>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002162:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002164:	a901      	add	r1, sp, #4
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <MX_TIM3_Init+0x5c>)
 8002168:	f003 f926 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 800216c:	b920      	cbnz	r0, 8002178 <MX_TIM3_Init+0x58>
}
 800216e:	b00d      	add	sp, #52	@ 0x34
 8002170:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8002174:	f7ff ff1a 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002178:	f7ff ff18 	bl	8001fac <Error_Handler>
 800217c:	200003a4 	.word	0x200003a4
 8002180:	40000400 	.word	0x40000400

08002184 <MX_ADC1_Init>:
static void MX_ADC1_Init(void) {
 8002184:	b500      	push	{lr}
 8002186:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	9303      	str	r3, [sp, #12]
	hadc1.Instance = ADC1;
 8002190:	4820      	ldr	r0, [pc, #128]	@ (8002214 <MX_ADC1_Init+0x90>)
 8002192:	4a21      	ldr	r2, [pc, #132]	@ (8002218 <MX_ADC1_Init+0x94>)
 8002194:	6002      	str	r2, [r0, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002196:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800219a:	6082      	str	r2, [r0, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800219c:	2201      	movs	r2, #1
 800219e:	7302      	strb	r2, [r0, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021a0:	7503      	strb	r3, [r0, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021a2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80021a6:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021a8:	6043      	str	r3, [r0, #4]
	hadc1.Init.NbrOfConversion = 4;
 80021aa:	2304      	movs	r3, #4
 80021ac:	6103      	str	r3, [r0, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80021ae:	f000 ff5d 	bl	800306c <HAL_ADC_Init>
 80021b2:	bb28      	cbnz	r0, 8002200 <MX_ADC1_Init+0x7c>
	sConfig.Channel = ADC_CHANNEL_1;
 80021b4:	2301      	movs	r3, #1
 80021b6:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80021b8:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80021ba:	2307      	movs	r3, #7
 80021bc:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80021be:	a901      	add	r1, sp, #4
 80021c0:	4814      	ldr	r0, [pc, #80]	@ (8002214 <MX_ADC1_Init+0x90>)
 80021c2:	f000 fdab 	bl	8002d1c <HAL_ADC_ConfigChannel>
 80021c6:	b9e8      	cbnz	r0, 8002204 <MX_ADC1_Init+0x80>
	sConfig.Channel = ADC_CHANNEL_2;
 80021c8:	2302      	movs	r3, #2
 80021ca:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80021cc:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80021ce:	a901      	add	r1, sp, #4
 80021d0:	4810      	ldr	r0, [pc, #64]	@ (8002214 <MX_ADC1_Init+0x90>)
 80021d2:	f000 fda3 	bl	8002d1c <HAL_ADC_ConfigChannel>
 80021d6:	b9b8      	cbnz	r0, 8002208 <MX_ADC1_Init+0x84>
	sConfig.Channel = ADC_CHANNEL_3;
 80021d8:	2303      	movs	r3, #3
 80021da:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80021dc:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80021de:	a901      	add	r1, sp, #4
 80021e0:	480c      	ldr	r0, [pc, #48]	@ (8002214 <MX_ADC1_Init+0x90>)
 80021e2:	f000 fd9b 	bl	8002d1c <HAL_ADC_ConfigChannel>
 80021e6:	b988      	cbnz	r0, 800220c <MX_ADC1_Init+0x88>
	sConfig.Channel = ADC_CHANNEL_4;
 80021e8:	2304      	movs	r3, #4
 80021ea:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80021ec:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80021ee:	eb0d 0103 	add.w	r1, sp, r3
 80021f2:	4808      	ldr	r0, [pc, #32]	@ (8002214 <MX_ADC1_Init+0x90>)
 80021f4:	f000 fd92 	bl	8002d1c <HAL_ADC_ConfigChannel>
 80021f8:	b950      	cbnz	r0, 8002210 <MX_ADC1_Init+0x8c>
}
 80021fa:	b005      	add	sp, #20
 80021fc:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8002200:	f7ff fed4 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002204:	f7ff fed2 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002208:	f7ff fed0 	bl	8001fac <Error_Handler>
		Error_Handler();
 800220c:	f7ff fece 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002210:	f7ff fecc 	bl	8001fac <Error_Handler>
 8002214:	20000514 	.word	0x20000514
 8002218:	40012400 	.word	0x40012400

0800221c <MX_TIM4_Init>:
static void MX_TIM4_Init(void) {
 800221c:	b500      	push	{lr}
 800221e:	b087      	sub	sp, #28
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002220:	2300      	movs	r3, #0
 8002222:	9302      	str	r3, [sp, #8]
 8002224:	9303      	str	r3, [sp, #12]
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	9305      	str	r3, [sp, #20]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	9301      	str	r3, [sp, #4]
	htim4.Instance = TIM4;
 800222e:	4814      	ldr	r0, [pc, #80]	@ (8002280 <MX_TIM4_Init+0x64>)
 8002230:	4a14      	ldr	r2, [pc, #80]	@ (8002284 <MX_TIM4_Init+0x68>)
 8002232:	6002      	str	r2, [r0, #0]
	htim4.Init.Prescaler = 720 - 1;
 8002234:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002238:	6042      	str	r2, [r0, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	6083      	str	r3, [r0, #8]
	htim4.Init.Period = 1000 - 1;
 800223c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002240:	60c2      	str	r2, [r0, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002242:	6103      	str	r3, [r0, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002244:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002246:	f002 fdf9 	bl	8004e3c <HAL_TIM_Base_Init>
 800224a:	b990      	cbnz	r0, 8002272 <MX_TIM4_Init+0x56>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002250:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002252:	a902      	add	r1, sp, #8
 8002254:	480a      	ldr	r0, [pc, #40]	@ (8002280 <MX_TIM4_Init+0x64>)
 8002256:	f002 ff4d 	bl	80050f4 <HAL_TIM_ConfigClockSource>
 800225a:	b960      	cbnz	r0, 8002276 <MX_TIM4_Init+0x5a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002260:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002262:	4669      	mov	r1, sp
 8002264:	4806      	ldr	r0, [pc, #24]	@ (8002280 <MX_TIM4_Init+0x64>)
 8002266:	f003 f8a7 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 800226a:	b930      	cbnz	r0, 800227a <MX_TIM4_Init+0x5e>
}
 800226c:	b007      	add	sp, #28
 800226e:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8002272:	f7ff fe9b 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002276:	f7ff fe99 	bl	8001fac <Error_Handler>
		Error_Handler();
 800227a:	f7ff fe97 	bl	8001fac <Error_Handler>
 800227e:	bf00      	nop
 8002280:	2000035c 	.word	0x2000035c
 8002284:	40000800 	.word	0x40000800

08002288 <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 8002288:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 800228a:	480a      	ldr	r0, [pc, #40]	@ (80022b4 <MX_USART1_UART_Init+0x2c>)
 800228c:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <MX_USART1_UART_Init+0x30>)
 800228e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 9600;
 8002290:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002294:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	2300      	movs	r3, #0
 8002298:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800229a:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800229c:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX;
 800229e:	2208      	movs	r2, #8
 80022a0:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a2:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a4:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80022a6:	f003 f9a4 	bl	80055f2 <HAL_UART_Init>
 80022aa:	b900      	cbnz	r0, 80022ae <MX_USART1_UART_Init+0x26>
}
 80022ac:	bd08      	pop	{r3, pc}
		Error_Handler();
 80022ae:	f7ff fe7d 	bl	8001fac <Error_Handler>
 80022b2:	bf00      	nop
 80022b4:	20000314 	.word	0x20000314
 80022b8:	40013800 	.word	0x40013800

080022bc <MX_I2C2_Init>:
static void MX_I2C2_Init(void) {
 80022bc:	b508      	push	{r3, lr}
	hi2c2.Instance = I2C2;
 80022be:	480a      	ldr	r0, [pc, #40]	@ (80022e8 <MX_I2C2_Init+0x2c>)
 80022c0:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <MX_I2C2_Init+0x30>)
 80022c2:	6003      	str	r3, [r0, #0]
	hi2c2.Init.ClockSpeed = 400000;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <MX_I2C2_Init+0x34>)
 80022c6:	6043      	str	r3, [r0, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022c8:	2300      	movs	r3, #0
 80022ca:	6083      	str	r3, [r0, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80022cc:	60c3      	str	r3, [r0, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022d2:	6102      	str	r2, [r0, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022d4:	6143      	str	r3, [r0, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80022d6:	6183      	str	r3, [r0, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d8:	61c3      	str	r3, [r0, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022da:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80022dc:	f001 fcec 	bl	8003cb8 <HAL_I2C_Init>
 80022e0:	b900      	cbnz	r0, 80022e4 <MX_I2C2_Init+0x28>
}
 80022e2:	bd08      	pop	{r3, pc}
		Error_Handler();
 80022e4:	f7ff fe62 	bl	8001fac <Error_Handler>
 80022e8:	2000047c 	.word	0x2000047c
 80022ec:	40005800 	.word	0x40005800
 80022f0:	00061a80 	.word	0x00061a80

080022f4 <SystemClock_Config>:
void SystemClock_Config(void) {
 80022f4:	b500      	push	{lr}
 80022f6:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022f8:	2228      	movs	r2, #40	@ 0x28
 80022fa:	2100      	movs	r1, #0
 80022fc:	eb0d 0002 	add.w	r0, sp, r2
 8002300:	f004 f87f 	bl	8006402 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002304:	2300      	movs	r3, #0
 8002306:	9305      	str	r3, [sp, #20]
 8002308:	9306      	str	r3, [sp, #24]
 800230a:	9307      	str	r3, [sp, #28]
 800230c:	9308      	str	r3, [sp, #32]
 800230e:	9309      	str	r3, [sp, #36]	@ 0x24
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	9302      	str	r3, [sp, #8]
 8002314:	9303      	str	r3, [sp, #12]
 8002316:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002318:	2201      	movs	r2, #1
 800231a:	920a      	str	r2, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800231c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002320:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002322:	920e      	str	r2, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002324:	2202      	movs	r2, #2
 8002326:	9211      	str	r2, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002328:	9312      	str	r3, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800232a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800232e:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002330:	a80a      	add	r0, sp, #40	@ 0x28
 8002332:	f002 f815 	bl	8004360 <HAL_RCC_OscConfig>
 8002336:	b9c8      	cbnz	r0, 800236c <SystemClock_Config+0x78>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002338:	230f      	movs	r3, #15
 800233a:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800233c:	2102      	movs	r1, #2
 800233e:	9106      	str	r1, [sp, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002344:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002348:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800234a:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800234c:	a805      	add	r0, sp, #20
 800234e:	f002 fa39 	bl	80047c4 <HAL_RCC_ClockConfig>
 8002352:	b968      	cbnz	r0, 8002370 <SystemClock_Config+0x7c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002354:	2302      	movs	r3, #2
 8002356:	9301      	str	r3, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800235c:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800235e:	a801      	add	r0, sp, #4
 8002360:	f002 fb0c 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 8002364:	b930      	cbnz	r0, 8002374 <SystemClock_Config+0x80>
}
 8002366:	b015      	add	sp, #84	@ 0x54
 8002368:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800236c:	f7ff fe1e 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002370:	f7ff fe1c 	bl	8001fac <Error_Handler>
		Error_Handler();
 8002374:	f7ff fe1a 	bl	8001fac <Error_Handler>

08002378 <main>:
int main(void) {
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237a:	b083      	sub	sp, #12
	HAL_Init();
 800237c:	f000 fc6c 	bl	8002c58 <HAL_Init>
	SystemClock_Config();
 8002380:	f7ff ffb8 	bl	80022f4 <SystemClock_Config>
	MX_GPIO_Init();
 8002384:	f7ff fd1e 	bl	8001dc4 <MX_GPIO_Init>
	MX_DMA_Init();
 8002388:	f7ff fd94 	bl	8001eb4 <MX_DMA_Init>
	MX_TIM1_Init();
 800238c:	f7ff fe10 	bl	8001fb0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002390:	f7ff fe96 	bl	80020c0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002394:	f7ff fec4 	bl	8002120 <MX_TIM3_Init>
	MX_ADC1_Init();
 8002398:	f7ff fef4 	bl	8002184 <MX_ADC1_Init>
	MX_TIM4_Init();
 800239c:	f7ff ff3e 	bl	800221c <MX_TIM4_Init>
	MX_USART1_UART_Init();
 80023a0:	f7ff ff72 	bl	8002288 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 80023a4:	f7ff ff8a 	bl	80022bc <MX_I2C2_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80023a8:	2200      	movs	r2, #0
 80023aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023ae:	484d      	ldr	r0, [pc, #308]	@ (80024e4 <main+0x16c>)
 80023b0:	f001 f9e9 	bl	8003786 <HAL_GPIO_WritePin>
	Motor_Init(&motor_right, &htim1, &htim1, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80023b4:	4c4c      	ldr	r4, [pc, #304]	@ (80024e8 <main+0x170>)
 80023b6:	4d4d      	ldr	r5, [pc, #308]	@ (80024ec <main+0x174>)
 80023b8:	2304      	movs	r3, #4
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	4622      	mov	r2, r4
 80023c0:	4621      	mov	r1, r4
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7ff f810 	bl	80013e8 <Motor_Init>
	Motor_Init(&motor_left, &htim1, &htim1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80023c8:	4e49      	ldr	r6, [pc, #292]	@ (80024f0 <main+0x178>)
 80023ca:	230c      	movs	r3, #12
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2308      	movs	r3, #8
 80023d0:	4622      	mov	r2, r4
 80023d2:	4621      	mov	r1, r4
 80023d4:	4630      	mov	r0, r6
 80023d6:	f7ff f807 	bl	80013e8 <Motor_Init>
	Encoder_Init(&encoder_left, &htim2);
 80023da:	4946      	ldr	r1, [pc, #280]	@ (80024f4 <main+0x17c>)
 80023dc:	4846      	ldr	r0, [pc, #280]	@ (80024f8 <main+0x180>)
 80023de:	f7fe ff49 	bl	8001274 <Encoder_Init>
	Encoder_Init(&encoder_right, &htim3);
 80023e2:	4946      	ldr	r1, [pc, #280]	@ (80024fc <main+0x184>)
 80023e4:	4846      	ldr	r0, [pc, #280]	@ (8002500 <main+0x188>)
 80023e6:	f7fe ff45 	bl	8001274 <Encoder_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 80023ea:	4846      	ldr	r0, [pc, #280]	@ (8002504 <main+0x18c>)
 80023ec:	f002 fbfc 	bl	8004be8 <HAL_TIM_Base_Start_IT>
	Set_Motor_speed(&motor_left, 0);
 80023f0:	2100      	movs	r1, #0
 80023f2:	4630      	mov	r0, r6
 80023f4:	f7ff f80e 	bl	8001414 <Set_Motor_speed>
	Set_Motor_speed(&motor_right, 0);
 80023f8:	2100      	movs	r1, #0
 80023fa:	4628      	mov	r0, r5
 80023fc:	f7ff f80a 	bl	8001414 <Set_Motor_speed>
	PID_init(&pid_forward_left, 1.2, 0.02, 0.9, 0, 0);
 8002400:	4f41      	ldr	r7, [pc, #260]	@ (8002508 <main+0x190>)
 8002402:	4d42      	ldr	r5, [pc, #264]	@ (800250c <main+0x194>)
 8002404:	4e42      	ldr	r6, [pc, #264]	@ (8002510 <main+0x198>)
 8002406:	2400      	movs	r4, #0
 8002408:	9401      	str	r4, [sp, #4]
 800240a:	9400      	str	r4, [sp, #0]
 800240c:	463b      	mov	r3, r7
 800240e:	462a      	mov	r2, r5
 8002410:	4631      	mov	r1, r6
 8002412:	4840      	ldr	r0, [pc, #256]	@ (8002514 <main+0x19c>)
 8002414:	f7ff fa52 	bl	80018bc <PID_init>
	PID_init(&pid_forward_right, 1.2, 0.02, 0.9, 0, 0);
 8002418:	9401      	str	r4, [sp, #4]
 800241a:	9400      	str	r4, [sp, #0]
 800241c:	463b      	mov	r3, r7
 800241e:	462a      	mov	r2, r5
 8002420:	4631      	mov	r1, r6
 8002422:	483d      	ldr	r0, [pc, #244]	@ (8002518 <main+0x1a0>)
 8002424:	f7ff fa4a 	bl	80018bc <PID_init>
	PID_init(&pid_steering, 8, 0, 3, 0, 0);
 8002428:	9401      	str	r4, [sp, #4]
 800242a:	9400      	str	r4, [sp, #0]
 800242c:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <main+0x1a4>)
 800242e:	4622      	mov	r2, r4
 8002430:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8002434:	483a      	ldr	r0, [pc, #232]	@ (8002520 <main+0x1a8>)
 8002436:	f7ff fa41 	bl	80018bc <PID_init>
	PID_init(&pid_turn_left, 20, 0.02, 0, 0, 0);
 800243a:	9401      	str	r4, [sp, #4]
 800243c:	9400      	str	r4, [sp, #0]
 800243e:	4623      	mov	r3, r4
 8002440:	462a      	mov	r2, r5
 8002442:	4938      	ldr	r1, [pc, #224]	@ (8002524 <main+0x1ac>)
 8002444:	4838      	ldr	r0, [pc, #224]	@ (8002528 <main+0x1b0>)
 8002446:	f7ff fa39 	bl	80018bc <PID_init>
	PID_init(&pid_turn_right, 30, 0, 2, 0, 0);
 800244a:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 800244e:	9401      	str	r4, [sp, #4]
 8002450:	9400      	str	r4, [sp, #0]
 8002452:	462b      	mov	r3, r5
 8002454:	4622      	mov	r2, r4
 8002456:	4935      	ldr	r1, [pc, #212]	@ (800252c <main+0x1b4>)
 8002458:	4835      	ldr	r0, [pc, #212]	@ (8002530 <main+0x1b8>)
 800245a:	f7ff fa2f 	bl	80018bc <PID_init>
	PID_init(&pid_wall_stable, 2, 0, 1, 0, 0);
 800245e:	9401      	str	r4, [sp, #4]
 8002460:	9400      	str	r4, [sp, #0]
 8002462:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002466:	4622      	mov	r2, r4
 8002468:	4629      	mov	r1, r5
 800246a:	4832      	ldr	r0, [pc, #200]	@ (8002534 <main+0x1bc>)
 800246c:	f7ff fa26 	bl	80018bc <PID_init>
	IR_init(&hadc1);
 8002470:	4831      	ldr	r0, [pc, #196]	@ (8002538 <main+0x1c0>)
 8002472:	f7ff fa71 	bl	8001958 <IR_init>
	ir_calibration();
 8002476:	f7ff fb71 	bl	8001b5c <ir_calibration>
	initVector(&mouse_state, 1000);
 800247a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800247e:	482f      	ldr	r0, [pc, #188]	@ (800253c <main+0x1c4>)
 8002480:	f7ff fc6c 	bl	8001d5c <initVector>
	while (MPU6050_Init(&hi2c2) == 1)
 8002484:	482e      	ldr	r0, [pc, #184]	@ (8002540 <main+0x1c8>)
 8002486:	f000 f865 	bl	8002554 <MPU6050_Init>
 800248a:	2801      	cmp	r0, #1
 800248c:	d0fa      	beq.n	8002484 <main+0x10c>
	MPU6050_calibration(&hi2c2);
 800248e:	482c      	ldr	r0, [pc, #176]	@ (8002540 <main+0x1c8>)
 8002490:	f000 f8f2 	bl	8002678 <MPU6050_calibration>
	angle = 0;
 8002494:	4b2b      	ldr	r3, [pc, #172]	@ (8002544 <main+0x1cc>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
	mode();
 800249a:	f7fe ff51 	bl	8001340 <mode>
	while (IR_LL < WALL_L + 400) {
 800249e:	e001      	b.n	80024a4 <main+0x12c>
		read_ir_adc();
 80024a0:	f7ff fa84 	bl	80019ac <read_ir_adc>
	while (IR_LL < WALL_L + 400) {
 80024a4:	4b28      	ldr	r3, [pc, #160]	@ (8002548 <main+0x1d0>)
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	f500 70c8 	add.w	r0, r0, #400	@ 0x190
 80024ac:	f7fe fbf6 	bl	8000c9c <__aeabi_i2f>
 80024b0:	4b26      	ldr	r3, [pc, #152]	@ (800254c <main+0x1d4>)
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	f7fe fe02 	bl	80010bc <__aeabi_fcmpgt>
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d1f1      	bne.n	80024a0 <main+0x128>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024c2:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80024c6:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80024ca:	f001 f95c 	bl	8003786 <HAL_GPIO_WritePin>
	delay_ms(1000);
 80024ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024d2:	f7ff fc21 	bl	8001d18 <delay_ms>
	test2();
 80024d6:	f7ff fd29 	bl	8001f2c <test2>
	uint32_t prev_time = micros();
 80024da:	f7ff fbff 	bl	8001cdc <micros>
	uint32_t curt = Millis;
 80024de:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <main+0x1d8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
	while (1) {
 80024e2:	e7fe      	b.n	80024e2 <main+0x16a>
 80024e4:	40011000 	.word	0x40011000
 80024e8:	20000434 	.word	0x20000434
 80024ec:	20000234 	.word	0x20000234
 80024f0:	20000240 	.word	0x20000240
 80024f4:	200003ec 	.word	0x200003ec
 80024f8:	20000228 	.word	0x20000228
 80024fc:	200003a4 	.word	0x200003a4
 8002500:	20000224 	.word	0x20000224
 8002504:	2000035c 	.word	0x2000035c
 8002508:	3f666666 	.word	0x3f666666
 800250c:	3ca3d70a 	.word	0x3ca3d70a
 8002510:	3f99999a 	.word	0x3f99999a
 8002514:	200002b4 	.word	0x200002b4
 8002518:	200002a0 	.word	0x200002a0
 800251c:	40400000 	.word	0x40400000
 8002520:	2000028c 	.word	0x2000028c
 8002524:	41a00000 	.word	0x41a00000
 8002528:	20000278 	.word	0x20000278
 800252c:	41f00000 	.word	0x41f00000
 8002530:	20000264 	.word	0x20000264
 8002534:	20000250 	.word	0x20000250
 8002538:	20000514 	.word	0x20000514
 800253c:	20000304 	.word	0x20000304
 8002540:	2000047c 	.word	0x2000047c
 8002544:	20000550 	.word	0x20000550
 8002548:	200002f0 	.word	0x200002f0
 800254c:	200002d8 	.word	0x200002d8
 8002550:	200002fc 	.word	0x200002fc

08002554 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	4604      	mov	r4, r0
	uint8_t check;
	uint8_t Data;

	MPU6050.I2Cx = I2Cx;
 800255c:	4b27      	ldr	r3, [pc, #156]	@ (80025fc <MPU6050_Init+0xa8>)
 800255e:	6018      	str	r0, [r3, #0]

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 8002560:	2364      	movs	r3, #100	@ 0x64
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	2301      	movs	r3, #1
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	f10d 0217 	add.w	r2, sp, #23
 800256c:	9200      	str	r2, [sp, #0]
 800256e:	2275      	movs	r2, #117	@ 0x75
 8002570:	21d0      	movs	r1, #208	@ 0xd0
 8002572:	f001 fd31 	bl	8003fd8 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002576:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800257a:	2b68      	cmp	r3, #104	@ 0x68
 800257c:	d003      	beq.n	8002586 <MPU6050_Init+0x32>
		Data = 0x10;
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
				i2c_timeout);
		return 0;
	}
	return 1;
 800257e:	2001      	movs	r0, #1
}
 8002580:	b006      	add	sp, #24
 8002582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Data = 0;
 8002586:	2500      	movs	r5, #0
 8002588:	f88d 5016 	strb.w	r5, [sp, #22]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 800258c:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8002590:	f8cd 8008 	str.w	r8, [sp, #8]
 8002594:	2601      	movs	r6, #1
 8002596:	9601      	str	r6, [sp, #4]
 8002598:	f10d 0716 	add.w	r7, sp, #22
 800259c:	9700      	str	r7, [sp, #0]
 800259e:	4633      	mov	r3, r6
 80025a0:	226b      	movs	r2, #107	@ 0x6b
 80025a2:	21d0      	movs	r1, #208	@ 0xd0
 80025a4:	4620      	mov	r0, r4
 80025a6:	f001 fc65 	bl	8003e74 <HAL_I2C_Mem_Write>
		Data = 0x07;
 80025aa:	2307      	movs	r3, #7
 80025ac:	f88d 3016 	strb.w	r3, [sp, #22]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 80025b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80025b4:	9601      	str	r6, [sp, #4]
 80025b6:	9700      	str	r7, [sp, #0]
 80025b8:	4633      	mov	r3, r6
 80025ba:	2219      	movs	r2, #25
 80025bc:	21d0      	movs	r1, #208	@ 0xd0
 80025be:	4620      	mov	r0, r4
 80025c0:	f001 fc58 	bl	8003e74 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80025c4:	f88d 5016 	strb.w	r5, [sp, #22]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 80025c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80025cc:	9601      	str	r6, [sp, #4]
 80025ce:	9700      	str	r7, [sp, #0]
 80025d0:	4633      	mov	r3, r6
 80025d2:	221c      	movs	r2, #28
 80025d4:	21d0      	movs	r1, #208	@ 0xd0
 80025d6:	4620      	mov	r0, r4
 80025d8:	f001 fc4c 	bl	8003e74 <HAL_I2C_Mem_Write>
		Data = 0x10;
 80025dc:	2310      	movs	r3, #16
 80025de:	f88d 3016 	strb.w	r3, [sp, #22]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 80025e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80025e6:	9601      	str	r6, [sp, #4]
 80025e8:	9700      	str	r7, [sp, #0]
 80025ea:	4633      	mov	r3, r6
 80025ec:	221b      	movs	r2, #27
 80025ee:	21d0      	movs	r1, #208	@ 0xd0
 80025f0:	4620      	mov	r0, r4
 80025f2:	f001 fc3f 	bl	8003e74 <HAL_I2C_Mem_Write>
		return 0;
 80025f6:	4628      	mov	r0, r5
 80025f8:	e7c2      	b.n	8002580 <MPU6050_Init+0x2c>
 80025fa:	bf00      	nop
 80025fc:	20000558 	.word	0x20000558

08002600 <MPU6050_Read_Gyro>:
	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002600:	b510      	push	{r4, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	460c      	mov	r4, r1
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6,
 8002606:	2364      	movs	r3, #100	@ 0x64
 8002608:	9302      	str	r3, [sp, #8]
 800260a:	2306      	movs	r3, #6
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	ab04      	add	r3, sp, #16
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	2243      	movs	r2, #67	@ 0x43
 8002616:	21d0      	movs	r1, #208	@ 0xd0
 8002618:	f001 fcde 	bl	8003fd8 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800261c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8002620:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002624:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002628:	8523      	strh	r3, [r4, #40]	@ 0x28
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800262a:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800262e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002632:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002636:	8563      	strh	r3, [r4, #42]	@ 0x2a
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002638:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800263c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002640:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002644:	b200      	sxth	r0, r0
 8002646:	85a0      	strh	r0, [r4, #44]	@ 0x2c


	DataStruct->Gz = (DataStruct->Gyro_Z_RAW - gyro_offset) / 32.8;
 8002648:	f7fd fedc 	bl	8000404 <__aeabi_i2d>
 800264c:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <MPU6050_Read_Gyro+0x70>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fd fd89 	bl	8000168 <__aeabi_dsub>
 8002656:	a304      	add	r3, pc, #16	@ (adr r3, 8002668 <MPU6050_Read_Gyro+0x68>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fe f866 	bl	800072c <__aeabi_ddiv>
 8002660:	e9c4 0110 	strd	r0, r1, [r4, #64]	@ 0x40
//	DataStruct->Gz = (float) 0.1 * prev_gyro_z + (float) (1 - 0.1) * DataStruct->Gz;
//	prev_gyro_z = DataStruct->Gz;
}
 8002664:	b006      	add	sp, #24
 8002666:	bd10      	pop	{r4, pc}
 8002668:	66666666 	.word	0x66666666
 800266c:	40406666 	.word	0x40406666
 8002670:	20000548 	.word	0x20000548
 8002674:	00000000 	.word	0x00000000

08002678 <MPU6050_calibration>:

	return Kalman->angle;
}
;

void MPU6050_calibration(I2C_HandleTypeDef *I2Cx) {
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	4607      	mov	r7, r0
	for (int i = 0; i < 10000; i++) {
 800267c:	2400      	movs	r4, #0
 800267e:	e012      	b.n	80026a6 <MPU6050_calibration+0x2e>
		MPU6050_Read_Gyro(I2Cx, &MPU6050);
 8002680:	4e13      	ldr	r6, [pc, #76]	@ (80026d0 <MPU6050_calibration+0x58>)
 8002682:	4631      	mov	r1, r6
 8002684:	4638      	mov	r0, r7
 8002686:	f7ff ffbb 	bl	8002600 <MPU6050_Read_Gyro>
		gyro_offset += MPU6050.Gyro_Z_RAW;
 800268a:	4d12      	ldr	r5, [pc, #72]	@ (80026d4 <MPU6050_calibration+0x5c>)
 800268c:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	@ 0x2c
 8002690:	f7fd feb8 	bl	8000404 <__aeabi_i2d>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	e9d5 0100 	ldrd	r0, r1, [r5]
 800269c:	f7fd fd66 	bl	800016c <__adddf3>
 80026a0:	e9c5 0100 	strd	r0, r1, [r5]
	for (int i = 0; i < 10000; i++) {
 80026a4:	3401      	adds	r4, #1
 80026a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80026aa:	429c      	cmp	r4, r3
 80026ac:	dde8      	ble.n	8002680 <MPU6050_calibration+0x8>
//		delay_ms(1);
	}
	gyro_offset /= 10000;
 80026ae:	4c09      	ldr	r4, [pc, #36]	@ (80026d4 <MPU6050_calibration+0x5c>)
 80026b0:	a305      	add	r3, pc, #20	@ (adr r3, 80026c8 <MPU6050_calibration+0x50>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80026ba:	f7fe f837 	bl	800072c <__aeabi_ddiv>
 80026be:	e9c4 0100 	strd	r0, r1, [r4]
}
 80026c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026c4:	f3af 8000 	nop.w
 80026c8:	00000000 	.word	0x00000000
 80026cc:	40c38800 	.word	0x40c38800
 80026d0:	20000558 	.word	0x20000558
 80026d4:	20000548 	.word	0x20000548

080026d8 <MPU6050_getAngle>:

void MPU6050_getAngle(I2C_HandleTypeDef *I2Cx, uint32_t delta_time) {
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	460c      	mov	r4, r1
	MPU6050_Read_Gyro(I2Cx, &MPU6050);
 80026dc:	4d12      	ldr	r5, [pc, #72]	@ (8002728 <MPU6050_getAngle+0x50>)
 80026de:	4629      	mov	r1, r5
 80026e0:	f7ff ff8e 	bl	8002600 <MPU6050_Read_Gyro>
	angle += (MPU6050.Gz * delta_time) / 1000000;
 80026e4:	e9d5 6710 	ldrd	r6, r7, [r5, #64]	@ 0x40
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7fd fe7b 	bl	80003e4 <__aeabi_ui2d>
 80026ee:	4632      	mov	r2, r6
 80026f0:	463b      	mov	r3, r7
 80026f2:	f7fd fef1 	bl	80004d8 <__aeabi_dmul>
 80026f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8002720 <MPU6050_getAngle+0x48>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	f7fe f816 	bl	800072c <__aeabi_ddiv>
 8002700:	4604      	mov	r4, r0
 8002702:	460d      	mov	r5, r1
 8002704:	4e09      	ldr	r6, [pc, #36]	@ (800272c <MPU6050_getAngle+0x54>)
 8002706:	6830      	ldr	r0, [r6, #0]
 8002708:	f7fd fe8e 	bl	8000428 <__aeabi_f2d>
 800270c:	4622      	mov	r2, r4
 800270e:	462b      	mov	r3, r5
 8002710:	f7fd fd2c 	bl	800016c <__adddf3>
 8002714:	f7fe f9b8 	bl	8000a88 <__aeabi_d2f>
 8002718:	6030      	str	r0, [r6, #0]
}
 800271a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800271c:	f3af 8000 	nop.w
 8002720:	00000000 	.word	0x00000000
 8002724:	412e8480 	.word	0x412e8480
 8002728:	20000558 	.word	0x20000558
 800272c:	20000550 	.word	0x20000550

08002730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002732:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <HAL_MspInit+0x3c>)
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	619a      	str	r2, [r3, #24]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	f002 0201 	and.w	r2, r2, #1
 8002742:	9200      	str	r2, [sp, #0]
 8002744:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800274c:	61da      	str	r2, [r3, #28]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002758:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <HAL_MspInit+0x40>)
 800275a:	6853      	ldr	r3, [r2, #4]
 800275c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002760:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002764:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002766:	b002      	add	sp, #8
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	40010000 	.word	0x40010000

08002774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002774:	b510      	push	{r4, lr}
 8002776:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	2300      	movs	r3, #0
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	9303      	str	r3, [sp, #12]
 800277e:	9304      	str	r3, [sp, #16]
 8002780:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8002782:	6802      	ldr	r2, [r0, #0]
 8002784:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <HAL_ADC_MspInit+0x8c>)
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <HAL_ADC_MspInit+0x1a>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800278a:	b006      	add	sp, #24
 800278c:	bd10      	pop	{r4, pc}
 800278e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002790:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279a:	619a      	str	r2, [r3, #24]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80027a2:	9200      	str	r2, [sp, #0]
 80027a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	f042 0204 	orr.w	r2, r2, #4
 80027ac:	619a      	str	r2, [r3, #24]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80027b8:	231e      	movs	r3, #30
 80027ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027bc:	2303      	movs	r3, #3
 80027be:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	a902      	add	r1, sp, #8
 80027c2:	4810      	ldr	r0, [pc, #64]	@ (8002804 <HAL_ADC_MspInit+0x90>)
 80027c4:	f000 feca 	bl	800355c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80027c8:	480f      	ldr	r0, [pc, #60]	@ (8002808 <HAL_ADC_MspInit+0x94>)
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_ADC_MspInit+0x98>)
 80027cc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ce:	2300      	movs	r3, #0
 80027d0:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d2:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027dc:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e2:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027e4:	2220      	movs	r2, #32
 80027e6:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027e8:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027ea:	f000 fd81 	bl	80032f0 <HAL_DMA_Init>
 80027ee:	b918      	cbnz	r0, 80027f8 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <HAL_ADC_MspInit+0x94>)
 80027f2:	6223      	str	r3, [r4, #32]
 80027f4:	625c      	str	r4, [r3, #36]	@ 0x24
}
 80027f6:	e7c8      	b.n	800278a <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80027f8:	f7ff fbd8 	bl	8001fac <Error_Handler>
 80027fc:	e7f8      	b.n	80027f0 <HAL_ADC_MspInit+0x7c>
 80027fe:	bf00      	nop
 8002800:	40012400 	.word	0x40012400
 8002804:	40010800 	.word	0x40010800
 8002808:	200004d0 	.word	0x200004d0
 800280c:	40020008 	.word	0x40020008

08002810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002810:	b510      	push	{r4, lr}
 8002812:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	2300      	movs	r3, #0
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	9303      	str	r3, [sp, #12]
 800281a:	9304      	str	r3, [sp, #16]
 800281c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C2)
 800281e:	6802      	ldr	r2, [r0, #0]
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_I2C_MspInit+0x58>)
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_I2C_MspInit+0x1a>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002826:	b006      	add	sp, #24
 8002828:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282a:	4c10      	ldr	r4, [pc, #64]	@ (800286c <HAL_I2C_MspInit+0x5c>)
 800282c:	69a3      	ldr	r3, [r4, #24]
 800282e:	f043 0308 	orr.w	r3, r3, #8
 8002832:	61a3      	str	r3, [r4, #24]
 8002834:	69a3      	ldr	r3, [r4, #24]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800283e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002842:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002844:	2312      	movs	r3, #18
 8002846:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	a902      	add	r1, sp, #8
 800284e:	4808      	ldr	r0, [pc, #32]	@ (8002870 <HAL_I2C_MspInit+0x60>)
 8002850:	f000 fe84 	bl	800355c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002854:	69e3      	ldr	r3, [r4, #28]
 8002856:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800285a:	61e3      	str	r3, [r4, #28]
 800285c:	69e3      	ldr	r3, [r4, #28]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	9b01      	ldr	r3, [sp, #4]
}
 8002866:	e7de      	b.n	8002826 <HAL_I2C_MspInit+0x16>
 8002868:	40005800 	.word	0x40005800
 800286c:	40021000 	.word	0x40021000
 8002870:	40010c00 	.word	0x40010c00

08002874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002874:	b500      	push	{lr}
 8002876:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	4a13      	ldr	r2, [pc, #76]	@ (80028c8 <HAL_TIM_Base_MspInit+0x54>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d005      	beq.n	800288c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002880:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <HAL_TIM_Base_MspInit+0x58>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002886:	b003      	add	sp, #12
 8002888:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_TIM_Base_MspInit+0x5c>)
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002894:	619a      	str	r2, [r3, #24]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	9b00      	ldr	r3, [sp, #0]
 80028a0:	e7f1      	b.n	8002886 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028a2:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_TIM_Base_MspInit+0x5c>)
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	f042 0204 	orr.w	r2, r2, #4
 80028aa:	61da      	str	r2, [r3, #28]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2101      	movs	r1, #1
 80028ba:	201e      	movs	r0, #30
 80028bc:	f000 fcd0 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028c0:	201e      	movs	r0, #30
 80028c2:	f000 fcdd 	bl	8003280 <HAL_NVIC_EnableIRQ>
}
 80028c6:	e7de      	b.n	8002886 <HAL_TIM_Base_MspInit+0x12>
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000800 	.word	0x40000800
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028d4:	b510      	push	{r4, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	2300      	movs	r3, #0
 80028da:	9306      	str	r3, [sp, #24]
 80028dc:	9307      	str	r3, [sp, #28]
 80028de:	9308      	str	r3, [sp, #32]
 80028e0:	9309      	str	r3, [sp, #36]	@ 0x24
  if(htim_encoder->Instance==TIM2)
 80028e2:	6803      	ldr	r3, [r0, #0]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e8:	d004      	beq.n	80028f4 <HAL_TIM_Encoder_MspInit+0x20>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM3)
 80028ea:	4a37      	ldr	r2, [pc, #220]	@ (80029c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d040      	beq.n	8002972 <HAL_TIM_Encoder_MspInit+0x9e>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028f0:	b00a      	add	sp, #40	@ 0x28
 80028f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	61da      	str	r2, [r3, #28]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	f002 0201 	and.w	r2, r2, #1
 8002906:	9201      	str	r2, [sp, #4]
 8002908:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	f042 0204 	orr.w	r2, r2, #4
 8002910:	619a      	str	r2, [r3, #24]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	f002 0204 	and.w	r2, r2, #4
 8002918:	9202      	str	r2, [sp, #8]
 800291a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	f042 0208 	orr.w	r2, r2, #8
 8002922:	619a      	str	r2, [r3, #24]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	9303      	str	r3, [sp, #12]
 800292c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800292e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002932:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	a906      	add	r1, sp, #24
 8002936:	4825      	ldr	r0, [pc, #148]	@ (80029cc <HAL_TIM_Encoder_MspInit+0xf8>)
 8002938:	f000 fe10 	bl	800355c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800293c:	2308      	movs	r3, #8
 800293e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002940:	2400      	movs	r4, #0
 8002942:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	a906      	add	r1, sp, #24
 8002948:	4821      	ldr	r0, [pc, #132]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0xfc>)
 800294a:	f000 fe07 	bl	800355c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800294e:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8002950:	6853      	ldr	r3, [r2, #4]
 8002952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002956:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800295a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295e:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002960:	4622      	mov	r2, r4
 8002962:	4621      	mov	r1, r4
 8002964:	201c      	movs	r0, #28
 8002966:	f000 fc7b 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800296a:	201c      	movs	r0, #28
 800296c:	f000 fc88 	bl	8003280 <HAL_NVIC_EnableIRQ>
 8002970:	e7be      	b.n	80028f0 <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	f042 0202 	orr.w	r2, r2, #2
 800297a:	61da      	str	r2, [r3, #28]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	f002 0202 	and.w	r2, r2, #2
 8002982:	9204      	str	r2, [sp, #16]
 8002984:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	f042 0208 	orr.w	r2, r2, #8
 800298c:	619a      	str	r2, [r3, #24]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	9305      	str	r3, [sp, #20]
 8002996:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002998:	2330      	movs	r3, #48	@ 0x30
 800299a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	a906      	add	r1, sp, #24
 800299e:	480c      	ldr	r0, [pc, #48]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80029a0:	f000 fddc 	bl	800355c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80029a4:	4a0b      	ldr	r2, [pc, #44]	@ (80029d4 <HAL_TIM_Encoder_MspInit+0x100>)
 80029a6:	6853      	ldr	r3, [r2, #4]
 80029a8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80029ac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80029b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029b4:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	4611      	mov	r1, r2
 80029ba:	201d      	movs	r0, #29
 80029bc:	f000 fc50 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029c0:	201d      	movs	r0, #29
 80029c2:	f000 fc5d 	bl	8003280 <HAL_NVIC_EnableIRQ>
}
 80029c6:	e793      	b.n	80028f0 <HAL_TIM_Encoder_MspInit+0x1c>
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40010800 	.word	0x40010800
 80029d0:	40010c00 	.word	0x40010c00
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40021000 	.word	0x40021000

080029dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029dc:	b500      	push	{lr}
 80029de:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	2300      	movs	r3, #0
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	9303      	str	r3, [sp, #12]
 80029e6:	9304      	str	r3, [sp, #16]
 80029e8:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80029ea:	6802      	ldr	r2, [r0, #0]
 80029ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_TIM_MspPostInit+0x4c>)
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d002      	beq.n	80029f8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029f2:	b007      	add	sp, #28
 80029f4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	f042 0204 	orr.w	r2, r2, #4
 8002a02:	619a      	str	r2, [r3, #24]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002a0e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002a12:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	a902      	add	r1, sp, #8
 8002a1e:	4803      	ldr	r0, [pc, #12]	@ (8002a2c <HAL_TIM_MspPostInit+0x50>)
 8002a20:	f000 fd9c 	bl	800355c <HAL_GPIO_Init>
}
 8002a24:	e7e5      	b.n	80029f2 <HAL_TIM_MspPostInit+0x16>
 8002a26:	bf00      	nop
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40010800 	.word	0x40010800

08002a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a30:	b510      	push	{r4, lr}
 8002a32:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	2300      	movs	r3, #0
 8002a36:	9302      	str	r3, [sp, #8]
 8002a38:	9303      	str	r3, [sp, #12]
 8002a3a:	9304      	str	r3, [sp, #16]
 8002a3c:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8002a3e:	6802      	ldr	r2, [r0, #0]
 8002a40:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <HAL_UART_MspInit+0x7c>)
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_UART_MspInit+0x1a>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a46:	b006      	add	sp, #24
 8002a48:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a4a:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a54:	619a      	str	r2, [r3, #24]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	f042 0208 	orr.w	r2, r2, #8
 8002a66:	619a      	str	r2, [r3, #24]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a72:	2340      	movs	r3, #64	@ 0x40
 8002a74:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8002ab0 <HAL_UART_MspInit+0x80>)
 8002a80:	a902      	add	r1, sp, #8
 8002a82:	4620      	mov	r0, r4
 8002a84:	f000 fd6a 	bl	800355c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a92:	a902      	add	r1, sp, #8
 8002a94:	4620      	mov	r0, r4
 8002a96:	f000 fd61 	bl	800355c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002a9a:	4a06      	ldr	r2, [pc, #24]	@ (8002ab4 <HAL_UART_MspInit+0x84>)
 8002a9c:	6853      	ldr	r3, [r2, #4]
 8002a9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	6053      	str	r3, [r2, #4]
}
 8002aa8:	e7cd      	b.n	8002a46 <HAL_UART_MspInit+0x16>
 8002aaa:	bf00      	nop
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40010c00 	.word	0x40010c00
 8002ab4:	40010000 	.word	0x40010000

08002ab8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002ab8:	e7fe      	b.n	8002ab8 <NMI_Handler>

08002aba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <HardFault_Handler>

08002abc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <MemManage_Handler>

08002abe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <BusFault_Handler>

08002ac0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <UsageFault_Handler>

08002ac2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac2:	4770      	bx	lr

08002ac4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac4:	4770      	bx	lr

08002ac6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac6:	4770      	bx	lr

08002ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Millis++ ;
 8002aca:	4a03      	ldr	r2, [pc, #12]	@ (8002ad8 <SysTick_Handler+0x10>)
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad2:	f000 f8d3 	bl	8002c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad6:	bd08      	pop	{r3, pc}
 8002ad8:	200002fc 	.word	0x200002fc

08002adc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002adc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ade:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <DMA1_Channel1_IRQHandler+0xc>)
 8002ae0:	f000 fc9a 	bl	8003418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ae4:	bd08      	pop	{r3, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200004d0 	.word	0x200004d0

08002aec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002aec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002aee:	4802      	ldr	r0, [pc, #8]	@ (8002af8 <TIM2_IRQHandler+0xc>)
 8002af0:	f002 f8b3 	bl	8004c5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002af4:	bd08      	pop	{r3, pc}
 8002af6:	bf00      	nop
 8002af8:	200003ec 	.word	0x200003ec

08002afc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002afc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002afe:	4802      	ldr	r0, [pc, #8]	@ (8002b08 <TIM3_IRQHandler+0xc>)
 8002b00:	f002 f8ab 	bl	8004c5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b04:	bd08      	pop	{r3, pc}
 8002b06:	bf00      	nop
 8002b08:	200003a4 	.word	0x200003a4

08002b0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b0e:	4802      	ldr	r0, [pc, #8]	@ (8002b18 <TIM4_IRQHandler+0xc>)
 8002b10:	f002 f8a3 	bl	8004c5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b14:	bd08      	pop	{r3, pc}
 8002b16:	bf00      	nop
 8002b18:	2000035c 	.word	0x2000035c

08002b1c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	4770      	bx	lr

08002b20 <_kill>:

int _kill(int pid, int sig)
{
 8002b20:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b22:	f003 fcd1 	bl	80064c8 <__errno>
 8002b26:	2316      	movs	r3, #22
 8002b28:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2e:	bd08      	pop	{r3, pc}

08002b30 <_exit>:

void _exit (int status)
{
 8002b30:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002b32:	f04f 31ff 	mov.w	r1, #4294967295
 8002b36:	f7ff fff3 	bl	8002b20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b3a:	e7fe      	b.n	8002b3a <_exit+0xa>

08002b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	460c      	mov	r4, r1
 8002b40:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b42:	2500      	movs	r5, #0
 8002b44:	e006      	b.n	8002b54 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002b46:	f3af 8000 	nop.w
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b50:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002b52:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	42b5      	cmp	r5, r6
 8002b56:	dbf6      	blt.n	8002b46 <_read+0xa>
  }

  return len;
}
 8002b58:	4630      	mov	r0, r6
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}

08002b5c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	4770      	bx	lr

08002b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b66:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002b68:	2000      	movs	r0, #0
 8002b6a:	4770      	bx	lr

08002b6c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	4770      	bx	lr

08002b70 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002b70:	2000      	movs	r0, #0
 8002b72:	4770      	bx	lr

08002b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b74:	b510      	push	{r4, lr}
 8002b76:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b78:	4a0c      	ldr	r2, [pc, #48]	@ (8002bac <_sbrk+0x38>)
 8002b7a:	490d      	ldr	r1, [pc, #52]	@ (8002bb0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	480d      	ldr	r0, [pc, #52]	@ (8002bb4 <_sbrk+0x40>)
 8002b7e:	6800      	ldr	r0, [r0, #0]
 8002b80:	b140      	cbz	r0, 8002b94 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b82:	480c      	ldr	r0, [pc, #48]	@ (8002bb4 <_sbrk+0x40>)
 8002b84:	6800      	ldr	r0, [r0, #0]
 8002b86:	4403      	add	r3, r0
 8002b88:	1a52      	subs	r2, r2, r1
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d806      	bhi.n	8002b9c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002b8e:	4a09      	ldr	r2, [pc, #36]	@ (8002bb4 <_sbrk+0x40>)
 8002b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002b92:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002b94:	4807      	ldr	r0, [pc, #28]	@ (8002bb4 <_sbrk+0x40>)
 8002b96:	4c08      	ldr	r4, [pc, #32]	@ (8002bb8 <_sbrk+0x44>)
 8002b98:	6004      	str	r4, [r0, #0]
 8002b9a:	e7f2      	b.n	8002b82 <_sbrk+0xe>
    errno = ENOMEM;
 8002b9c:	f003 fc94 	bl	80064c8 <__errno>
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	e7f3      	b.n	8002b92 <_sbrk+0x1e>
 8002baa:	bf00      	nop
 8002bac:	20005000 	.word	0x20005000
 8002bb0:	00000400 	.word	0x00000400
 8002bb4:	200005b8 	.word	0x200005b8
 8002bb8:	20000710 	.word	0x20000710

08002bbc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	4770      	bx	lr
	...

08002bc0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8002bc0:	f7ff fffc 	bl	8002bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bc4:	480b      	ldr	r0, [pc, #44]	@ (8002bf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bc6:	490c      	ldr	r1, [pc, #48]	@ (8002bf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bcc:	e002      	b.n	8002bd4 <LoopCopyDataInit>

08002bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd2:	3304      	adds	r3, #4

08002bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd8:	d3f9      	bcc.n	8002bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bda:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bdc:	4c09      	ldr	r4, [pc, #36]	@ (8002c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be0:	e001      	b.n	8002be6 <LoopFillZerobss>

08002be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be4:	3204      	adds	r2, #4

08002be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be8:	d3fb      	bcc.n	8002be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bea:	f003 fc73 	bl	80064d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bee:	f7ff fbc3 	bl	8002378 <main>
  bx lr
 8002bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bfc:	080084c8 	.word	0x080084c8
  ldr r2, =_sbss
 8002c00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c04:	2000070c 	.word	0x2000070c

08002c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC1_2_IRQHandler>
	...

08002c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b510      	push	{r4, lr}
 8002c0e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_InitTick+0x40>)
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c50 <HAL_InitTick+0x44>)
 8002c1e:	6810      	ldr	r0, [r2, #0]
 8002c20:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c24:	f000 fb3a 	bl	800329c <HAL_SYSTICK_Config>
 8002c28:	b968      	cbnz	r0, 8002c46 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2a:	2c0f      	cmp	r4, #15
 8002c2c:	d901      	bls.n	8002c32 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002c2e:	2001      	movs	r0, #1
 8002c30:	e00a      	b.n	8002c48 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c32:	2200      	movs	r2, #0
 8002c34:	4621      	mov	r1, r4
 8002c36:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3a:	f000 fb11 	bl	8003260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c3e:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_InitTick+0x48>)
 8002c40:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2000      	movs	r0, #0
 8002c44:	e000      	b.n	8002c48 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002c46:	2001      	movs	r0, #1
}
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000010 	.word	0x20000010
 8002c50:	2000000c 	.word	0x2000000c
 8002c54:	20000014 	.word	0x20000014

08002c58 <HAL_Init>:
{
 8002c58:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c5a:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <HAL_Init+0x20>)
 8002c5c:	6813      	ldr	r3, [r2, #0]
 8002c5e:	f043 0310 	orr.w	r3, r3, #16
 8002c62:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f000 fae9 	bl	800323c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6a:	200f      	movs	r0, #15
 8002c6c:	f7ff ffce 	bl	8002c0c <HAL_InitTick>
  HAL_MspInit();
 8002c70:	f7ff fd5e 	bl	8002730 <HAL_MspInit>
}
 8002c74:	2000      	movs	r0, #0
 8002c76:	bd08      	pop	{r3, pc}
 8002c78:	40022000 	.word	0x40022000

08002c7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002c7c:	4a03      	ldr	r2, [pc, #12]	@ (8002c8c <HAL_IncTick+0x10>)
 8002c7e:	6811      	ldr	r1, [r2, #0]
 8002c80:	4b03      	ldr	r3, [pc, #12]	@ (8002c90 <HAL_IncTick+0x14>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	440b      	add	r3, r1
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	200005bc 	.word	0x200005bc
 8002c90:	20000010 	.word	0x20000010

08002c94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c94:	4b01      	ldr	r3, [pc, #4]	@ (8002c9c <HAL_GetTick+0x8>)
 8002c96:	6818      	ldr	r0, [r3, #0]
}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	200005bc 	.word	0x200005bc

08002ca0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ca2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ca6:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8002caa:	d11e      	bne.n	8002cea <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002cbc:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002cc0:	d003      	beq.n	8002cca <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff f922 	bl	8001f0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002cc8:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cca:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d1f8      	bne.n	8002cc2 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cd6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cda:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8002cde:	d1f0      	bne.n	8002cc2 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ce8:	e7eb      	b.n	8002cc2 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	4798      	blx	r3
}
 8002cf0:	e7ea      	b.n	8002cc8 <ADC_DMAConvCplt+0x28>

08002cf2 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002cf2:	4770      	bx	lr

08002cf4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cf4:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cf6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002cf8:	f7ff fffb 	bl	8002cf2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cfc:	bd08      	pop	{r3, pc}

08002cfe <HAL_ADC_ErrorCallback>:
}
 8002cfe:	4770      	bx	lr

08002d00 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d00:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d02:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d04:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d0a:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d0c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d14:	f7ff fff3 	bl	8002cfe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d18:	bd08      	pop	{r3, pc}
	...

08002d1c <HAL_ADC_ConfigChannel>:
{ 
 8002d1c:	b430      	push	{r4, r5}
 8002d1e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002d20:	2200      	movs	r2, #0
 8002d22:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002d24:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002d28:	2a01      	cmp	r2, #1
 8002d2a:	f000 808f 	beq.w	8002e4c <HAL_ADC_ConfigChannel+0x130>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2201      	movs	r2, #1
 8002d32:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8002d36:	684a      	ldr	r2, [r1, #4]
 8002d38:	2a06      	cmp	r2, #6
 8002d3a:	d82d      	bhi.n	8002d98 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d3c:	6804      	ldr	r4, [r0, #0]
 8002d3e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002d40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d44:	3a05      	subs	r2, #5
 8002d46:	f04f 0c1f 	mov.w	ip, #31
 8002d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d4e:	ea20 000c 	bic.w	r0, r0, ip
 8002d52:	680d      	ldr	r5, [r1, #0]
 8002d54:	fa05 f202 	lsl.w	r2, r5, r2
 8002d58:	4302      	orrs	r2, r0
 8002d5a:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d5c:	680a      	ldr	r2, [r1, #0]
 8002d5e:	2a09      	cmp	r2, #9
 8002d60:	d938      	bls.n	8002dd4 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d62:	681c      	ldr	r4, [r3, #0]
 8002d64:	68e0      	ldr	r0, [r4, #12]
 8002d66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d6a:	3a1e      	subs	r2, #30
 8002d6c:	f04f 0c07 	mov.w	ip, #7
 8002d70:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d74:	ea20 000c 	bic.w	r0, r0, ip
 8002d78:	688d      	ldr	r5, [r1, #8]
 8002d7a:	fa05 f202 	lsl.w	r2, r5, r2
 8002d7e:	4302      	orrs	r2, r0
 8002d80:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d82:	680a      	ldr	r2, [r1, #0]
 8002d84:	3a10      	subs	r2, #16
 8002d86:	2a01      	cmp	r2, #1
 8002d88:	d934      	bls.n	8002df4 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002d92:	b002      	add	sp, #8
 8002d94:	bc30      	pop	{r4, r5}
 8002d96:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002d98:	2a0c      	cmp	r2, #12
 8002d9a:	d80d      	bhi.n	8002db8 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d9c:	6805      	ldr	r5, [r0, #0]
 8002d9e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002da0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002da4:	3a23      	subs	r2, #35	@ 0x23
 8002da6:	241f      	movs	r4, #31
 8002da8:	4094      	lsls	r4, r2
 8002daa:	ea20 0004 	bic.w	r0, r0, r4
 8002dae:	680c      	ldr	r4, [r1, #0]
 8002db0:	4094      	lsls	r4, r2
 8002db2:	4320      	orrs	r0, r4
 8002db4:	6328      	str	r0, [r5, #48]	@ 0x30
 8002db6:	e7d1      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002db8:	6805      	ldr	r5, [r0, #0]
 8002dba:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002dbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002dc0:	3a41      	subs	r2, #65	@ 0x41
 8002dc2:	241f      	movs	r4, #31
 8002dc4:	4094      	lsls	r4, r2
 8002dc6:	ea20 0004 	bic.w	r0, r0, r4
 8002dca:	680c      	ldr	r4, [r1, #0]
 8002dcc:	4094      	lsls	r4, r2
 8002dce:	4320      	orrs	r0, r4
 8002dd0:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8002dd2:	e7c3      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dd4:	681c      	ldr	r4, [r3, #0]
 8002dd6:	6920      	ldr	r0, [r4, #16]
 8002dd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002ddc:	f04f 0c07 	mov.w	ip, #7
 8002de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8002de4:	ea20 000c 	bic.w	r0, r0, ip
 8002de8:	688d      	ldr	r5, [r1, #8]
 8002dea:	fa05 f202 	lsl.w	r2, r5, r2
 8002dee:	4302      	orrs	r2, r0
 8002df0:	6122      	str	r2, [r4, #16]
 8002df2:	e7c6      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4816      	ldr	r0, [pc, #88]	@ (8002e50 <HAL_ADC_ConfigChannel+0x134>)
 8002df8:	4282      	cmp	r2, r0
 8002dfa:	d005      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dfe:	f042 0220 	orr.w	r2, r2, #32
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002e04:	2001      	movs	r0, #1
 8002e06:	e7c1      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e08:	6890      	ldr	r0, [r2, #8]
 8002e0a:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8002e0e:	d11b      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e10:	6890      	ldr	r0, [r2, #8]
 8002e12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002e16:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e18:	680a      	ldr	r2, [r1, #0]
 8002e1a:	2a10      	cmp	r2, #16
 8002e1c:	d001      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1e:	2000      	movs	r0, #0
 8002e20:	e7b4      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e22:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <HAL_ADC_ConfigChannel+0x138>)
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	490c      	ldr	r1, [pc, #48]	@ (8002e58 <HAL_ADC_ConfigChannel+0x13c>)
 8002e28:	fba1 1202 	umull	r1, r2, r1, r2
 8002e2c:	0c92      	lsrs	r2, r2, #18
 8002e2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e32:	0052      	lsls	r2, r2, #1
 8002e34:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002e36:	e002      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8002e38:	9a01      	ldr	r2, [sp, #4]
 8002e3a:	3a01      	subs	r2, #1
 8002e3c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002e3e:	9a01      	ldr	r2, [sp, #4]
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	d1f9      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2000      	movs	r0, #0
 8002e46:	e7a1      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x70>
 8002e48:	2000      	movs	r0, #0
 8002e4a:	e79f      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	e7a0      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x76>
 8002e50:	40012400 	.word	0x40012400
 8002e54:	2000000c 	.word	0x2000000c
 8002e58:	431bde83 	.word	0x431bde83

08002e5c <ADC_Enable>:
{
 8002e5c:	b530      	push	{r4, r5, lr}
 8002e5e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e64:	6803      	ldr	r3, [r0, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	f012 0f01 	tst.w	r2, #1
 8002e6c:	d133      	bne.n	8002ed6 <ADC_Enable+0x7a>
 8002e6e:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e78:	4b18      	ldr	r3, [pc, #96]	@ (8002edc <ADC_Enable+0x80>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <ADC_Enable+0x84>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002e86:	e002      	b.n	8002e8e <ADC_Enable+0x32>
      wait_loop_index--;
 8002e88:	9b01      	ldr	r3, [sp, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002e8e:	9b01      	ldr	r3, [sp, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f9      	bne.n	8002e88 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8002e94:	f7ff fefe 	bl	8002c94 <HAL_GetTick>
 8002e98:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f013 0f01 	tst.w	r3, #1
 8002ea2:	d116      	bne.n	8002ed2 <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ea4:	f7ff fef6 	bl	8002c94 <HAL_GetTick>
 8002ea8:	1b43      	subs	r3, r0, r5
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d9f5      	bls.n	8002e9a <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f013 0f01 	tst.w	r3, #1
 8002eb6:	d1f0      	bne.n	8002e9a <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002eba:	f043 0310 	orr.w	r3, r3, #16
 8002ebe:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8002ece:	2001      	movs	r0, #1
 8002ed0:	e002      	b.n	8002ed8 <ADC_Enable+0x7c>
  return HAL_OK;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e000      	b.n	8002ed8 <ADC_Enable+0x7c>
 8002ed6:	2000      	movs	r0, #0
}
 8002ed8:	b003      	add	sp, #12
 8002eda:	bd30      	pop	{r4, r5, pc}
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	431bde83 	.word	0x431bde83

08002ee4 <HAL_ADC_Start_DMA>:
{
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	460d      	mov	r5, r1
 8002eea:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002eec:	6801      	ldr	r1, [r0, #0]
 8002eee:	4844      	ldr	r0, [pc, #272]	@ (8003000 <HAL_ADC_Start_DMA+0x11c>)
 8002ef0:	4281      	cmp	r1, r0
 8002ef2:	d059      	beq.n	8002fa8 <HAL_ADC_Start_DMA+0xc4>
 8002ef4:	4b43      	ldr	r3, [pc, #268]	@ (8003004 <HAL_ADC_Start_DMA+0x120>)
 8002ef6:	4299      	cmp	r1, r3
 8002ef8:	d056      	beq.n	8002fa8 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8002efa:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d07c      	beq.n	8002ffc <HAL_ADC_Start_DMA+0x118>
 8002f02:	2301      	movs	r3, #1
 8002f04:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7ff ffa7 	bl	8002e5c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002f0e:	4607      	mov	r7, r0
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d16e      	bne.n	8002ff2 <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8002f14:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002f16:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8002f1a:	f021 0101 	bic.w	r1, r1, #1
 8002f1e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002f22:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	4b37      	ldr	r3, [pc, #220]	@ (8003004 <HAL_ADC_Start_DMA+0x120>)
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d044      	beq.n	8002fb6 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f2e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f32:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f34:	6853      	ldr	r3, [r2, #4]
 8002f36:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002f3a:	d005      	beq.n	8002f48 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f3e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f46:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f48:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f4a:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002f4e:	d048      	beq.n	8002fe2 <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002f52:	f023 0306 	bic.w	r3, r3, #6
 8002f56:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f5e:	6a23      	ldr	r3, [r4, #32]
 8002f60:	4a29      	ldr	r2, [pc, #164]	@ (8003008 <HAL_ADC_Start_DMA+0x124>)
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f64:	6a23      	ldr	r3, [r4, #32]
 8002f66:	4a29      	ldr	r2, [pc, #164]	@ (800300c <HAL_ADC_Start_DMA+0x128>)
 8002f68:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f6a:	6a23      	ldr	r3, [r4, #32]
 8002f6c:	4a28      	ldr	r2, [pc, #160]	@ (8003010 <HAL_ADC_Start_DMA+0x12c>)
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	f06f 0202 	mvn.w	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	6893      	ldr	r3, [r2, #8]
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f80:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f82:	6821      	ldr	r1, [r4, #0]
 8002f84:	4633      	mov	r3, r6
 8002f86:	462a      	mov	r2, r5
 8002f88:	314c      	adds	r1, #76	@ 0x4c
 8002f8a:	6a20      	ldr	r0, [r4, #32]
 8002f8c:	f000 f9e6 	bl	800335c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002f98:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002f9c:	d024      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	e027      	b.n	8002ff8 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002fa8:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <HAL_ADC_Start_DMA+0x11c>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002fb0:	d0a3      	beq.n	8002efa <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8002fb2:	2701      	movs	r7, #1
 8002fb4:	e020      	b.n	8002ff8 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fb6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002fc0:	d0b4      	beq.n	8002f2c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002fc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fc8:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002fca:	4b0d      	ldr	r3, [pc, #52]	@ (8003000 <HAL_ADC_Start_DMA+0x11c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002fd2:	d0b9      	beq.n	8002f48 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fd4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002fd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fe0:	e7b2      	b.n	8002f48 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fe6:	e7b7      	b.n	8002f58 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e002      	b.n	8002ff8 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002ff8:	4638      	mov	r0, r7
 8002ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002ffc:	2702      	movs	r7, #2
 8002ffe:	e7fb      	b.n	8002ff8 <HAL_ADC_Start_DMA+0x114>
 8003000:	40012400 	.word	0x40012400
 8003004:	40012800 	.word	0x40012800
 8003008:	08002ca1 	.word	0x08002ca1
 800300c:	08002cf5 	.word	0x08002cf5
 8003010:	08002d01 	.word	0x08002d01

08003014 <ADC_ConversionStop_Disable>:
{
 8003014:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003016:	6803      	ldr	r3, [r0, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	f012 0f01 	tst.w	r2, #1
 800301e:	d101      	bne.n	8003024 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8003020:	2000      	movs	r0, #0
}
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800302e:	f7ff fe31 	bl	8002c94 <HAL_GetTick>
 8003032:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f013 0f01 	tst.w	r3, #1
 800303c:	d013      	beq.n	8003066 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800303e:	f7ff fe29 	bl	8002c94 <HAL_GetTick>
 8003042:	1b43      	subs	r3, r0, r5
 8003044:	2b02      	cmp	r3, #2
 8003046:	d9f5      	bls.n	8003034 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f013 0f01 	tst.w	r3, #1
 8003050:	d0f0      	beq.n	8003034 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003052:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003054:	f043 0310 	orr.w	r3, r3, #16
 8003058:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8003062:	2001      	movs	r0, #1
 8003064:	e7dd      	b.n	8003022 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8003066:	2000      	movs	r0, #0
 8003068:	e7db      	b.n	8003022 <ADC_ConversionStop_Disable+0xe>
	...

0800306c <HAL_ADC_Init>:
  if(hadc == NULL)
 800306c:	2800      	cmp	r0, #0
 800306e:	d07b      	beq.n	8003168 <HAL_ADC_Init+0xfc>
{
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003074:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04d      	beq.n	8003116 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800307a:	4620      	mov	r0, r4
 800307c:	f7ff ffca 	bl	8003014 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003080:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003082:	f013 0310 	ands.w	r3, r3, #16
 8003086:	d169      	bne.n	800315c <HAL_ADC_Init+0xf0>
 8003088:	2800      	cmp	r0, #0
 800308a:	d167      	bne.n	800315c <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 800308c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800308e:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8003092:	f022 0202 	bic.w	r2, r2, #2
 8003096:	f042 0202 	orr.w	r2, r2, #2
 800309a:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800309c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800309e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030a0:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030a2:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030a4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030a8:	68a5      	ldr	r5, [r4, #8]
 80030aa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80030ae:	d002      	beq.n	80030b6 <HAL_ADC_Init+0x4a>
 80030b0:	2d01      	cmp	r5, #1
 80030b2:	d036      	beq.n	8003122 <HAL_ADC_Init+0xb6>
 80030b4:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030b6:	7d26      	ldrb	r6, [r4, #20]
 80030b8:	2e01      	cmp	r6, #1
 80030ba:	d035      	beq.n	8003128 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80030bc:	6826      	ldr	r6, [r4, #0]
 80030be:	6871      	ldr	r1, [r6, #4]
 80030c0:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 80030c4:	4329      	orrs	r1, r5
 80030c6:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80030c8:	6825      	ldr	r5, [r4, #0]
 80030ca:	68ae      	ldr	r6, [r5, #8]
 80030cc:	4927      	ldr	r1, [pc, #156]	@ (800316c <HAL_ADC_Init+0x100>)
 80030ce:	4031      	ands	r1, r6
 80030d0:	4311      	orrs	r1, r2
 80030d2:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030d4:	68a1      	ldr	r1, [r4, #8]
 80030d6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80030da:	d001      	beq.n	80030e0 <HAL_ADC_Init+0x74>
 80030dc:	2901      	cmp	r1, #1
 80030de:	d102      	bne.n	80030e6 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030e0:	6923      	ldr	r3, [r4, #16]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80030e6:	6825      	ldr	r5, [r4, #0]
 80030e8:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80030ea:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 80030ee:	430b      	orrs	r3, r1
 80030f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	6899      	ldr	r1, [r3, #8]
 80030f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <HAL_ADC_Init+0x104>)
 80030f8:	400b      	ands	r3, r1
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d025      	beq.n	800314a <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80030fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003100:	f023 0312 	bic.w	r3, r3, #18
 8003104:	f043 0310 	orr.w	r3, r3, #16
 8003108:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8003112:	2001      	movs	r0, #1
 8003114:	e027      	b.n	8003166 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8003116:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003118:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 800311c:	f7ff fb2a 	bl	8002774 <HAL_ADC_MspInit>
 8003120:	e7ab      	b.n	800307a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003122:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8003126:	e7c6      	b.n	80030b6 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003128:	b931      	cbnz	r1, 8003138 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800312a:	69a1      	ldr	r1, [r4, #24]
 800312c:	3901      	subs	r1, #1
 800312e:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8003132:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8003136:	e7c1      	b.n	80030bc <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003138:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800313a:	f041 0120 	orr.w	r1, r1, #32
 800313e:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003140:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003142:	f041 0101 	orr.w	r1, r1, #1
 8003146:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8003148:	e7b8      	b.n	80030bc <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800314a:	2300      	movs	r3, #0
 800314c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800314e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003150:	f023 0303 	bic.w	r3, r3, #3
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	62a3      	str	r3, [r4, #40]	@ 0x28
 800315a:	e004      	b.n	8003166 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800315e:	f043 0310 	orr.w	r3, r3, #16
 8003162:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8003164:	2001      	movs	r0, #1
}
 8003166:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003168:	2001      	movs	r0, #1
}
 800316a:	4770      	bx	lr
 800316c:	ffe1f7fd 	.word	0xffe1f7fd
 8003170:	ff1f0efe 	.word	0xff1f0efe

08003174 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8003174:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8003178:	2b01      	cmp	r3, #1
 800317a:	d028      	beq.n	80031ce <HAL_ADC_Stop_DMA+0x5a>
{
 800317c:	b510      	push	{r4, lr}
 800317e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003180:	2301      	movs	r3, #1
 8003182:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003186:	f7ff ff45 	bl	8003014 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800318a:	b950      	cbnz	r0, 80031a2 <HAL_ADC_Stop_DMA+0x2e>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	6893      	ldr	r3, [r2, #8]
 8003190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003194:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003196:	6a22      	ldr	r2, [r4, #32]
 8003198:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_ADC_Stop_DMA+0x36>
  __HAL_UNLOCK(hadc);
 80031a2:	2300      	movs	r3, #0
 80031a4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80031a8:	bd10      	pop	{r4, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 f911 	bl	80033d2 <HAL_DMA_Abort>
      if (tmp_hal_status == HAL_OK)
 80031b0:	b940      	cbnz	r0, 80031c4 <HAL_ADC_Stop_DMA+0x50>
        ADC_STATE_CLR_SET(hadc->State,
 80031b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80031b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80031c2:	e7ee      	b.n	80031a2 <HAL_ADC_Stop_DMA+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80031c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80031cc:	e7e9      	b.n	80031a2 <HAL_ADC_Stop_DMA+0x2e>
  __HAL_LOCK(hadc);
 80031ce:	2002      	movs	r0, #2
}
 80031d0:	4770      	bx	lr
	...

080031d4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80031d4:	2800      	cmp	r0, #0
 80031d6:	db08      	blt.n	80031ea <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	0109      	lsls	r1, r1, #4
 80031da:	b2c9      	uxtb	r1, r1
 80031dc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80031e0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80031e4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80031e8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ea:	f000 000f 	and.w	r0, r0, #15
 80031ee:	0109      	lsls	r1, r1, #4
 80031f0:	b2c9      	uxtb	r1, r1
 80031f2:	4b01      	ldr	r3, [pc, #4]	@ (80031f8 <__NVIC_SetPriority+0x24>)
 80031f4:	5419      	strb	r1, [r3, r0]
  }
}
 80031f6:	4770      	bx	lr
 80031f8:	e000ed14 	.word	0xe000ed14

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003202:	f1c0 0c07 	rsb	ip, r0, #7
 8003206:	f1bc 0f04 	cmp.w	ip, #4
 800320a:	bf28      	it	cs
 800320c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003210:	1d03      	adds	r3, r0, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d90f      	bls.n	8003236 <NVIC_EncodePriority+0x3a>
 8003216:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 3eff 	mov.w	lr, #4294967295
 800321c:	fa0e f00c 	lsl.w	r0, lr, ip
 8003220:	ea21 0100 	bic.w	r1, r1, r0
 8003224:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003226:	fa0e fe03 	lsl.w	lr, lr, r3
 800322a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800322e:	ea41 0002 	orr.w	r0, r1, r2
 8003232:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003236:	2300      	movs	r3, #0
 8003238:	e7ee      	b.n	8003218 <NVIC_EncodePriority+0x1c>
	...

0800323c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800323c:	4a07      	ldr	r2, [pc, #28]	@ (800325c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800323e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003240:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003248:	0200      	lsls	r0, r0, #8
 800324a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003258:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003260:	b510      	push	{r4, lr}
 8003262:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_NVIC_SetPriority+0x1c>)
 8003266:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003268:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800326c:	f7ff ffc6 	bl	80031fc <NVIC_EncodePriority>
 8003270:	4601      	mov	r1, r0
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff ffae 	bl	80031d4 <__NVIC_SetPriority>
}
 8003278:	bd10      	pop	{r4, pc}
 800327a:	bf00      	nop
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003280:	2800      	cmp	r0, #0
 8003282:	db07      	blt.n	8003294 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003284:	f000 021f 	and.w	r2, r0, #31
 8003288:	0940      	lsrs	r0, r0, #5
 800328a:	2301      	movs	r3, #1
 800328c:	4093      	lsls	r3, r2
 800328e:	4a02      	ldr	r2, [pc, #8]	@ (8003298 <HAL_NVIC_EnableIRQ+0x18>)
 8003290:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100

0800329c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	3801      	subs	r0, #1
 800329e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80032a2:	d20b      	bcs.n	80032bc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80032a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	4a05      	ldr	r2, [pc, #20]	@ (80032c0 <HAL_SYSTICK_Config+0x24>)
 80032ac:	21f0      	movs	r1, #240	@ 0xf0
 80032ae:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b2:	2000      	movs	r0, #0
 80032b4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b6:	2207      	movs	r2, #7
 80032b8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80032bc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c4:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032c6:	2401      	movs	r4, #1
 80032c8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80032ca:	40ac      	lsls	r4, r5
 80032cc:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80032ce:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032d0:	6804      	ldr	r4, [r0, #0]
 80032d2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d4:	6843      	ldr	r3, [r0, #4]
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d005      	beq.n	80032e6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80032da:	6803      	ldr	r3, [r0, #0]
 80032dc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80032de:	6803      	ldr	r3, [r0, #0]
 80032e0:	60da      	str	r2, [r3, #12]
  }
}
 80032e2:	bc30      	pop	{r4, r5}
 80032e4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80032e6:	6803      	ldr	r3, [r0, #0]
 80032e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80032ea:	6803      	ldr	r3, [r0, #0]
 80032ec:	60d9      	str	r1, [r3, #12]
 80032ee:	e7f8      	b.n	80032e2 <DMA_SetConfig+0x1e>

080032f0 <HAL_DMA_Init>:
  if(hdma == NULL)
 80032f0:	b360      	cbz	r0, 800334c <HAL_DMA_Init+0x5c>
{
 80032f2:	b410      	push	{r4}
 80032f4:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032f6:	6801      	ldr	r1, [r0, #0]
 80032f8:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <HAL_DMA_Init+0x60>)
 80032fa:	440b      	add	r3, r1
 80032fc:	4815      	ldr	r0, [pc, #84]	@ (8003354 <HAL_DMA_Init+0x64>)
 80032fe:	fba0 0303 	umull	r0, r3, r0, r3
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <HAL_DMA_Init+0x68>)
 800330a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8003312:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003314:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 8003318:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
  tmp |=  hdma->Init.Direction        |
 800331c:	6853      	ldr	r3, [r2, #4]
 800331e:	6894      	ldr	r4, [r2, #8]
 8003320:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003322:	68d4      	ldr	r4, [r2, #12]
 8003324:	4323      	orrs	r3, r4
 8003326:	6914      	ldr	r4, [r2, #16]
 8003328:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332a:	6954      	ldr	r4, [r2, #20]
 800332c:	4323      	orrs	r3, r4
 800332e:	6994      	ldr	r4, [r2, #24]
 8003330:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003332:	69d4      	ldr	r4, [r2, #28]
 8003334:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8003336:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8003338:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333a:	2000      	movs	r0, #0
 800333c:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800333e:	2301      	movs	r3, #1
 8003340:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8003344:	f882 0020 	strb.w	r0, [r2, #32]
}
 8003348:	bc10      	pop	{r4}
 800334a:	4770      	bx	lr
    return HAL_ERROR;
 800334c:	2001      	movs	r0, #1
}
 800334e:	4770      	bx	lr
 8003350:	bffdfff8 	.word	0xbffdfff8
 8003354:	cccccccd 	.word	0xcccccccd
 8003358:	40020000 	.word	0x40020000

0800335c <HAL_DMA_Start_IT>:
{
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003360:	f890 0020 	ldrb.w	r0, [r0, #32]
 8003364:	2801      	cmp	r0, #1
 8003366:	d032      	beq.n	80033ce <HAL_DMA_Start_IT+0x72>
 8003368:	2001      	movs	r0, #1
 800336a:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800336e:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8003372:	b2c0      	uxtb	r0, r0
 8003374:	2801      	cmp	r0, #1
 8003376:	d004      	beq.n	8003382 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8003378:	2300      	movs	r3, #0
 800337a:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 800337e:	2002      	movs	r0, #2
}
 8003380:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003382:	2002      	movs	r0, #2
 8003384:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003388:	2000      	movs	r0, #0
 800338a:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 800338c:	6825      	ldr	r5, [r4, #0]
 800338e:	6828      	ldr	r0, [r5, #0]
 8003390:	f020 0001 	bic.w	r0, r0, #1
 8003394:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff ff94 	bl	80032c4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800339c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800339e:	b15b      	cbz	r3, 80033b8 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	6813      	ldr	r3, [r2, #0]
 80033a4:	f043 030e 	orr.w	r3, r3, #14
 80033a8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	6813      	ldr	r3, [r2, #0]
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2000      	movs	r0, #0
 80033b6:	e7e3      	b.n	8003380 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033c2:	6822      	ldr	r2, [r4, #0]
 80033c4:	6813      	ldr	r3, [r2, #0]
 80033c6:	f043 030a 	orr.w	r3, r3, #10
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e7ed      	b.n	80033aa <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80033ce:	2002      	movs	r0, #2
 80033d0:	e7d6      	b.n	8003380 <HAL_DMA_Start_IT+0x24>

080033d2 <HAL_DMA_Abort>:
{
 80033d2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d4:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	2a02      	cmp	r2, #2
 80033dc:	d006      	beq.n	80033ec <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033de:	2204      	movs	r2, #4
 80033e0:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80033e2:	2200      	movs	r2, #0
 80033e4:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80033e8:	2001      	movs	r0, #1
 80033ea:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ec:	6801      	ldr	r1, [r0, #0]
 80033ee:	680a      	ldr	r2, [r1, #0]
 80033f0:	f022 020e 	bic.w	r2, r2, #14
 80033f4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80033f6:	6801      	ldr	r1, [r0, #0]
 80033f8:	680a      	ldr	r2, [r1, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003400:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003402:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800340c:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 8003410:	2000      	movs	r0, #0
 8003412:	f883 0020 	strb.w	r0, [r3, #32]
}
 8003416:	4770      	bx	lr

08003418 <HAL_DMA_IRQHandler>:
{
 8003418:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800341a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800341c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800341e:	6804      	ldr	r4, [r0, #0]
 8003420:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003422:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003424:	2304      	movs	r3, #4
 8003426:	408b      	lsls	r3, r1
 8003428:	4213      	tst	r3, r2
 800342a:	d035      	beq.n	8003498 <HAL_DMA_IRQHandler+0x80>
 800342c:	f015 0f04 	tst.w	r5, #4
 8003430:	d032      	beq.n	8003498 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	f013 0f20 	tst.w	r3, #32
 8003438:	d103      	bne.n	8003442 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003442:	6803      	ldr	r3, [r0, #0]
 8003444:	4a43      	ldr	r2, [pc, #268]	@ (8003554 <HAL_DMA_IRQHandler+0x13c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d014      	beq.n	8003474 <HAL_DMA_IRQHandler+0x5c>
 800344a:	3214      	adds	r2, #20
 800344c:	4293      	cmp	r3, r2
 800344e:	d018      	beq.n	8003482 <HAL_DMA_IRQHandler+0x6a>
 8003450:	3214      	adds	r2, #20
 8003452:	4293      	cmp	r3, r2
 8003454:	d017      	beq.n	8003486 <HAL_DMA_IRQHandler+0x6e>
 8003456:	3214      	adds	r2, #20
 8003458:	4293      	cmp	r3, r2
 800345a:	d017      	beq.n	800348c <HAL_DMA_IRQHandler+0x74>
 800345c:	3214      	adds	r2, #20
 800345e:	4293      	cmp	r3, r2
 8003460:	d017      	beq.n	8003492 <HAL_DMA_IRQHandler+0x7a>
 8003462:	3214      	adds	r2, #20
 8003464:	4293      	cmp	r3, r2
 8003466:	d002      	beq.n	800346e <HAL_DMA_IRQHandler+0x56>
 8003468:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800346c:	e003      	b.n	8003476 <HAL_DMA_IRQHandler+0x5e>
 800346e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003472:	e000      	b.n	8003476 <HAL_DMA_IRQHandler+0x5e>
 8003474:	2204      	movs	r2, #4
 8003476:	4b38      	ldr	r3, [pc, #224]	@ (8003558 <HAL_DMA_IRQHandler+0x140>)
 8003478:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800347a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800347c:	b103      	cbz	r3, 8003480 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 800347e:	4798      	blx	r3
}
 8003480:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003482:	2240      	movs	r2, #64	@ 0x40
 8003484:	e7f7      	b.n	8003476 <HAL_DMA_IRQHandler+0x5e>
 8003486:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800348a:	e7f4      	b.n	8003476 <HAL_DMA_IRQHandler+0x5e>
 800348c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003490:	e7f1      	b.n	8003476 <HAL_DMA_IRQHandler+0x5e>
 8003492:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003496:	e7ee      	b.n	8003476 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003498:	2302      	movs	r3, #2
 800349a:	408b      	lsls	r3, r1
 800349c:	4213      	tst	r3, r2
 800349e:	d03c      	beq.n	800351a <HAL_DMA_IRQHandler+0x102>
 80034a0:	f015 0f02 	tst.w	r5, #2
 80034a4:	d039      	beq.n	800351a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	f013 0f20 	tst.w	r3, #32
 80034ac:	d106      	bne.n	80034bc <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	f023 030a 	bic.w	r3, r3, #10
 80034b4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	4a25      	ldr	r2, [pc, #148]	@ (8003554 <HAL_DMA_IRQHandler+0x13c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d014      	beq.n	80034ee <HAL_DMA_IRQHandler+0xd6>
 80034c4:	3214      	adds	r2, #20
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01c      	beq.n	8003504 <HAL_DMA_IRQHandler+0xec>
 80034ca:	3214      	adds	r2, #20
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01b      	beq.n	8003508 <HAL_DMA_IRQHandler+0xf0>
 80034d0:	3214      	adds	r2, #20
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01b      	beq.n	800350e <HAL_DMA_IRQHandler+0xf6>
 80034d6:	3214      	adds	r2, #20
 80034d8:	4293      	cmp	r3, r2
 80034da:	d01b      	beq.n	8003514 <HAL_DMA_IRQHandler+0xfc>
 80034dc:	3214      	adds	r2, #20
 80034de:	4293      	cmp	r3, r2
 80034e0:	d002      	beq.n	80034e8 <HAL_DMA_IRQHandler+0xd0>
 80034e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e6:	e003      	b.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
 80034e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80034ec:	e000      	b.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
 80034ee:	2202      	movs	r2, #2
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_DMA_IRQHandler+0x140>)
 80034f2:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80034f4:	2300      	movs	r3, #0
 80034f6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80034fa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0bf      	beq.n	8003480 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8003500:	4798      	blx	r3
 8003502:	e7bd      	b.n	8003480 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003504:	2220      	movs	r2, #32
 8003506:	e7f3      	b.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
 8003508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800350c:	e7f0      	b.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
 800350e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003512:	e7ed      	b.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
 8003514:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003518:	e7ea      	b.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800351a:	2308      	movs	r3, #8
 800351c:	408b      	lsls	r3, r1
 800351e:	4213      	tst	r3, r2
 8003520:	d0ae      	beq.n	8003480 <HAL_DMA_IRQHandler+0x68>
 8003522:	f015 0f08 	tst.w	r5, #8
 8003526:	d0ab      	beq.n	8003480 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	f023 030e 	bic.w	r3, r3, #14
 800352e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003530:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003532:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003534:	2301      	movs	r3, #1
 8003536:	fa03 f202 	lsl.w	r2, r3, r2
 800353a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800353c:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800353e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003542:	2300      	movs	r3, #0
 8003544:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003548:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800354a:	2b00      	cmp	r3, #0
 800354c:	d098      	beq.n	8003480 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 800354e:	4798      	blx	r3
  return;
 8003550:	e796      	b.n	8003480 <HAL_DMA_IRQHandler+0x68>
 8003552:	bf00      	nop
 8003554:	40020008 	.word	0x40020008
 8003558:	40020000 	.word	0x40020000

0800355c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003560:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8003562:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003564:	e0a2      	b.n	80036ac <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003566:	4d7e      	ldr	r5, [pc, #504]	@ (8003760 <HAL_GPIO_Init+0x204>)
 8003568:	42ab      	cmp	r3, r5
 800356a:	d010      	beq.n	800358e <HAL_GPIO_Init+0x32>
 800356c:	d907      	bls.n	800357e <HAL_GPIO_Init+0x22>
 800356e:	4d7d      	ldr	r5, [pc, #500]	@ (8003764 <HAL_GPIO_Init+0x208>)
 8003570:	42ab      	cmp	r3, r5
 8003572:	d00c      	beq.n	800358e <HAL_GPIO_Init+0x32>
 8003574:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8003578:	42ab      	cmp	r3, r5
 800357a:	d008      	beq.n	800358e <HAL_GPIO_Init+0x32>
 800357c:	e013      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
 800357e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003582:	42ab      	cmp	r3, r5
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x32>
 8003586:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 800358a:	42ab      	cmp	r3, r5
 800358c:	d107      	bne.n	800359e <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800358e:	688b      	ldr	r3, [r1, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d055      	beq.n	8003640 <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003594:	2b01      	cmp	r3, #1
 8003596:	d04e      	beq.n	8003636 <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8003598:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800359a:	2408      	movs	r4, #8
 800359c:	e003      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800359e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80035a2:	42ab      	cmp	r3, r5
 80035a4:	d0f3      	beq.n	800358e <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035a6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80035aa:	d84b      	bhi.n	8003644 <HAL_GPIO_Init+0xe8>
 80035ac:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035ae:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035b2:	6833      	ldr	r3, [r6, #0]
 80035b4:	250f      	movs	r5, #15
 80035b6:	4095      	lsls	r5, r2
 80035b8:	ea23 0305 	bic.w	r3, r3, r5
 80035bc:	fa04 f202 	lsl.w	r2, r4, r2
 80035c0:	4313      	orrs	r3, r2
 80035c2:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035c4:	684b      	ldr	r3, [r1, #4]
 80035c6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80035ca:	d06d      	beq.n	80036a8 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035cc:	4b66      	ldr	r3, [pc, #408]	@ (8003768 <HAL_GPIO_Init+0x20c>)
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	619a      	str	r2, [r3, #24]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80035e0:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80035e4:	1c95      	adds	r5, r2, #2
 80035e6:	4b61      	ldr	r3, [pc, #388]	@ (800376c <HAL_GPIO_Init+0x210>)
 80035e8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035ec:	f00c 0503 	and.w	r5, ip, #3
 80035f0:	00ad      	lsls	r5, r5, #2
 80035f2:	230f      	movs	r3, #15
 80035f4:	40ab      	lsls	r3, r5
 80035f6:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003770 <HAL_GPIO_Init+0x214>)
 80035fc:	4298      	cmp	r0, r3
 80035fe:	d028      	beq.n	8003652 <HAL_GPIO_Init+0xf6>
 8003600:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003604:	4298      	cmp	r0, r3
 8003606:	f000 808d 	beq.w	8003724 <HAL_GPIO_Init+0x1c8>
 800360a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800360e:	4298      	cmp	r0, r3
 8003610:	f000 808a 	beq.w	8003728 <HAL_GPIO_Init+0x1cc>
 8003614:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003618:	4298      	cmp	r0, r3
 800361a:	d018      	beq.n	800364e <HAL_GPIO_Init+0xf2>
 800361c:	2304      	movs	r3, #4
 800361e:	e019      	b.n	8003654 <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003620:	68cc      	ldr	r4, [r1, #12]
          break;
 8003622:	e7c0      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003624:	68cc      	ldr	r4, [r1, #12]
 8003626:	3404      	adds	r4, #4
          break;
 8003628:	e7bd      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800362a:	68cc      	ldr	r4, [r1, #12]
 800362c:	3408      	adds	r4, #8
          break;
 800362e:	e7ba      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003630:	68cc      	ldr	r4, [r1, #12]
 8003632:	340c      	adds	r4, #12
          break;
 8003634:	e7b7      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8003636:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003638:	2408      	movs	r4, #8
 800363a:	e7b4      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800363c:	2400      	movs	r4, #0
 800363e:	e7b2      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003640:	2404      	movs	r4, #4
 8003642:	e7b0      	b.n	80035a6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003644:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003646:	f1ac 0208 	sub.w	r2, ip, #8
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	e7b1      	b.n	80035b2 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800364e:	2303      	movs	r3, #3
 8003650:	e000      	b.n	8003654 <HAL_GPIO_Init+0xf8>
 8003652:	2300      	movs	r3, #0
 8003654:	40ab      	lsls	r3, r5
 8003656:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8003658:	3202      	adds	r2, #2
 800365a:	4d44      	ldr	r5, [pc, #272]	@ (800376c <HAL_GPIO_Init+0x210>)
 800365c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003660:	684b      	ldr	r3, [r1, #4]
 8003662:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003666:	d061      	beq.n	800372c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003668:	4a42      	ldr	r2, [pc, #264]	@ (8003774 <HAL_GPIO_Init+0x218>)
 800366a:	6893      	ldr	r3, [r2, #8]
 800366c:	ea43 030e 	orr.w	r3, r3, lr
 8003670:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003672:	684b      	ldr	r3, [r1, #4]
 8003674:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8003678:	d05e      	beq.n	8003738 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800367a:	4a3e      	ldr	r2, [pc, #248]	@ (8003774 <HAL_GPIO_Init+0x218>)
 800367c:	68d3      	ldr	r3, [r2, #12]
 800367e:	ea43 030e 	orr.w	r3, r3, lr
 8003682:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003684:	684b      	ldr	r3, [r1, #4]
 8003686:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800368a:	d05b      	beq.n	8003744 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800368c:	4a39      	ldr	r2, [pc, #228]	@ (8003774 <HAL_GPIO_Init+0x218>)
 800368e:	6853      	ldr	r3, [r2, #4]
 8003690:	ea43 030e 	orr.w	r3, r3, lr
 8003694:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003696:	684b      	ldr	r3, [r1, #4]
 8003698:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800369c:	d058      	beq.n	8003750 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800369e:	4a35      	ldr	r2, [pc, #212]	@ (8003774 <HAL_GPIO_Init+0x218>)
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	ea43 030e 	orr.w	r3, r3, lr
 80036a6:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80036a8:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ac:	680b      	ldr	r3, [r1, #0]
 80036ae:	fa33 f20c 	lsrs.w	r2, r3, ip
 80036b2:	d053      	beq.n	800375c <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80036b4:	2201      	movs	r2, #1
 80036b6:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ba:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 80036be:	ea32 0303 	bics.w	r3, r2, r3
 80036c2:	d1f1      	bne.n	80036a8 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80036c4:	684b      	ldr	r3, [r1, #4]
 80036c6:	2b12      	cmp	r3, #18
 80036c8:	f63f af4d 	bhi.w	8003566 <HAL_GPIO_Init+0xa>
 80036cc:	2b12      	cmp	r3, #18
 80036ce:	f63f af6a 	bhi.w	80035a6 <HAL_GPIO_Init+0x4a>
 80036d2:	a501      	add	r5, pc, #4	@ (adr r5, 80036d8 <HAL_GPIO_Init+0x17c>)
 80036d4:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80036d8:	0800358f 	.word	0x0800358f
 80036dc:	08003621 	.word	0x08003621
 80036e0:	0800362b 	.word	0x0800362b
 80036e4:	0800363d 	.word	0x0800363d
 80036e8:	080035a7 	.word	0x080035a7
 80036ec:	080035a7 	.word	0x080035a7
 80036f0:	080035a7 	.word	0x080035a7
 80036f4:	080035a7 	.word	0x080035a7
 80036f8:	080035a7 	.word	0x080035a7
 80036fc:	080035a7 	.word	0x080035a7
 8003700:	080035a7 	.word	0x080035a7
 8003704:	080035a7 	.word	0x080035a7
 8003708:	080035a7 	.word	0x080035a7
 800370c:	080035a7 	.word	0x080035a7
 8003710:	080035a7 	.word	0x080035a7
 8003714:	080035a7 	.word	0x080035a7
 8003718:	080035a7 	.word	0x080035a7
 800371c:	08003625 	.word	0x08003625
 8003720:	08003631 	.word	0x08003631
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003724:	2301      	movs	r3, #1
 8003726:	e795      	b.n	8003654 <HAL_GPIO_Init+0xf8>
 8003728:	2302      	movs	r3, #2
 800372a:	e793      	b.n	8003654 <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800372c:	4a11      	ldr	r2, [pc, #68]	@ (8003774 <HAL_GPIO_Init+0x218>)
 800372e:	6893      	ldr	r3, [r2, #8]
 8003730:	ea23 030e 	bic.w	r3, r3, lr
 8003734:	6093      	str	r3, [r2, #8]
 8003736:	e79c      	b.n	8003672 <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003738:	4a0e      	ldr	r2, [pc, #56]	@ (8003774 <HAL_GPIO_Init+0x218>)
 800373a:	68d3      	ldr	r3, [r2, #12]
 800373c:	ea23 030e 	bic.w	r3, r3, lr
 8003740:	60d3      	str	r3, [r2, #12]
 8003742:	e79f      	b.n	8003684 <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003744:	4a0b      	ldr	r2, [pc, #44]	@ (8003774 <HAL_GPIO_Init+0x218>)
 8003746:	6853      	ldr	r3, [r2, #4]
 8003748:	ea23 030e 	bic.w	r3, r3, lr
 800374c:	6053      	str	r3, [r2, #4]
 800374e:	e7a2      	b.n	8003696 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003750:	4a08      	ldr	r2, [pc, #32]	@ (8003774 <HAL_GPIO_Init+0x218>)
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	ea23 030e 	bic.w	r3, r3, lr
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e7a5      	b.n	80036a8 <HAL_GPIO_Init+0x14c>
  }
}
 800375c:	b002      	add	sp, #8
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	10220000 	.word	0x10220000
 8003764:	10310000 	.word	0x10310000
 8003768:	40021000 	.word	0x40021000
 800376c:	40010000 	.word	0x40010000
 8003770:	40010800 	.word	0x40010800
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003778:	6883      	ldr	r3, [r0, #8]
 800377a:	4219      	tst	r1, r3
 800377c:	d001      	beq.n	8003782 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800377e:	2001      	movs	r0, #1
 8003780:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003782:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003784:	4770      	bx	lr

08003786 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003786:	b10a      	cbz	r2, 800378c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003788:	6101      	str	r1, [r0, #16]
 800378a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800378c:	0409      	lsls	r1, r1, #16
 800378e:	6101      	str	r1, [r0, #16]
  }
}
 8003790:	4770      	bx	lr

08003792 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003792:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003794:	ea01 0203 	and.w	r2, r1, r3
 8003798:	ea21 0103 	bic.w	r1, r1, r3
 800379c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80037a0:	6101      	str	r1, [r0, #16]
}
 80037a2:	4770      	bx	lr

080037a4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a4:	6803      	ldr	r3, [r0, #0]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80037ac:	d101      	bne.n	80037b2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80037ae:	2000      	movs	r0, #0
}
 80037b0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037b6:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	2220      	movs	r2, #32
 80037be:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037c6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80037c8:	f042 0204 	orr.w	r2, r2, #4
 80037cc:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80037ce:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80037d2:	2001      	movs	r0, #1
 80037d4:	4770      	bx	lr

080037d6 <I2C_WaitOnFlagUntilTimeout>:
{
 80037d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037da:	4606      	mov	r6, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	4617      	mov	r7, r2
 80037e0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e2:	e03b      	b.n	800385c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e4:	f7ff fa56 	bl	8002c94 <HAL_GetTick>
 80037e8:	9b06      	ldr	r3, [sp, #24]
 80037ea:	1ac0      	subs	r0, r0, r3
 80037ec:	4540      	cmp	r0, r8
 80037ee:	d802      	bhi.n	80037f6 <I2C_WaitOnFlagUntilTimeout+0x20>
 80037f0:	f1b8 0f00 	cmp.w	r8, #0
 80037f4:	d132      	bne.n	800385c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037f6:	2d01      	cmp	r5, #1
 80037f8:	d018      	beq.n	800382c <I2C_WaitOnFlagUntilTimeout+0x56>
 80037fa:	6833      	ldr	r3, [r6, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	ea24 0303 	bic.w	r3, r4, r3
 8003802:	b29b      	uxth	r3, r3
 8003804:	fab3 f383 	clz	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	429f      	cmp	r7, r3
 800380c:	d126      	bne.n	800385c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800380e:	2300      	movs	r3, #0
 8003810:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003812:	2220      	movs	r2, #32
 8003814:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003818:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800381e:	f042 0220 	orr.w	r2, r2, #32
 8003822:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003824:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	e027      	b.n	800387c <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800382c:	6833      	ldr	r3, [r6, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	ea24 0303 	bic.w	r3, r4, r3
 8003834:	b29b      	uxth	r3, r3
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	e7e5      	b.n	800380a <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800383e:	6833      	ldr	r3, [r6, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	ea24 0c03 	bic.w	ip, r4, r3
 8003846:	fa1f fc8c 	uxth.w	ip, ip
 800384a:	fabc fc8c 	clz	ip, ip
 800384e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003852:	4567      	cmp	r7, ip
 8003854:	d111      	bne.n	800387a <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8003856:	f1b8 3fff 	cmp.w	r8, #4294967295
 800385a:	d1c3      	bne.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800385c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8003860:	2d01      	cmp	r5, #1
 8003862:	d0ec      	beq.n	800383e <I2C_WaitOnFlagUntilTimeout+0x68>
 8003864:	6833      	ldr	r3, [r6, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	ea24 0c03 	bic.w	ip, r4, r3
 800386c:	fa1f fc8c 	uxth.w	ip, ip
 8003870:	fabc fc8c 	clz	ip, ip
 8003874:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003878:	e7eb      	b.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 800387a:	2000      	movs	r0, #0
}
 800387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003880 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003884:	4605      	mov	r5, r0
 8003886:	460e      	mov	r6, r1
 8003888:	4690      	mov	r8, r2
 800388a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800388c:	e053      	b.n	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003894:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800389c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800389e:	2300      	movs	r3, #0
 80038a0:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a2:	2220      	movs	r2, #32
 80038a4:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ac:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80038ae:	f042 0204 	orr.w	r2, r2, #4
 80038b2:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80038b4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80038b8:	2001      	movs	r0, #1
 80038ba:	e04a      	b.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038bc:	f7ff f9ea 	bl	8002c94 <HAL_GetTick>
 80038c0:	eba0 0009 	sub.w	r0, r0, r9
 80038c4:	4540      	cmp	r0, r8
 80038c6:	d802      	bhi.n	80038ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80038c8:	f1b8 0f00 	cmp.w	r8, #0
 80038cc:	d133      	bne.n	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038ce:	2f01      	cmp	r7, #1
 80038d0:	d017      	beq.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80038d2:	682b      	ldr	r3, [r5, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	ea26 0303 	bic.w	r3, r6, r3
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b00      	subs	r3, #0
 80038de:	bf18      	it	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	b343      	cbz	r3, 8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	2220      	movs	r2, #32
 80038ea:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ee:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80038f4:	f042 0220 	orr.w	r2, r2, #32
 80038f8:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80038fa:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80038fe:	2001      	movs	r0, #1
 8003900:	e027      	b.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003902:	682b      	ldr	r3, [r5, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	ea26 0303 	bic.w	r3, r6, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b00      	subs	r3, #0
 800390e:	bf18      	it	ne
 8003910:	2301      	movne	r3, #1
 8003912:	e7e6      	b.n	80038e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	699c      	ldr	r4, [r3, #24]
 8003918:	ea26 0404 	bic.w	r4, r6, r4
 800391c:	b2a4      	uxth	r4, r4
 800391e:	3c00      	subs	r4, #0
 8003920:	bf18      	it	ne
 8003922:	2401      	movne	r4, #1
 8003924:	b1a4      	cbz	r4, 8003950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800392e:	d1ae      	bne.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003930:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003934:	d1c2      	bne.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003936:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800393a:	2f01      	cmp	r7, #1
 800393c:	d1ea      	bne.n	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 800393e:	682b      	ldr	r3, [r5, #0]
 8003940:	695c      	ldr	r4, [r3, #20]
 8003942:	ea26 0404 	bic.w	r4, r6, r4
 8003946:	b2a4      	uxth	r4, r4
 8003948:	3c00      	subs	r4, #0
 800394a:	bf18      	it	ne
 800394c:	2401      	movne	r4, #1
 800394e:	e7e9      	b.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8003950:	2000      	movs	r0, #0
}
 8003952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003956 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003956:	b570      	push	{r4, r5, r6, lr}
 8003958:	4604      	mov	r4, r0
 800395a:	460d      	mov	r5, r1
 800395c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003966:	d121      	bne.n	80039ac <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff ff1b 	bl	80037a4 <I2C_IsAcknowledgeFailed>
 800396e:	b9f8      	cbnz	r0, 80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003970:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003974:	d0f3      	beq.n	800395e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7ff f98d 	bl	8002c94 <HAL_GetTick>
 800397a:	1b80      	subs	r0, r0, r6
 800397c:	42a8      	cmp	r0, r5
 800397e:	d801      	bhi.n	8003984 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003980:	2d00      	cmp	r5, #0
 8003982:	d1ec      	bne.n	800395e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800398c:	d1e7      	bne.n	800395e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800398e:	2300      	movs	r3, #0
 8003990:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003992:	2220      	movs	r2, #32
 8003994:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003998:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800399e:	f042 0220 	orr.w	r2, r2, #32
 80039a2:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80039a4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80039a8:	2001      	movs	r0, #1
 80039aa:	e000      	b.n	80039ae <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80039ac:	2000      	movs	r0, #0
}
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80039b0:	2001      	movs	r0, #1
 80039b2:	e7fc      	b.n	80039ae <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080039b4 <I2C_RequestMemoryWrite>:
{
 80039b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039b8:	b085      	sub	sp, #20
 80039ba:	4604      	mov	r4, r0
 80039bc:	460d      	mov	r5, r1
 80039be:	4691      	mov	r9, r2
 80039c0:	461f      	mov	r7, r3
 80039c2:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80039c6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c8:	6803      	ldr	r3, [r0, #0]
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80039d0:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d2:	9600      	str	r6, [sp, #0]
 80039d4:	4643      	mov	r3, r8
 80039d6:	2200      	movs	r2, #0
 80039d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039dc:	f7ff fefb 	bl	80037d6 <I2C_WaitOnFlagUntilTimeout>
 80039e0:	b960      	cbnz	r0, 80039fc <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80039e8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ea:	4633      	mov	r3, r6
 80039ec:	4642      	mov	r2, r8
 80039ee:	4926      	ldr	r1, [pc, #152]	@ (8003a88 <I2C_RequestMemoryWrite+0xd4>)
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7ff ff45 	bl	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f6:	b168      	cbz	r0, 8003a14 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80039f8:	2001      	movs	r0, #1
 80039fa:	e008      	b.n	8003a0e <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003a04:	d002      	beq.n	8003a0c <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a0a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8003a0c:	2003      	movs	r0, #3
}
 8003a0e:	b005      	add	sp, #20
 8003a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a14:	2300      	movs	r3, #0
 8003a16:	9303      	str	r3, [sp, #12]
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	9203      	str	r2, [sp, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	9303      	str	r3, [sp, #12]
 8003a22:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a24:	4632      	mov	r2, r6
 8003a26:	4641      	mov	r1, r8
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f7ff ff94 	bl	8003956 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a2e:	b930      	cbnz	r0, 8003a3e <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a30:	2f01      	cmp	r7, #1
 8003a32:	d10f      	bne.n	8003a54 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	fa5f f689 	uxtb.w	r6, r9
 8003a3a:	611e      	str	r6, [r3, #16]
 8003a3c:	e7e7      	b.n	8003a0e <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d001      	beq.n	8003a48 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8003a44:	2001      	movs	r0, #1
 8003a46:	e7e2      	b.n	8003a0e <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e7f7      	b.n	8003a44 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8003a5a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5c:	4632      	mov	r2, r6
 8003a5e:	4641      	mov	r1, r8
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7ff ff78 	bl	8003956 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a66:	b920      	cbnz	r0, 8003a72 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	fa5f f689 	uxtb.w	r6, r9
 8003a6e:	611e      	str	r6, [r3, #16]
 8003a70:	e7cd      	b.n	8003a0e <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d001      	beq.n	8003a7c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8003a78:	2001      	movs	r0, #1
 8003a7a:	e7c8      	b.n	8003a0e <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e7f7      	b.n	8003a78 <I2C_RequestMemoryWrite+0xc4>
 8003a88:	00010002 	.word	0x00010002

08003a8c <I2C_RequestMemoryRead>:
{
 8003a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	4604      	mov	r4, r0
 8003a94:	460d      	mov	r5, r1
 8003a96:	4616      	mov	r6, r2
 8003a98:	4699      	mov	r9, r3
 8003a9a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8003a9c:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa0:	6802      	ldr	r2, [r0, #0]
 8003aa2:	6813      	ldr	r3, [r2, #0]
 8003aa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aa8:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aaa:	6803      	ldr	r3, [r0, #0]
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8003ab2:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab4:	f8cd 8000 	str.w	r8, [sp]
 8003ab8:	463b      	mov	r3, r7
 8003aba:	2200      	movs	r2, #0
 8003abc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ac0:	f7ff fe89 	bl	80037d6 <I2C_WaitOnFlagUntilTimeout>
 8003ac4:	b970      	cbnz	r0, 8003ae4 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ac6:	fa5f fa85 	uxtb.w	sl, r5
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8003ad0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ad2:	4643      	mov	r3, r8
 8003ad4:	463a      	mov	r2, r7
 8003ad6:	4941      	ldr	r1, [pc, #260]	@ (8003bdc <I2C_RequestMemoryRead+0x150>)
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7ff fed1 	bl	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ade:	b168      	cbz	r0, 8003afc <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	e008      	b.n	8003af6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003aec:	d002      	beq.n	8003af4 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003af2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8003af4:	2003      	movs	r0, #3
}
 8003af6:	b004      	add	sp, #16
 8003af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afc:	2300      	movs	r3, #0
 8003afe:	9303      	str	r3, [sp, #12]
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	9203      	str	r2, [sp, #12]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	9303      	str	r3, [sp, #12]
 8003b0a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	4639      	mov	r1, r7
 8003b10:	4620      	mov	r0, r4
 8003b12:	f7ff ff20 	bl	8003956 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b16:	b980      	cbnz	r0, 8003b3a <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b18:	f1b9 0f01 	cmp.w	r9, #1
 8003b1c:	d118      	bne.n	8003b50 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	b2f6      	uxtb	r6, r6
 8003b22:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b24:	4642      	mov	r2, r8
 8003b26:	4639      	mov	r1, r7
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff ff14 	bl	8003956 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b2e:	b368      	cbz	r0, 8003b8c <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d024      	beq.n	8003b80 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8003b36:	2001      	movs	r0, #1
 8003b38:	e7dd      	b.n	8003af6 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d001      	beq.n	8003b44 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
 8003b42:	e7d8      	b.n	8003af6 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e7f7      	b.n	8003b40 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	0a32      	lsrs	r2, r6, #8
 8003b54:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b56:	4642      	mov	r2, r8
 8003b58:	4639      	mov	r1, r7
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff fefb 	bl	8003956 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b60:	b918      	cbnz	r0, 8003b6a <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	b2f6      	uxtb	r6, r6
 8003b66:	611e      	str	r6, [r3, #16]
 8003b68:	e7dc      	b.n	8003b24 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d001      	beq.n	8003b74 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8003b70:	2001      	movs	r0, #1
 8003b72:	e7c0      	b.n	8003af6 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e7f7      	b.n	8003b70 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	6813      	ldr	r3, [r2, #0]
 8003b84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e7d4      	b.n	8003b36 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	6813      	ldr	r3, [r2, #0]
 8003b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b94:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b96:	f8cd 8000 	str.w	r8, [sp]
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f7ff fe17 	bl	80037d6 <I2C_WaitOnFlagUntilTimeout>
 8003ba8:	b968      	cbnz	r0, 8003bc6 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	f04a 0301 	orr.w	r3, sl, #1
 8003bb0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb2:	4643      	mov	r3, r8
 8003bb4:	463a      	mov	r2, r7
 8003bb6:	4909      	ldr	r1, [pc, #36]	@ (8003bdc <I2C_RequestMemoryRead+0x150>)
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f7ff fe61 	bl	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d099      	beq.n	8003af6 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	e797      	b.n	8003af6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003bce:	d002      	beq.n	8003bd6 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bd4:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8003bd6:	2003      	movs	r0, #3
 8003bd8:	e78d      	b.n	8003af6 <I2C_RequestMemoryRead+0x6a>
 8003bda:	bf00      	nop
 8003bdc:	00010002 	.word	0x00010002

08003be0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	4604      	mov	r4, r0
 8003be4:	460d      	mov	r5, r1
 8003be6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f013 0f04 	tst.w	r3, #4
 8003bf0:	d121      	bne.n	8003c36 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff fdd6 	bl	80037a4 <I2C_IsAcknowledgeFailed>
 8003bf8:	b9f8      	cbnz	r0, 8003c3a <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003bfe:	d0f3      	beq.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c00:	f7ff f848 	bl	8002c94 <HAL_GetTick>
 8003c04:	1b80      	subs	r0, r0, r6
 8003c06:	42a8      	cmp	r0, r5
 8003c08:	d801      	bhi.n	8003c0e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	d1ec      	bne.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f013 0f04 	tst.w	r3, #4
 8003c16:	d1e7      	bne.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c22:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c26:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c28:	f042 0220 	orr.w	r2, r2, #32
 8003c2c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003c2e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8003c32:	2001      	movs	r0, #1
 8003c34:	e000      	b.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8003c36:	2000      	movs	r0, #0
}
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	e7fc      	b.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003c3e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003c3e:	b570      	push	{r4, r5, r6, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	460d      	mov	r5, r1
 8003c44:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c46:	e014      	b.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c48:	f06f 0210 	mvn.w	r2, #16
 8003c4c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c52:	2220      	movs	r2, #32
 8003c54:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c58:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c5c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c5e:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8003c60:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8003c64:	2001      	movs	r0, #1
 8003c66:	e025      	b.n	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003c70:	d010      	beq.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	6958      	ldr	r0, [r3, #20]
 8003c76:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003c7a:	d11a      	bne.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c7c:	6958      	ldr	r0, [r3, #20]
 8003c7e:	f010 0f10 	tst.w	r0, #16
 8003c82:	d1e1      	bne.n	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7ff f806 	bl	8002c94 <HAL_GetTick>
 8003c88:	1b80      	subs	r0, r0, r6
 8003c8a:	42a8      	cmp	r0, r5
 8003c8c:	d8ec      	bhi.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	d1ef      	bne.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8003c92:	e7e9      	b.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003ca4:	f042 0220 	orr.w	r2, r2, #32
 8003ca8:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003caa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8003cae:	2001      	movs	r0, #1
 8003cb0:	e000      	b.n	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 8003cb2:	2000      	movs	r0, #0
}
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	f000 80cc 	beq.w	8003e56 <HAL_I2C_Init+0x19e>
{
 8003cbe:	b570      	push	{r4, r5, r6, lr}
 8003cc0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cc2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d077      	beq.n	8003dba <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cca:	2324      	movs	r3, #36	@ 0x24
 8003ccc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003cd0:	6822      	ldr	r2, [r4, #0]
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	6813      	ldr	r3, [r2, #0]
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cec:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cee:	f000 fe25 	bl	800493c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cf2:	6862      	ldr	r2, [r4, #4]
 8003cf4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e60 <HAL_I2C_Init+0x1a8>)
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d864      	bhi.n	8003dc4 <HAL_I2C_Init+0x10c>
 8003cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8003e64 <HAL_I2C_Init+0x1ac>)
 8003cfc:	4298      	cmp	r0, r3
 8003cfe:	bf8c      	ite	hi
 8003d00:	2300      	movhi	r3, #0
 8003d02:	2301      	movls	r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 80a8 	bne.w	8003e5a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8003d0a:	4957      	ldr	r1, [pc, #348]	@ (8003e68 <HAL_I2C_Init+0x1b0>)
 8003d0c:	fba1 3100 	umull	r3, r1, r1, r0
 8003d10:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d12:	6825      	ldr	r5, [r4, #0]
 8003d14:	686a      	ldr	r2, [r5, #4]
 8003d16:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003d1a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8003d1e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d20:	6821      	ldr	r1, [r4, #0]
 8003d22:	6a0a      	ldr	r2, [r1, #32]
 8003d24:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003d28:	6866      	ldr	r6, [r4, #4]
 8003d2a:	4d4d      	ldr	r5, [pc, #308]	@ (8003e60 <HAL_I2C_Init+0x1a8>)
 8003d2c:	42ae      	cmp	r6, r5
 8003d2e:	d84f      	bhi.n	8003dd0 <HAL_I2C_Init+0x118>
 8003d30:	3301      	adds	r3, #1
 8003d32:	4313      	orrs	r3, r2
 8003d34:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d36:	6821      	ldr	r1, [r4, #0]
 8003d38:	69ca      	ldr	r2, [r1, #28]
 8003d3a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8003d3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d42:	6865      	ldr	r5, [r4, #4]
 8003d44:	4b46      	ldr	r3, [pc, #280]	@ (8003e60 <HAL_I2C_Init+0x1a8>)
 8003d46:	429d      	cmp	r5, r3
 8003d48:	d84c      	bhi.n	8003de4 <HAL_I2C_Init+0x12c>
 8003d4a:	1e43      	subs	r3, r0, #1
 8003d4c:	006d      	lsls	r5, r5, #1
 8003d4e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003d52:	3301      	adds	r3, #1
 8003d54:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8003d58:	4203      	tst	r3, r0
 8003d5a:	d078      	beq.n	8003e4e <HAL_I2C_Init+0x196>
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	431a      	orrs	r2, r3
 8003d62:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d64:	6821      	ldr	r1, [r4, #0]
 8003d66:	680b      	ldr	r3, [r1, #0]
 8003d68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003d6c:	69e2      	ldr	r2, [r4, #28]
 8003d6e:	6a20      	ldr	r0, [r4, #32]
 8003d70:	4302      	orrs	r2, r0
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d76:	6821      	ldr	r1, [r4, #0]
 8003d78:	688b      	ldr	r3, [r1, #8]
 8003d7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d82:	6922      	ldr	r2, [r4, #16]
 8003d84:	68e0      	ldr	r0, [r4, #12]
 8003d86:	4302      	orrs	r2, r0
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d8c:	6821      	ldr	r1, [r4, #0]
 8003d8e:	68cb      	ldr	r3, [r1, #12]
 8003d90:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d94:	6962      	ldr	r2, [r4, #20]
 8003d96:	69a0      	ldr	r0, [r4, #24]
 8003d98:	4302      	orrs	r2, r0
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	6813      	ldr	r3, [r2, #0]
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da8:	2000      	movs	r0, #0
 8003daa:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	2320      	movs	r3, #32
 8003dae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003dba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8003dbe:	f7fe fd27 	bl	8002810 <HAL_I2C_MspInit>
 8003dc2:	e782      	b.n	8003cca <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dc4:	4b29      	ldr	r3, [pc, #164]	@ (8003e6c <HAL_I2C_Init+0x1b4>)
 8003dc6:	4298      	cmp	r0, r3
 8003dc8:	bf8c      	ite	hi
 8003dca:	2300      	movhi	r3, #0
 8003dcc:	2301      	movls	r3, #1
 8003dce:	e799      	b.n	8003d04 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dd0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8003dd4:	fb05 f303 	mul.w	r3, r5, r3
 8003dd8:	4d25      	ldr	r5, [pc, #148]	@ (8003e70 <HAL_I2C_Init+0x1b8>)
 8003dda:	fba5 5303 	umull	r5, r3, r5, r3
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	3301      	adds	r3, #1
 8003de2:	e7a6      	b.n	8003d32 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003de4:	68a6      	ldr	r6, [r4, #8]
 8003de6:	b9be      	cbnz	r6, 8003e18 <HAL_I2C_Init+0x160>
 8003de8:	1e43      	subs	r3, r0, #1
 8003dea:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8003dee:	fbb3 f3fc 	udiv	r3, r3, ip
 8003df2:	3301      	adds	r3, #1
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	fab3 f383 	clz	r3, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	bb43      	cbnz	r3, 8003e52 <HAL_I2C_Init+0x19a>
 8003e00:	b9c6      	cbnz	r6, 8003e34 <HAL_I2C_Init+0x17c>
 8003e02:	1e43      	subs	r3, r0, #1
 8003e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e08:	fbb3 f3f5 	udiv	r3, r3, r5
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e16:	e7a3      	b.n	8003d60 <HAL_I2C_Init+0xa8>
 8003e18:	1e43      	subs	r3, r0, #1
 8003e1a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8003e1e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003e22:	fbb3 f3fc 	udiv	r3, r3, ip
 8003e26:	3301      	adds	r3, #1
 8003e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	e7e4      	b.n	8003dfe <HAL_I2C_Init+0x146>
 8003e34:	1e43      	subs	r3, r0, #1
 8003e36:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003e3a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003e3e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e4c:	e788      	b.n	8003d60 <HAL_I2C_Init+0xa8>
 8003e4e:	2304      	movs	r3, #4
 8003e50:	e786      	b.n	8003d60 <HAL_I2C_Init+0xa8>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e784      	b.n	8003d60 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8003e56:	2001      	movs	r0, #1
}
 8003e58:	4770      	bx	lr
    return HAL_ERROR;
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	e7ac      	b.n	8003db8 <HAL_I2C_Init+0x100>
 8003e5e:	bf00      	nop
 8003e60:	000186a0 	.word	0x000186a0
 8003e64:	001e847f 	.word	0x001e847f
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	003d08ff 	.word	0x003d08ff
 8003e70:	10624dd3 	.word	0x10624dd3

08003e74 <HAL_I2C_Mem_Write>:
{
 8003e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	460f      	mov	r7, r1
 8003e7e:	4690      	mov	r8, r2
 8003e80:	4699      	mov	r9, r3
 8003e82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8003e84:	f7fe ff06 	bl	8002c94 <HAL_GetTick>
 8003e88:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8003e8e:	b2c0      	uxtb	r0, r0
 8003e90:	2820      	cmp	r0, #32
 8003e92:	d003      	beq.n	8003e9c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8003e94:	2002      	movs	r0, #2
}
 8003e96:	b003      	add	sp, #12
 8003e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9c:	9500      	str	r5, [sp, #0]
 8003e9e:	2319      	movs	r3, #25
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	494b      	ldr	r1, [pc, #300]	@ (8003fd0 <HAL_I2C_Mem_Write+0x15c>)
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f7ff fc96 	bl	80037d6 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	f040 8089 	bne.w	8003fc2 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8003eb0:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	f000 8086 	beq.w	8003fc6 <HAL_I2C_Mem_Write+0x152>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	f012 0f01 	tst.w	r2, #1
 8003ec8:	d103      	bne.n	8003ed2 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ed2:	6822      	ldr	r2, [r4, #0]
 8003ed4:	6813      	ldr	r3, [r2, #0]
 8003ed6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eda:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003edc:	2321      	movs	r3, #33	@ 0x21
 8003ede:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee2:	2340      	movs	r3, #64	@ 0x40
 8003ee4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8003eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003eee:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ef0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8003ef4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ef6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ef8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003efa:	4b36      	ldr	r3, [pc, #216]	@ (8003fd4 <HAL_I2C_Mem_Write+0x160>)
 8003efc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003efe:	9501      	str	r5, [sp, #4]
 8003f00:	9600      	str	r6, [sp, #0]
 8003f02:	464b      	mov	r3, r9
 8003f04:	4642      	mov	r2, r8
 8003f06:	4639      	mov	r1, r7
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff fd53 	bl	80039b4 <I2C_RequestMemoryWrite>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d15b      	bne.n	8003fca <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8003f12:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d035      	beq.n	8003f84 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f18:	462a      	mov	r2, r5
 8003f1a:	4631      	mov	r1, r6
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7ff fd1a 	bl	8003956 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f22:	bb20      	cbnz	r0, 8003f6e <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f24:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	7812      	ldrb	r2, [r2, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f2c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003f2e:	1c53      	adds	r3, r2, #1
 8003f30:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003f32:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8003f34:	3901      	subs	r1, #1
 8003f36:	b289      	uxth	r1, r1
 8003f38:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003f3a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	6958      	ldr	r0, [r3, #20]
 8003f48:	f010 0f04 	tst.w	r0, #4
 8003f4c:	d0e1      	beq.n	8003f12 <HAL_I2C_Mem_Write+0x9e>
 8003f4e:	2900      	cmp	r1, #0
 8003f50:	d0df      	beq.n	8003f12 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f52:	7852      	ldrb	r2, [r2, #1]
 8003f54:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f58:	3301      	adds	r3, #1
 8003f5a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8003f5c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003f62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003f6c:	e7d1      	b.n	8003f12 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8003f74:	2001      	movs	r0, #1
 8003f76:	e78e      	b.n	8003e96 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	6822      	ldr	r2, [r4, #0]
 8003f7a:	6813      	ldr	r3, [r2, #0]
 8003f7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e7f7      	b.n	8003f74 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f84:	462a      	mov	r2, r5
 8003f86:	4631      	mov	r1, r6
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7ff fe29 	bl	8003be0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f8e:	b150      	cbz	r0, 8003fa6 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d001      	beq.n	8003f9a <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8003f96:	2001      	movs	r0, #1
 8003f98:	e77d      	b.n	8003e96 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	6813      	ldr	r3, [r2, #0]
 8003f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e7f7      	b.n	8003f96 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	6813      	ldr	r3, [r2, #0]
 8003faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fae:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8003fbc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8003fc0:	e769      	b.n	8003e96 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8003fc2:	2002      	movs	r0, #2
 8003fc4:	e767      	b.n	8003e96 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	e765      	b.n	8003e96 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8003fca:	2001      	movs	r0, #1
 8003fcc:	e763      	b.n	8003e96 <HAL_I2C_Mem_Write+0x22>
 8003fce:	bf00      	nop
 8003fd0:	00100002 	.word	0x00100002
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <HAL_I2C_Mem_Read>:
{
 8003fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fdc:	b089      	sub	sp, #36	@ 0x24
 8003fde:	4604      	mov	r4, r0
 8003fe0:	460f      	mov	r7, r1
 8003fe2:	4690      	mov	r8, r2
 8003fe4:	4699      	mov	r9, r3
 8003fe6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
  __IO uint32_t count = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7fe fe52 	bl	8002c94 <HAL_GetTick>
 8003ff0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff2:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8003ff6:	b2c0      	uxtb	r0, r0
 8003ff8:	2820      	cmp	r0, #32
 8003ffa:	d004      	beq.n	8004006 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8003ffc:	2702      	movs	r7, #2
}
 8003ffe:	4638      	mov	r0, r7
 8004000:	b009      	add	sp, #36	@ 0x24
 8004002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004006:	9500      	str	r5, [sp, #0]
 8004008:	2319      	movs	r3, #25
 800400a:	2201      	movs	r2, #1
 800400c:	4981      	ldr	r1, [pc, #516]	@ (8004214 <HAL_I2C_Mem_Read+0x23c>)
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff fbe1 	bl	80037d6 <I2C_WaitOnFlagUntilTimeout>
 8004014:	2800      	cmp	r0, #0
 8004016:	f040 817c 	bne.w	8004312 <HAL_I2C_Mem_Read+0x33a>
    __HAL_LOCK(hi2c);
 800401a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800401e:	2b01      	cmp	r3, #1
 8004020:	f000 8179 	beq.w	8004316 <HAL_I2C_Mem_Read+0x33e>
 8004024:	2301      	movs	r3, #1
 8004026:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	f012 0f01 	tst.w	r2, #1
 8004032:	d103      	bne.n	800403c <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403c:	6822      	ldr	r2, [r4, #0]
 800403e:	6813      	ldr	r3, [r2, #0]
 8004040:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004044:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004046:	2322      	movs	r3, #34	@ 0x22
 8004048:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800404c:	2340      	movs	r3, #64	@ 0x40
 800404e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004052:	2300      	movs	r3, #0
 8004054:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8004056:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004058:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800405a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800405e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004060:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004062:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004064:	4b6c      	ldr	r3, [pc, #432]	@ (8004218 <HAL_I2C_Mem_Read+0x240>)
 8004066:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004068:	9501      	str	r5, [sp, #4]
 800406a:	9600      	str	r6, [sp, #0]
 800406c:	464b      	mov	r3, r9
 800406e:	4642      	mov	r2, r8
 8004070:	4639      	mov	r1, r7
 8004072:	4620      	mov	r0, r4
 8004074:	f7ff fd0a 	bl	8003a8c <I2C_RequestMemoryRead>
 8004078:	4607      	mov	r7, r0
 800407a:	2800      	cmp	r0, #0
 800407c:	f040 814d 	bne.w	800431a <HAL_I2C_Mem_Read+0x342>
    if (hi2c->XferSize == 0U)
 8004080:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004082:	b95b      	cbnz	r3, 800409c <HAL_I2C_Mem_Read+0xc4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004084:	9303      	str	r3, [sp, #12]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	9203      	str	r2, [sp, #12]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	9203      	str	r2, [sp, #12]
 8004090:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e0f2      	b.n	8004282 <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 800409c:	2b01      	cmp	r3, #1
 800409e:	d00f      	beq.n	80040c0 <HAL_I2C_Mem_Read+0xe8>
    else if (hi2c->XferSize == 2U)
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d021      	beq.n	80040e8 <HAL_I2C_Mem_Read+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a4:	6822      	ldr	r2, [r4, #0]
 80040a6:	6813      	ldr	r3, [r2, #0]
 80040a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ac:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	9306      	str	r3, [sp, #24]
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	9206      	str	r2, [sp, #24]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	9306      	str	r3, [sp, #24]
 80040bc:	9b06      	ldr	r3, [sp, #24]
 80040be:	e0e0      	b.n	8004282 <HAL_I2C_Mem_Read+0x2aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c0:	6822      	ldr	r2, [r4, #0]
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	9204      	str	r2, [sp, #16]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	9204      	str	r2, [sp, #16]
 80040da:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040e4:	b662      	cpsie	i
}
 80040e6:	e0cc      	b.n	8004282 <HAL_I2C_Mem_Read+0x2aa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f4:	2300      	movs	r3, #0
 80040f6:	9305      	str	r3, [sp, #20]
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	9205      	str	r2, [sp, #20]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	9205      	str	r2, [sp, #20]
 8004102:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800410c:	b662      	cpsie	i
}
 800410e:	e0b8      	b.n	8004282 <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004110:	462a      	mov	r2, r5
 8004112:	4631      	mov	r1, r6
 8004114:	4620      	mov	r0, r4
 8004116:	f7ff fd92 	bl	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout>
 800411a:	2800      	cmp	r0, #0
 800411c:	f040 80ff 	bne.w	800431e <HAL_I2C_Mem_Read+0x346>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004126:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004128:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800412a:	3301      	adds	r3, #1
 800412c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800412e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004134:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29b      	uxth	r3, r3
 800413c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800413e:	e0a0      	b.n	8004282 <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004140:	9500      	str	r5, [sp, #0]
 8004142:	4633      	mov	r3, r6
 8004144:	2200      	movs	r2, #0
 8004146:	4935      	ldr	r1, [pc, #212]	@ (800421c <HAL_I2C_Mem_Read+0x244>)
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff fb44 	bl	80037d6 <I2C_WaitOnFlagUntilTimeout>
 800414e:	2800      	cmp	r0, #0
 8004150:	f040 80e9 	bne.w	8004326 <HAL_I2C_Mem_Read+0x34e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800415c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800415e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004166:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004168:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800416a:	3301      	adds	r3, #1
 800416c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800416e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004170:	3b01      	subs	r3, #1
 8004172:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004174:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800417e:	4b28      	ldr	r3, [pc, #160]	@ (8004220 <HAL_I2C_Mem_Read+0x248>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	08db      	lsrs	r3, r3, #3
 8004184:	4a27      	ldr	r2, [pc, #156]	@ (8004224 <HAL_I2C_Mem_Read+0x24c>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004190:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004194:	9307      	str	r3, [sp, #28]
            count--;
 8004196:	9b07      	ldr	r3, [sp, #28]
 8004198:	3b01      	subs	r3, #1
 800419a:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 800419c:	9b07      	ldr	r3, [sp, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d028      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x21c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	f012 0f04 	tst.w	r2, #4
 80041aa:	d0f4      	beq.n	8004196 <HAL_I2C_Mem_Read+0x1be>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041ba:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041be:	3301      	adds	r3, #1
 80041c0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80041c2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80041c8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041d2:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041de:	3301      	adds	r3, #1
 80041e0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80041e2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80041e8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80041f2:	e046      	b.n	8004282 <HAL_I2C_Mem_Read+0x2aa>
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041f6:	2220      	movs	r2, #32
 80041f8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004200:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004202:	f042 0220 	orr.w	r2, r2, #32
 8004206:	6422      	str	r2, [r4, #64]	@ 0x40
 8004208:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800420a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 800420e:	2701      	movs	r7, #1
 8004210:	e6f5      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
 8004212:	bf00      	nop
 8004214:	00100002 	.word	0x00100002
 8004218:	ffff0000 	.word	0xffff0000
 800421c:	00010004 	.word	0x00010004
 8004220:	2000000c 	.word	0x2000000c
 8004224:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004228:	462a      	mov	r2, r5
 800422a:	4631      	mov	r1, r6
 800422c:	4620      	mov	r0, r4
 800422e:	f7ff fd06 	bl	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004232:	2800      	cmp	r0, #0
 8004234:	d179      	bne.n	800432a <HAL_I2C_Mem_Read+0x352>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800423c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800423e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004240:	3301      	adds	r3, #1
 8004242:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8004244:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8004246:	3a01      	subs	r2, #1
 8004248:	b292      	uxth	r2, r2
 800424a:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800424c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	6959      	ldr	r1, [r3, #20]
 800425a:	f011 0f04 	tst.w	r1, #4
 800425e:	d010      	beq.n	8004282 <HAL_I2C_Mem_Read+0x2aa>
          if (hi2c->XferSize == 3U)
 8004260:	2a03      	cmp	r2, #3
 8004262:	d048      	beq.n	80042f6 <HAL_I2C_Mem_Read+0x31e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800426a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800426c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800426e:	3301      	adds	r3, #1
 8004270:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004272:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004278:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29b      	uxth	r3, r3
 8004280:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004282:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d03b      	beq.n	8004300 <HAL_I2C_Mem_Read+0x328>
      if (hi2c->XferSize <= 3U)
 8004288:	2b03      	cmp	r3, #3
 800428a:	d8cd      	bhi.n	8004228 <HAL_I2C_Mem_Read+0x250>
        if (hi2c->XferSize == 1U)
 800428c:	2b01      	cmp	r3, #1
 800428e:	f43f af3f 	beq.w	8004110 <HAL_I2C_Mem_Read+0x138>
        else if (hi2c->XferSize == 2U)
 8004292:	2b02      	cmp	r3, #2
 8004294:	f47f af54 	bne.w	8004140 <HAL_I2C_Mem_Read+0x168>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004298:	9500      	str	r5, [sp, #0]
 800429a:	4633      	mov	r3, r6
 800429c:	2200      	movs	r2, #0
 800429e:	4924      	ldr	r1, [pc, #144]	@ (8004330 <HAL_I2C_Mem_Read+0x358>)
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff fa98 	bl	80037d6 <I2C_WaitOnFlagUntilTimeout>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d13b      	bne.n	8004322 <HAL_I2C_Mem_Read+0x34a>
  __ASM volatile ("cpsid i" : : : "memory");
 80042aa:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	6822      	ldr	r2, [r4, #0]
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042b4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042bc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80042be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042c0:	3301      	adds	r3, #1
 80042c2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80042c4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80042ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042d4:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042dc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80042de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042e0:	3301      	adds	r3, #1
 80042e2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80042e4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80042ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80042f4:	e7c5      	b.n	8004282 <HAL_I2C_Mem_Read+0x2aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e7b1      	b.n	8004264 <HAL_I2C_Mem_Read+0x28c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004300:	2320      	movs	r3, #32
 8004302:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004306:	2300      	movs	r3, #0
 8004308:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 800430c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8004310:	e675      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 8004312:	2702      	movs	r7, #2
 8004314:	e673      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8004316:	2702      	movs	r7, #2
 8004318:	e671      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 800431a:	2701      	movs	r7, #1
 800431c:	e66f      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 800431e:	2701      	movs	r7, #1
 8004320:	e66d      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004322:	2701      	movs	r7, #1
 8004324:	e66b      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004326:	2701      	movs	r7, #1
 8004328:	e669      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 800432a:	2701      	movs	r7, #1
 800432c:	e667      	b.n	8003ffe <HAL_I2C_Mem_Read+0x26>
 800432e:	bf00      	nop
 8004330:	00010004 	.word	0x00010004

08004334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004334:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004336:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <RCC_Delay+0x24>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a08      	ldr	r2, [pc, #32]	@ (800435c <RCC_Delay+0x28>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	0a5b      	lsrs	r3, r3, #9
 8004342:	fb00 f303 	mul.w	r3, r0, r3
 8004346:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004348:	bf00      	nop
  }
  while (Delay --);
 800434a:	9b01      	ldr	r3, [sp, #4]
 800434c:	1e5a      	subs	r2, r3, #1
 800434e:	9201      	str	r2, [sp, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f9      	bne.n	8004348 <RCC_Delay+0x14>
}
 8004354:	b002      	add	sp, #8
 8004356:	4770      	bx	lr
 8004358:	2000000c 	.word	0x2000000c
 800435c:	10624dd3 	.word	0x10624dd3

08004360 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004360:	2800      	cmp	r0, #0
 8004362:	f000 81f1 	beq.w	8004748 <HAL_RCC_OscConfig+0x3e8>
{
 8004366:	b570      	push	{r4, r5, r6, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436c:	6803      	ldr	r3, [r0, #0]
 800436e:	f013 0f01 	tst.w	r3, #1
 8004372:	d02c      	beq.n	80043ce <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004374:	4b99      	ldr	r3, [pc, #612]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b04      	cmp	r3, #4
 800437e:	d01d      	beq.n	80043bc <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004380:	4b96      	ldr	r3, [pc, #600]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b08      	cmp	r3, #8
 800438a:	d012      	beq.n	80043b2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438c:	6863      	ldr	r3, [r4, #4]
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004392:	d041      	beq.n	8004418 <HAL_RCC_OscConfig+0xb8>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d155      	bne.n	8004444 <HAL_RCC_OscConfig+0xe4>
 8004398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800439c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e037      	b.n	8004422 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043b2:	4b8a      	ldr	r3, [pc, #552]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80043ba:	d0e7      	beq.n	800438c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	4b87      	ldr	r3, [pc, #540]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80043c4:	d003      	beq.n	80043ce <HAL_RCC_OscConfig+0x6e>
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 81bf 	beq.w	800474c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	f013 0f02 	tst.w	r3, #2
 80043d4:	d075      	beq.n	80044c2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043d6:	4b81      	ldr	r3, [pc, #516]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f013 0f0c 	tst.w	r3, #12
 80043de:	d05f      	beq.n	80044a0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043e0:	4b7e      	ldr	r3, [pc, #504]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d054      	beq.n	8004496 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 808a 	beq.w	8004508 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80043f4:	4b7a      	ldr	r3, [pc, #488]	@ (80045e0 <HAL_RCC_OscConfig+0x280>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043fa:	f7fe fc4b 	bl	8002c94 <HAL_GetTick>
 80043fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	4b76      	ldr	r3, [pc, #472]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f013 0f02 	tst.w	r3, #2
 8004408:	d175      	bne.n	80044f6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440a:	f7fe fc43 	bl	8002c94 <HAL_GetTick>
 800440e:	1b40      	subs	r0, r0, r5
 8004410:	2802      	cmp	r0, #2
 8004412:	d9f5      	bls.n	8004400 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8004414:	2003      	movs	r0, #3
 8004416:	e19e      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004418:	4a70      	ldr	r2, [pc, #448]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 800441a:	6813      	ldr	r3, [r2, #0]
 800441c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	b343      	cbz	r3, 8004478 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8004426:	f7fe fc35 	bl	8002c94 <HAL_GetTick>
 800442a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442c:	4b6b      	ldr	r3, [pc, #428]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004434:	d1cb      	bne.n	80043ce <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004436:	f7fe fc2d 	bl	8002c94 <HAL_GetTick>
 800443a:	1b40      	subs	r0, r0, r5
 800443c:	2864      	cmp	r0, #100	@ 0x64
 800443e:	d9f5      	bls.n	800442c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004440:	2003      	movs	r0, #3
 8004442:	e188      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004448:	d009      	beq.n	800445e <HAL_RCC_OscConfig+0xfe>
 800444a:	4b64      	ldr	r3, [pc, #400]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e7e1      	b.n	8004422 <HAL_RCC_OscConfig+0xc2>
 800445e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004462:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e7d4      	b.n	8004422 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8004478:	f7fe fc0c 	bl	8002c94 <HAL_GetTick>
 800447c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	4b57      	ldr	r3, [pc, #348]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004486:	d0a2      	beq.n	80043ce <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7fe fc04 	bl	8002c94 <HAL_GetTick>
 800448c:	1b40      	subs	r0, r0, r5
 800448e:	2864      	cmp	r0, #100	@ 0x64
 8004490:	d9f5      	bls.n	800447e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8004492:	2003      	movs	r0, #3
 8004494:	e15f      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004496:	4b51      	ldr	r3, [pc, #324]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800449e:	d1a5      	bne.n	80043ec <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a0:	4b4e      	ldr	r3, [pc, #312]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f013 0f02 	tst.w	r3, #2
 80044a8:	d003      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
 80044aa:	6923      	ldr	r3, [r4, #16]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	f040 814f 	bne.w	8004750 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	4a4a      	ldr	r2, [pc, #296]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80044ba:	6961      	ldr	r1, [r4, #20]
 80044bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044c0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f013 0f08 	tst.w	r3, #8
 80044c8:	d033      	beq.n	8004532 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ca:	69a3      	ldr	r3, [r4, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d05c      	beq.n	800458a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80044d0:	4b43      	ldr	r3, [pc, #268]	@ (80045e0 <HAL_RCC_OscConfig+0x280>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80044d8:	f7fe fbdc 	bl	8002c94 <HAL_GetTick>
 80044dc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	4b3f      	ldr	r3, [pc, #252]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	f013 0f02 	tst.w	r3, #2
 80044e6:	d121      	bne.n	800452c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e8:	f7fe fbd4 	bl	8002c94 <HAL_GetTick>
 80044ec:	1b40      	subs	r0, r0, r5
 80044ee:	2802      	cmp	r0, #2
 80044f0:	d9f5      	bls.n	80044de <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80044f2:	2003      	movs	r0, #3
 80044f4:	e12f      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4a39      	ldr	r2, [pc, #228]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044f8:	6813      	ldr	r3, [r2, #0]
 80044fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80044fe:	6961      	ldr	r1, [r4, #20]
 8004500:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e7dc      	b.n	80044c2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8004508:	4b35      	ldr	r3, [pc, #212]	@ (80045e0 <HAL_RCC_OscConfig+0x280>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800450e:	f7fe fbc1 	bl	8002c94 <HAL_GetTick>
 8004512:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004514:	4b31      	ldr	r3, [pc, #196]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f013 0f02 	tst.w	r3, #2
 800451c:	d0d1      	beq.n	80044c2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe fbb9 	bl	8002c94 <HAL_GetTick>
 8004522:	1b40      	subs	r0, r0, r5
 8004524:	2802      	cmp	r0, #2
 8004526:	d9f5      	bls.n	8004514 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8004528:	2003      	movs	r0, #3
 800452a:	e114      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800452c:	2001      	movs	r0, #1
 800452e:	f7ff ff01 	bl	8004334 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	f013 0f04 	tst.w	r3, #4
 8004538:	f000 8096 	beq.w	8004668 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453c:	4b27      	ldr	r3, [pc, #156]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004544:	d134      	bne.n	80045b0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800454e:	61da      	str	r2, [r3, #28]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800455a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	4b21      	ldr	r3, [pc, #132]	@ (80045e4 <HAL_RCC_OscConfig+0x284>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004564:	d026      	beq.n	80045b4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004566:	68e3      	ldr	r3, [r4, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d03d      	beq.n	80045e8 <HAL_RCC_OscConfig+0x288>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d153      	bne.n	8004618 <HAL_RCC_OscConfig+0x2b8>
 8004570:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004574:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	621a      	str	r2, [r3, #32]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	f022 0204 	bic.w	r2, r2, #4
 8004586:	621a      	str	r2, [r3, #32]
 8004588:	e033      	b.n	80045f2 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800458a:	4b15      	ldr	r3, [pc, #84]	@ (80045e0 <HAL_RCC_OscConfig+0x280>)
 800458c:	2200      	movs	r2, #0
 800458e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004592:	f7fe fb7f 	bl	8002c94 <HAL_GetTick>
 8004596:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	f013 0f02 	tst.w	r3, #2
 80045a0:	d0c7      	beq.n	8004532 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a2:	f7fe fb77 	bl	8002c94 <HAL_GetTick>
 80045a6:	1b40      	subs	r0, r0, r5
 80045a8:	2802      	cmp	r0, #2
 80045aa:	d9f5      	bls.n	8004598 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80045ac:	2003      	movs	r0, #3
 80045ae:	e0d2      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80045b0:	2500      	movs	r5, #0
 80045b2:	e7d3      	b.n	800455c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b4:	4a0b      	ldr	r2, [pc, #44]	@ (80045e4 <HAL_RCC_OscConfig+0x284>)
 80045b6:	6813      	ldr	r3, [r2, #0]
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80045be:	f7fe fb69 	bl	8002c94 <HAL_GetTick>
 80045c2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c4:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <HAL_RCC_OscConfig+0x284>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80045cc:	d1cb      	bne.n	8004566 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ce:	f7fe fb61 	bl	8002c94 <HAL_GetTick>
 80045d2:	1b80      	subs	r0, r0, r6
 80045d4:	2864      	cmp	r0, #100	@ 0x64
 80045d6:	d9f5      	bls.n	80045c4 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80045d8:	2003      	movs	r0, #3
 80045da:	e0bc      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	42420000 	.word	0x42420000
 80045e4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 80045ea:	6a13      	ldr	r3, [r2, #32]
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	b333      	cbz	r3, 8004644 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80045f6:	f7fe fb4d 	bl	8002c94 <HAL_GetTick>
 80045fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	4b5a      	ldr	r3, [pc, #360]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f013 0f02 	tst.w	r3, #2
 8004604:	d12f      	bne.n	8004666 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004606:	f7fe fb45 	bl	8002c94 <HAL_GetTick>
 800460a:	1b80      	subs	r0, r0, r6
 800460c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004610:	4298      	cmp	r0, r3
 8004612:	d9f3      	bls.n	80045fc <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8004614:	2003      	movs	r0, #3
 8004616:	e09e      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004618:	2b05      	cmp	r3, #5
 800461a:	d009      	beq.n	8004630 <HAL_RCC_OscConfig+0x2d0>
 800461c:	4b52      	ldr	r3, [pc, #328]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	621a      	str	r2, [r3, #32]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	f022 0204 	bic.w	r2, r2, #4
 800462c:	621a      	str	r2, [r3, #32]
 800462e:	e7e0      	b.n	80045f2 <HAL_RCC_OscConfig+0x292>
 8004630:	4b4d      	ldr	r3, [pc, #308]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	f042 0204 	orr.w	r2, r2, #4
 8004638:	621a      	str	r2, [r3, #32]
 800463a:	6a1a      	ldr	r2, [r3, #32]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	621a      	str	r2, [r3, #32]
 8004642:	e7d6      	b.n	80045f2 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8004644:	f7fe fb26 	bl	8002c94 <HAL_GetTick>
 8004648:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464a:	4b47      	ldr	r3, [pc, #284]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f013 0f02 	tst.w	r3, #2
 8004652:	d008      	beq.n	8004666 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe fb1e 	bl	8002c94 <HAL_GetTick>
 8004658:	1b80      	subs	r0, r0, r6
 800465a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800465e:	4298      	cmp	r0, r3
 8004660:	d9f3      	bls.n	800464a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8004662:	2003      	movs	r0, #3
 8004664:	e077      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8004666:	b9e5      	cbnz	r5, 80046a2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004668:	69e3      	ldr	r3, [r4, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d072      	beq.n	8004754 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466e:	4a3e      	ldr	r2, [pc, #248]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 8004670:	6852      	ldr	r2, [r2, #4]
 8004672:	f002 020c 	and.w	r2, r2, #12
 8004676:	2a08      	cmp	r2, #8
 8004678:	d056      	beq.n	8004728 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800467a:	2b02      	cmp	r3, #2
 800467c:	d017      	beq.n	80046ae <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800467e:	4b3b      	ldr	r3, [pc, #236]	@ (800476c <HAL_RCC_OscConfig+0x40c>)
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004684:	f7fe fb06 	bl	8002c94 <HAL_GetTick>
 8004688:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468a:	4b37      	ldr	r3, [pc, #220]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004692:	d047      	beq.n	8004724 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fe fafe 	bl	8002c94 <HAL_GetTick>
 8004698:	1b00      	subs	r0, r0, r4
 800469a:	2802      	cmp	r0, #2
 800469c:	d9f5      	bls.n	800468a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800469e:	2003      	movs	r0, #3
 80046a0:	e059      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a2:	4a31      	ldr	r2, [pc, #196]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 80046a4:	69d3      	ldr	r3, [r2, #28]
 80046a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	61d3      	str	r3, [r2, #28]
 80046ac:	e7dc      	b.n	8004668 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b2f      	ldr	r3, [pc, #188]	@ (800476c <HAL_RCC_OscConfig+0x40c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80046b4:	f7fe faee 	bl	8002c94 <HAL_GetTick>
 80046b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80046c2:	d006      	beq.n	80046d2 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe fae6 	bl	8002c94 <HAL_GetTick>
 80046c8:	1b40      	subs	r0, r0, r5
 80046ca:	2802      	cmp	r0, #2
 80046cc:	d9f5      	bls.n	80046ba <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80046ce:	2003      	movs	r0, #3
 80046d0:	e041      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046d2:	6a23      	ldr	r3, [r4, #32]
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d8:	d01a      	beq.n	8004710 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046da:	4923      	ldr	r1, [pc, #140]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 80046dc:	684b      	ldr	r3, [r1, #4]
 80046de:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80046e2:	6a22      	ldr	r2, [r4, #32]
 80046e4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80046e6:	4302      	orrs	r2, r0
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80046ec:	4b1f      	ldr	r3, [pc, #124]	@ (800476c <HAL_RCC_OscConfig+0x40c>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80046f2:	f7fe facf 	bl	8002c94 <HAL_GetTick>
 80046f6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004700:	d10e      	bne.n	8004720 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fe fac7 	bl	8002c94 <HAL_GetTick>
 8004706:	1b00      	subs	r0, r0, r4
 8004708:	2802      	cmp	r0, #2
 800470a:	d9f5      	bls.n	80046f8 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800470c:	2003      	movs	r0, #3
 800470e:	e022      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004710:	4a15      	ldr	r2, [pc, #84]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 8004712:	6853      	ldr	r3, [r2, #4]
 8004714:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004718:	68a1      	ldr	r1, [r4, #8]
 800471a:	430b      	orrs	r3, r1
 800471c:	6053      	str	r3, [r2, #4]
 800471e:	e7dc      	b.n	80046da <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8004720:	2000      	movs	r0, #0
 8004722:	e018      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
 8004724:	2000      	movs	r0, #0
 8004726:	e016      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004728:	2b01      	cmp	r3, #1
 800472a:	d016      	beq.n	800475a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800472c:	4b0e      	ldr	r3, [pc, #56]	@ (8004768 <HAL_RCC_OscConfig+0x408>)
 800472e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004730:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8004734:	6a22      	ldr	r2, [r4, #32]
 8004736:	4291      	cmp	r1, r2
 8004738:	d111      	bne.n	800475e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800473a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800473e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004740:	4293      	cmp	r3, r2
 8004742:	d10e      	bne.n	8004762 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8004744:	2000      	movs	r0, #0
 8004746:	e006      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8004748:	2001      	movs	r0, #1
}
 800474a:	4770      	bx	lr
        return HAL_ERROR;
 800474c:	2001      	movs	r0, #1
 800474e:	e002      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8004750:	2001      	movs	r0, #1
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8004754:	2000      	movs	r0, #0
}
 8004756:	b002      	add	sp, #8
 8004758:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800475a:	2001      	movs	r0, #1
 800475c:	e7fb      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800475e:	2001      	movs	r0, #1
 8004760:	e7f9      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
 8004762:	2001      	movs	r0, #1
 8004764:	e7f7      	b.n	8004756 <HAL_RCC_OscConfig+0x3f6>
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	42420000 	.word	0x42420000

08004770 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004770:	4b0f      	ldr	r3, [pc, #60]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x40>)
 8004772:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004774:	f003 020c 	and.w	r2, r3, #12
 8004778:	2a08      	cmp	r2, #8
 800477a:	d001      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 800477c:	480d      	ldr	r0, [pc, #52]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800477e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004780:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004784:	490c      	ldr	r1, [pc, #48]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x48>)
 8004786:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004788:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800478c:	d00b      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x40>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004796:	4a09      	ldr	r2, [pc, #36]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x4c>)
 8004798:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800479a:	4a06      	ldr	r2, [pc, #24]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x44>)
 800479c:	fb02 f000 	mul.w	r0, r2, r0
 80047a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80047a4:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x50>)
 80047a8:	fb03 f000 	mul.w	r0, r3, r0
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	007a1200 	.word	0x007a1200
 80047b8:	08008138 	.word	0x08008138
 80047bc:	08008134 	.word	0x08008134
 80047c0:	003d0900 	.word	0x003d0900

080047c4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f000 80a0 	beq.w	800490a <HAL_RCC_ClockConfig+0x146>
{
 80047ca:	b570      	push	{r4, r5, r6, lr}
 80047cc:	460d      	mov	r5, r1
 80047ce:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b52      	ldr	r3, [pc, #328]	@ (800491c <HAL_RCC_ClockConfig+0x158>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	428b      	cmp	r3, r1
 80047da:	d20b      	bcs.n	80047f4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047dc:	4a4f      	ldr	r2, [pc, #316]	@ (800491c <HAL_RCC_ClockConfig+0x158>)
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	f023 0307 	bic.w	r3, r3, #7
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e8:	6813      	ldr	r3, [r2, #0]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	428b      	cmp	r3, r1
 80047f0:	f040 808d 	bne.w	800490e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	f013 0f02 	tst.w	r3, #2
 80047fa:	d017      	beq.n	800482c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	f013 0f04 	tst.w	r3, #4
 8004800:	d004      	beq.n	800480c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004802:	4a47      	ldr	r2, [pc, #284]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 8004804:	6853      	ldr	r3, [r2, #4]
 8004806:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800480a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	f013 0f08 	tst.w	r3, #8
 8004812:	d004      	beq.n	800481e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004814:	4a42      	ldr	r2, [pc, #264]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 8004816:	6853      	ldr	r3, [r2, #4]
 8004818:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800481c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481e:	4a40      	ldr	r2, [pc, #256]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 8004820:	6853      	ldr	r3, [r2, #4]
 8004822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004826:	68a1      	ldr	r1, [r4, #8]
 8004828:	430b      	orrs	r3, r1
 800482a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	f013 0f01 	tst.w	r3, #1
 8004832:	d031      	beq.n	8004898 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d020      	beq.n	800487c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483a:	2b02      	cmp	r3, #2
 800483c:	d025      	beq.n	800488a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483e:	4a38      	ldr	r2, [pc, #224]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	f012 0f02 	tst.w	r2, #2
 8004846:	d064      	beq.n	8004912 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004848:	4935      	ldr	r1, [pc, #212]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 800484a:	684a      	ldr	r2, [r1, #4]
 800484c:	f022 0203 	bic.w	r2, r2, #3
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004854:	f7fe fa1e 	bl	8002c94 <HAL_GetTick>
 8004858:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b31      	ldr	r3, [pc, #196]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004868:	d016      	beq.n	8004898 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486a:	f7fe fa13 	bl	8002c94 <HAL_GetTick>
 800486e:	1b80      	subs	r0, r0, r6
 8004870:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004874:	4298      	cmp	r0, r3
 8004876:	d9f0      	bls.n	800485a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004878:	2003      	movs	r0, #3
 800487a:	e045      	b.n	8004908 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487c:	4a28      	ldr	r2, [pc, #160]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004884:	d1e0      	bne.n	8004848 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004886:	2001      	movs	r0, #1
 8004888:	e03e      	b.n	8004908 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488a:	4a25      	ldr	r2, [pc, #148]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004892:	d1d9      	bne.n	8004848 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004894:	2001      	movs	r0, #1
 8004896:	e037      	b.n	8004908 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004898:	4b20      	ldr	r3, [pc, #128]	@ (800491c <HAL_RCC_ClockConfig+0x158>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	42ab      	cmp	r3, r5
 80048a2:	d90a      	bls.n	80048ba <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a4:	4a1d      	ldr	r2, [pc, #116]	@ (800491c <HAL_RCC_ClockConfig+0x158>)
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	f023 0307 	bic.w	r3, r3, #7
 80048ac:	432b      	orrs	r3, r5
 80048ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	42ab      	cmp	r3, r5
 80048b8:	d12d      	bne.n	8004916 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f013 0f04 	tst.w	r3, #4
 80048c0:	d006      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c2:	4a17      	ldr	r2, [pc, #92]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 80048c4:	6853      	ldr	r3, [r2, #4]
 80048c6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80048ca:	68e1      	ldr	r1, [r4, #12]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	f013 0f08 	tst.w	r3, #8
 80048d6:	d007      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048d8:	4a11      	ldr	r2, [pc, #68]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 80048da:	6853      	ldr	r3, [r2, #4]
 80048dc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80048e0:	6921      	ldr	r1, [r4, #16]
 80048e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048e6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048e8:	f7ff ff42 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <HAL_RCC_ClockConfig+0x15c>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80048f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004924 <HAL_RCC_ClockConfig+0x160>)
 80048f6:	5cd3      	ldrb	r3, [r2, r3]
 80048f8:	40d8      	lsrs	r0, r3
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_RCC_ClockConfig+0x164>)
 80048fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80048fe:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_ClockConfig+0x168>)
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	f7fe f983 	bl	8002c0c <HAL_InitTick>
  return HAL_OK;
 8004906:	2000      	movs	r0, #0
}
 8004908:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800490a:	2001      	movs	r0, #1
}
 800490c:	4770      	bx	lr
    return HAL_ERROR;
 800490e:	2001      	movs	r0, #1
 8004910:	e7fa      	b.n	8004908 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
 8004914:	e7f8      	b.n	8004908 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004916:	2001      	movs	r0, #1
 8004918:	e7f6      	b.n	8004908 <HAL_RCC_ClockConfig+0x144>
 800491a:	bf00      	nop
 800491c:	40022000 	.word	0x40022000
 8004920:	40021000 	.word	0x40021000
 8004924:	08008124 	.word	0x08008124
 8004928:	2000000c 	.word	0x2000000c
 800492c:	20000014 	.word	0x20000014

08004930 <HAL_RCC_GetHCLKFreq>:
}
 8004930:	4b01      	ldr	r3, [pc, #4]	@ (8004938 <HAL_RCC_GetHCLKFreq+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	2000000c 	.word	0x2000000c

0800493c <HAL_RCC_GetPCLK1Freq>:
{
 800493c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800493e:	f7ff fff7 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 8004942:	4b04      	ldr	r3, [pc, #16]	@ (8004954 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800494a:	4a03      	ldr	r2, [pc, #12]	@ (8004958 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800494c:	5cd3      	ldrb	r3, [r2, r3]
}
 800494e:	40d8      	lsrs	r0, r3
 8004950:	bd08      	pop	{r3, pc}
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	0800811c 	.word	0x0800811c

0800495c <HAL_RCC_GetPCLK2Freq>:
{
 800495c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800495e:	f7ff ffe7 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 8004962:	4b04      	ldr	r3, [pc, #16]	@ (8004974 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800496a:	4a03      	ldr	r2, [pc, #12]	@ (8004978 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800496c:	5cd3      	ldrb	r3, [r2, r3]
}
 800496e:	40d8      	lsrs	r0, r3
 8004970:	bd08      	pop	{r3, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
 8004978:	0800811c 	.word	0x0800811c

0800497c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004982:	6803      	ldr	r3, [r0, #0]
 8004984:	f013 0f01 	tst.w	r3, #1
 8004988:	d036      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800498a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004992:	d149      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004994:	4b3c      	ldr	r3, [pc, #240]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800499c:	61da      	str	r2, [r3, #28]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80049a8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	4b38      	ldr	r3, [pc, #224]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80049b2:	d03b      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049b4:	4b34      	ldr	r3, [pc, #208]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049b8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80049bc:	d013      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80049be:	6862      	ldr	r2, [r4, #4]
 80049c0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d00e      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80049ca:	6a13      	ldr	r3, [r2, #32]
 80049cc:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049d0:	492f      	ldr	r1, [pc, #188]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80049d2:	2601      	movs	r6, #1
 80049d4:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049d8:	2600      	movs	r6, #0
 80049da:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049de:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049e0:	f013 0f01 	tst.w	r3, #1
 80049e4:	d136      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e6:	4a28      	ldr	r2, [pc, #160]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80049e8:	6a13      	ldr	r3, [r2, #32]
 80049ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ee:	6861      	ldr	r1, [r4, #4]
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	d13e      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f013 0f02 	tst.w	r3, #2
 80049fe:	d006      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a00:	4a21      	ldr	r2, [pc, #132]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004a02:	6853      	ldr	r3, [r2, #4]
 8004a04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004a08:	68a1      	ldr	r1, [r4, #8]
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f013 0f10 	tst.w	r3, #16
 8004a14:	d034      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a16:	4a1c      	ldr	r2, [pc, #112]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004a18:	6853      	ldr	r3, [r2, #4]
 8004a1a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	68e1      	ldr	r1, [r4, #12]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a24:	2000      	movs	r0, #0
 8004a26:	e02c      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004a28:	2500      	movs	r5, #0
 8004a2a:	e7be      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2c:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a34:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004a36:	f7fe f92d 	bl	8002c94 <HAL_GetTick>
 8004a3a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3c:	4b13      	ldr	r3, [pc, #76]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004a44:	d1b6      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fe f925 	bl	8002c94 <HAL_GetTick>
 8004a4a:	1b80      	subs	r0, r0, r6
 8004a4c:	2864      	cmp	r0, #100	@ 0x64
 8004a4e:	d9f5      	bls.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004a50:	2003      	movs	r0, #3
 8004a52:	e016      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8004a54:	f7fe f91e 	bl	8002c94 <HAL_GetTick>
 8004a58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	f013 0f02 	tst.w	r3, #2
 8004a62:	d1c0      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a64:	f7fe f916 	bl	8002c94 <HAL_GetTick>
 8004a68:	1b80      	subs	r0, r0, r6
 8004a6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a6e:	4298      	cmp	r0, r3
 8004a70:	d9f3      	bls.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8004a72:	2003      	movs	r0, #3
 8004a74:	e005      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a76:	69d3      	ldr	r3, [r2, #28]
 8004a78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a7c:	61d3      	str	r3, [r2, #28]
 8004a7e:	e7bb      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8004a80:	2000      	movs	r0, #0
}
 8004a82:	b002      	add	sp, #8
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	42420000 	.word	0x42420000

08004a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a96:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a98:	6a03      	ldr	r3, [r0, #32]
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aa2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aa4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa8:	680c      	ldr	r4, [r1, #0]
 8004aaa:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aac:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ab0:	688b      	ldr	r3, [r1, #8]
 8004ab2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae4 <TIM_OC1_SetConfig+0x50>)
 8004ab6:	4290      	cmp	r0, r2
 8004ab8:	d006      	beq.n	8004ac8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aba:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004abc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004abe:	684a      	ldr	r2, [r1, #4]
 8004ac0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac2:	6203      	str	r3, [r0, #32]
}
 8004ac4:	bc30      	pop	{r4, r5}
 8004ac6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004acc:	68ca      	ldr	r2, [r1, #12]
 8004ace:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ad0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ad4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004ad8:	694a      	ldr	r2, [r1, #20]
 8004ada:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004adc:	698d      	ldr	r5, [r1, #24]
 8004ade:	4315      	orrs	r5, r2
 8004ae0:	e7eb      	b.n	8004aba <TIM_OC1_SetConfig+0x26>
 8004ae2:	bf00      	nop
 8004ae4:	40012c00 	.word	0x40012c00

08004ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aec:	6a02      	ldr	r2, [r0, #32]
 8004aee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004af8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004afc:	680d      	ldr	r5, [r1, #0]
 8004afe:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b04:	688a      	ldr	r2, [r1, #8]
 8004b06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004b40 <TIM_OC3_SetConfig+0x58>)
 8004b0c:	4290      	cmp	r0, r2
 8004b0e:	d006      	beq.n	8004b1e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b12:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b14:	684a      	ldr	r2, [r1, #4]
 8004b16:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	6203      	str	r3, [r0, #32]
}
 8004b1a:	bc30      	pop	{r4, r5}
 8004b1c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b22:	68ca      	ldr	r2, [r1, #12]
 8004b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b2c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b30:	694a      	ldr	r2, [r1, #20]
 8004b32:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b36:	698a      	ldr	r2, [r1, #24]
 8004b38:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8004b3c:	e7e8      	b.n	8004b10 <TIM_OC3_SetConfig+0x28>
 8004b3e:	bf00      	nop
 8004b40:	40012c00 	.word	0x40012c00

08004b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b48:	6a02      	ldr	r2, [r0, #32]
 8004b4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b4e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b52:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b54:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b58:	680d      	ldr	r5, [r1, #0]
 8004b5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b62:	688d      	ldr	r5, [r1, #8]
 8004b64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b68:	4d07      	ldr	r5, [pc, #28]	@ (8004b88 <TIM_OC4_SetConfig+0x44>)
 8004b6a:	42a8      	cmp	r0, r5
 8004b6c:	d006      	beq.n	8004b7c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b70:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b72:	684a      	ldr	r2, [r1, #4]
 8004b74:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	6203      	str	r3, [r0, #32]
}
 8004b78:	bc30      	pop	{r4, r5}
 8004b7a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b7c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b80:	694d      	ldr	r5, [r1, #20]
 8004b82:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004b86:	e7f2      	b.n	8004b6e <TIM_OC4_SetConfig+0x2a>
 8004b88:	40012c00 	.word	0x40012c00

08004b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b8c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b8e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b90:	6a04      	ldr	r4, [r0, #32]
 8004b92:	f024 0401 	bic.w	r4, r4, #1
 8004b96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b98:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b9a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b9e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ba2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004ba6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ba8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004baa:	6203      	str	r3, [r0, #32]
}
 8004bac:	bc10      	pop	{r4}
 8004bae:	4770      	bx	lr

08004bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bb2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb4:	6a04      	ldr	r4, [r0, #32]
 8004bb6:	f024 0410 	bic.w	r4, r4, #16
 8004bba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bbe:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bce:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	6203      	str	r3, [r0, #32]
}
 8004bd2:	bc10      	pop	{r4}
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be2:	6083      	str	r3, [r0, #8]
}
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004be8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d127      	bne.n	8004c42 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf8:	6802      	ldr	r2, [r0, #0]
 8004bfa:	68d3      	ldr	r3, [r2, #12]
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c02:	6803      	ldr	r3, [r0, #0]
 8004c04:	4a11      	ldr	r2, [pc, #68]	@ (8004c4c <HAL_TIM_Base_Start_IT+0x64>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d010      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x44>
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0e:	d00d      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x44>
 8004c10:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x44>
 8004c18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d005      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c28:	2000      	movs	r0, #0
 8004c2a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	2a06      	cmp	r2, #6
 8004c34:	d007      	beq.n	8004c46 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c3e:	2000      	movs	r0, #0
 8004c40:	4770      	bx	lr
    return HAL_ERROR;
 8004c42:	2001      	movs	r0, #1
 8004c44:	4770      	bx	lr
  return HAL_OK;
 8004c46:	2000      	movs	r0, #0
}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40012c00 	.word	0x40012c00

08004c50 <HAL_TIM_PWM_MspInit>:
}
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_IC_CaptureCallback>:
}
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIM_TriggerCallback>:
}
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_IRQHandler>:
{
 8004c5a:	b570      	push	{r4, r5, r6, lr}
 8004c5c:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004c5e:	6803      	ldr	r3, [r0, #0]
 8004c60:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c62:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c64:	f015 0f02 	tst.w	r5, #2
 8004c68:	d010      	beq.n	8004c8c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c6a:	f016 0f02 	tst.w	r6, #2
 8004c6e:	d00d      	beq.n	8004c8c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c70:	f06f 0202 	mvn.w	r2, #2
 8004c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c76:	2301      	movs	r3, #1
 8004c78:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c7a:	6803      	ldr	r3, [r0, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f013 0f03 	tst.w	r3, #3
 8004c82:	d05e      	beq.n	8004d42 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004c84:	f7ff ffe6 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c8c:	f015 0f04 	tst.w	r5, #4
 8004c90:	d012      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c92:	f016 0f04 	tst.w	r6, #4
 8004c96:	d00f      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f06f 0204 	mvn.w	r2, #4
 8004c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004cac:	d04f      	beq.n	8004d4e <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f7ff ffd0 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cb8:	f015 0f08 	tst.w	r5, #8
 8004cbc:	d012      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cbe:	f016 0f08 	tst.w	r6, #8
 8004cc2:	d00f      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	f06f 0208 	mvn.w	r2, #8
 8004cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ccc:	2304      	movs	r3, #4
 8004cce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f013 0f03 	tst.w	r3, #3
 8004cd8:	d040      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7ff ffba 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ce4:	f015 0f10 	tst.w	r5, #16
 8004ce8:	d012      	beq.n	8004d10 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cea:	f016 0f10 	tst.w	r6, #16
 8004cee:	d00f      	beq.n	8004d10 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	f06f 0210 	mvn.w	r2, #16
 8004cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004d04:	d031      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7ff ffa4 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d10:	f015 0f01 	tst.w	r5, #1
 8004d14:	d002      	beq.n	8004d1c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d16:	f016 0f01 	tst.w	r6, #1
 8004d1a:	d12d      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d1c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8004d20:	d002      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d22:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004d26:	d12f      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d28:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004d2c:	d002      	beq.n	8004d34 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d2e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004d32:	d131      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d34:	f015 0f20 	tst.w	r5, #32
 8004d38:	d002      	beq.n	8004d40 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d3a:	f016 0f20 	tst.w	r6, #32
 8004d3e:	d133      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x14e>
}
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	f7ff ff86 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7ff ff85 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d4c:	e79c      	b.n	8004c88 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f7ff ff7f 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	4620      	mov	r0, r4
 8004d56:	f7ff ff7e 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d5a:	e7ab      	b.n	8004cb4 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7ff ff78 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d62:	4620      	mov	r0, r4
 8004d64:	f7ff ff77 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d68:	e7ba      	b.n	8004ce0 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f7ff ff71 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ff70 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d76:	e7c9      	b.n	8004d0c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	f06f 0201 	mvn.w	r2, #1
 8004d7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d80:	4620      	mov	r0, r4
 8004d82:	f7fd f8b1 	bl	8001ee8 <HAL_TIM_PeriodElapsedCallback>
 8004d86:	e7c9      	b.n	8004d1c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004d90:	4620      	mov	r0, r4
 8004d92:	f000 fb71 	bl	8005478 <HAL_TIMEx_BreakCallback>
 8004d96:	e7c7      	b.n	8004d28 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7ff ff59 	bl	8004c58 <HAL_TIM_TriggerCallback>
 8004da6:	e7c5      	b.n	8004d34 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	f06f 0220 	mvn.w	r2, #32
 8004dae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004db0:	4620      	mov	r0, r4
 8004db2:	f000 fb60 	bl	8005476 <HAL_TIMEx_CommutCallback>
}
 8004db6:	e7c3      	b.n	8004d40 <HAL_TIM_IRQHandler+0xe6>

08004db8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004db8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dba:	4a1f      	ldr	r2, [pc, #124]	@ (8004e38 <TIM_Base_SetConfig+0x80>)
 8004dbc:	4290      	cmp	r0, r2
 8004dbe:	d00a      	beq.n	8004dd6 <TIM_Base_SetConfig+0x1e>
 8004dc0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004dc4:	d007      	beq.n	8004dd6 <TIM_Base_SetConfig+0x1e>
 8004dc6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004dca:	4290      	cmp	r0, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_Base_SetConfig+0x1e>
 8004dce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004dd2:	4290      	cmp	r0, r2
 8004dd4:	d103      	bne.n	8004dde <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004dda:	684a      	ldr	r2, [r1, #4]
 8004ddc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dde:	4a16      	ldr	r2, [pc, #88]	@ (8004e38 <TIM_Base_SetConfig+0x80>)
 8004de0:	4290      	cmp	r0, r2
 8004de2:	d00a      	beq.n	8004dfa <TIM_Base_SetConfig+0x42>
 8004de4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004de8:	d007      	beq.n	8004dfa <TIM_Base_SetConfig+0x42>
 8004dea:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004dee:	4290      	cmp	r0, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_Base_SetConfig+0x42>
 8004df2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004df6:	4290      	cmp	r0, r2
 8004df8:	d103      	bne.n	8004e02 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfe:	68ca      	ldr	r2, [r1, #12]
 8004e00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e06:	694a      	ldr	r2, [r1, #20]
 8004e08:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004e0a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e0c:	688b      	ldr	r3, [r1, #8]
 8004e0e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e10:	680b      	ldr	r3, [r1, #0]
 8004e12:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <TIM_Base_SetConfig+0x80>)
 8004e16:	4298      	cmp	r0, r3
 8004e18:	d00a      	beq.n	8004e30 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e1e:	6903      	ldr	r3, [r0, #16]
 8004e20:	f013 0f01 	tst.w	r3, #1
 8004e24:	d003      	beq.n	8004e2e <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e26:	6903      	ldr	r3, [r0, #16]
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	6103      	str	r3, [r0, #16]
}
 8004e2e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	690b      	ldr	r3, [r1, #16]
 8004e32:	6303      	str	r3, [r0, #48]	@ 0x30
 8004e34:	e7f1      	b.n	8004e1a <TIM_Base_SetConfig+0x62>
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00

08004e3c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004e3c:	b340      	cbz	r0, 8004e90 <HAL_TIM_Base_Init+0x54>
{
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e42:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004e46:	b1f3      	cbz	r3, 8004e86 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4e:	4621      	mov	r1, r4
 8004e50:	f851 0b04 	ldr.w	r0, [r1], #4
 8004e54:	f7ff ffb0 	bl	8004db8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004e62:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004e66:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004e6a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e76:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004e7a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004e82:	2000      	movs	r0, #0
}
 8004e84:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004e86:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004e8a:	f7fd fcf3 	bl	8002874 <HAL_TIM_Base_MspInit>
 8004e8e:	e7db      	b.n	8004e48 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004e90:	2001      	movs	r0, #1
}
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004e94:	b340      	cbz	r0, 8004ee8 <HAL_TIM_PWM_Init+0x54>
{
 8004e96:	b510      	push	{r4, lr}
 8004e98:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004e9e:	b1f3      	cbz	r3, 8004ede <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	f851 0b04 	ldr.w	r0, [r1], #4
 8004eac:	f7ff ff84 	bl	8004db8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004eba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004ebe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004ec2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ece:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004ed2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004ed6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004eda:	2000      	movs	r0, #0
}
 8004edc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004ede:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004ee2:	f7ff feb5 	bl	8004c50 <HAL_TIM_PWM_MspInit>
 8004ee6:	e7db      	b.n	8004ea0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004ee8:	2001      	movs	r0, #1
}
 8004eea:	4770      	bx	lr

08004eec <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d056      	beq.n	8004f9e <HAL_TIM_Encoder_Init+0xb2>
{
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d04a      	beq.n	8004f94 <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 8004efe:	2302      	movs	r3, #2
 8004f00:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	6893      	ldr	r3, [r2, #8]
 8004f08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f0c:	f023 0307 	bic.w	r3, r3, #7
 8004f10:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f12:	4621      	mov	r1, r4
 8004f14:	f851 0b04 	ldr.w	r0, [r1], #4
 8004f18:	f7ff ff4e 	bl	8004db8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004f1c:	6821      	ldr	r1, [r4, #0]
 8004f1e:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004f20:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8004f22:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8004f24:	6828      	ldr	r0, [r5, #0]
 8004f26:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f28:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f2c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f30:	68ab      	ldr	r3, [r5, #8]
 8004f32:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8004f36:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004f3a:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f3c:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8004f40:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f44:	68ea      	ldr	r2, [r5, #12]
 8004f46:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8004f4a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8004f4e:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f50:	6a2b      	ldr	r3, [r5, #32]
 8004f52:	031b      	lsls	r3, r3, #12
 8004f54:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8004f58:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8004f5c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f5e:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f62:	686a      	ldr	r2, [r5, #4]
 8004f64:	696d      	ldr	r5, [r5, #20]
 8004f66:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004f6a:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8004f6c:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8004f6e:	6821      	ldr	r1, [r4, #0]
 8004f70:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f7c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004f90:	2000      	movs	r0, #0
}
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004f94:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8004f98:	f7fd fc9c 	bl	80028d4 <HAL_TIM_Encoder_MspInit>
 8004f9c:	e7af      	b.n	8004efe <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8004f9e:	2001      	movs	r0, #1
}
 8004fa0:	4770      	bx	lr
	...

08004fa4 <TIM_OC2_SetConfig>:
{
 8004fa4:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8004fa6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa8:	6a02      	ldr	r2, [r0, #32]
 8004faa:	f022 0210 	bic.w	r2, r2, #16
 8004fae:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004fb0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fb4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb8:	680d      	ldr	r5, [r1, #0]
 8004fba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004fbe:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc2:	688d      	ldr	r5, [r1, #8]
 8004fc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fc8:	4d0c      	ldr	r5, [pc, #48]	@ (8004ffc <TIM_OC2_SetConfig+0x58>)
 8004fca:	42a8      	cmp	r0, r5
 8004fcc:	d006      	beq.n	8004fdc <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8004fce:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004fd0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004fd2:	684a      	ldr	r2, [r1, #4]
 8004fd4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004fd6:	6203      	str	r3, [r0, #32]
}
 8004fd8:	bc30      	pop	{r4, r5}
 8004fda:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe0:	68cd      	ldr	r5, [r1, #12]
 8004fe2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fea:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fee:	694d      	ldr	r5, [r1, #20]
 8004ff0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff4:	698d      	ldr	r5, [r1, #24]
 8004ff6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004ffa:	e7e8      	b.n	8004fce <TIM_OC2_SetConfig+0x2a>
 8004ffc:	40012c00 	.word	0x40012c00

08005000 <HAL_TIM_PWM_ConfigChannel>:
{
 8005000:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005002:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d066      	beq.n	80050d8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800500a:	4604      	mov	r4, r0
 800500c:	460d      	mov	r5, r1
 800500e:	2301      	movs	r3, #1
 8005010:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005014:	2a0c      	cmp	r2, #12
 8005016:	d85a      	bhi.n	80050ce <HAL_TIM_PWM_ConfigChannel+0xce>
 8005018:	e8df f002 	tbb	[pc, r2]
 800501c:	59595907 	.word	0x59595907
 8005020:	5959591b 	.word	0x5959591b
 8005024:	59595930 	.word	0x59595930
 8005028:	44          	.byte	0x44
 8005029:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	f7ff fd32 	bl	8004a94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005030:	6822      	ldr	r2, [r4, #0]
 8005032:	6993      	ldr	r3, [r2, #24]
 8005034:	f043 0308 	orr.w	r3, r3, #8
 8005038:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800503a:	6822      	ldr	r2, [r4, #0]
 800503c:	6993      	ldr	r3, [r2, #24]
 800503e:	f023 0304 	bic.w	r3, r3, #4
 8005042:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005044:	6822      	ldr	r2, [r4, #0]
 8005046:	6993      	ldr	r3, [r2, #24]
 8005048:	6929      	ldr	r1, [r5, #16]
 800504a:	430b      	orrs	r3, r1
 800504c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2000      	movs	r0, #0
      break;
 8005050:	e03e      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005052:	6800      	ldr	r0, [r0, #0]
 8005054:	f7ff ffa6 	bl	8004fa4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	6993      	ldr	r3, [r2, #24]
 800505c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005060:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	6993      	ldr	r3, [r2, #24]
 8005066:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800506a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	6993      	ldr	r3, [r2, #24]
 8005070:	6929      	ldr	r1, [r5, #16]
 8005072:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005076:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2000      	movs	r0, #0
      break;
 800507a:	e029      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f7ff fd33 	bl	8004ae8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	69d3      	ldr	r3, [r2, #28]
 8005086:	f043 0308 	orr.w	r3, r3, #8
 800508a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	69d3      	ldr	r3, [r2, #28]
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	69d3      	ldr	r3, [r2, #28]
 800509a:	6929      	ldr	r1, [r5, #16]
 800509c:	430b      	orrs	r3, r1
 800509e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80050a0:	2000      	movs	r0, #0
      break;
 80050a2:	e015      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050a4:	6800      	ldr	r0, [r0, #0]
 80050a6:	f7ff fd4d 	bl	8004b44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	69d3      	ldr	r3, [r2, #28]
 80050ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80050b2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	69d3      	ldr	r3, [r2, #28]
 80050b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050bc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	69d3      	ldr	r3, [r2, #28]
 80050c2:	6929      	ldr	r1, [r5, #16]
 80050c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80050c8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2000      	movs	r0, #0
      break;
 80050cc:	e000      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80050ce:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80050d0:	2300      	movs	r3, #0
 80050d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80050d8:	2002      	movs	r0, #2
 80050da:	e7fc      	b.n	80050d6 <HAL_TIM_PWM_ConfigChannel+0xd6>

080050dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050dc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e0:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050e4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80050e8:	430a      	orrs	r2, r1
 80050ea:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ee:	6082      	str	r2, [r0, #8]
}
 80050f0:	bc10      	pop	{r4}
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80050f4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d078      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0xfa>
{
 80050fc:	b510      	push	{r4, lr}
 80050fe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005100:	2301      	movs	r3, #1
 8005102:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005106:	2302      	movs	r3, #2
 8005108:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800510c:	6802      	ldr	r2, [r0, #0]
 800510e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005110:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005114:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005118:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800511a:	680b      	ldr	r3, [r1, #0]
 800511c:	2b60      	cmp	r3, #96	@ 0x60
 800511e:	d04c      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0xc6>
 8005120:	d829      	bhi.n	8005176 <HAL_TIM_ConfigClockSource+0x82>
 8005122:	2b40      	cmp	r3, #64	@ 0x40
 8005124:	d054      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0xdc>
 8005126:	d90c      	bls.n	8005142 <HAL_TIM_ConfigClockSource+0x4e>
 8005128:	2b50      	cmp	r3, #80	@ 0x50
 800512a:	d122      	bne.n	8005172 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512c:	68ca      	ldr	r2, [r1, #12]
 800512e:	6849      	ldr	r1, [r1, #4]
 8005130:	6800      	ldr	r0, [r0, #0]
 8005132:	f7ff fd2b 	bl	8004b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005136:	2150      	movs	r1, #80	@ 0x50
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	f7ff fd4c 	bl	8004bd6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2000      	movs	r0, #0
      break;
 8005140:	e005      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005142:	2b20      	cmp	r3, #32
 8005144:	d00d      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x6e>
 8005146:	d909      	bls.n	800515c <HAL_TIM_ConfigClockSource+0x68>
 8005148:	2b30      	cmp	r3, #48	@ 0x30
 800514a:	d00a      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800514c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800514e:	2301      	movs	r3, #1
 8005150:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005154:	2300      	movs	r3, #0
 8005156:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800515a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800515c:	b10b      	cbz	r3, 8005162 <HAL_TIM_ConfigClockSource+0x6e>
 800515e:	2b10      	cmp	r3, #16
 8005160:	d105      	bne.n	800516e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005162:	4619      	mov	r1, r3
 8005164:	6820      	ldr	r0, [r4, #0]
 8005166:	f7ff fd36 	bl	8004bd6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2000      	movs	r0, #0
      break;
 800516c:	e7ef      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800516e:	2001      	movs	r0, #1
 8005170:	e7ed      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
 8005172:	2001      	movs	r0, #1
 8005174:	e7eb      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517a:	d034      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0xf2>
 800517c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005180:	d10c      	bne.n	800519c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005182:	68cb      	ldr	r3, [r1, #12]
 8005184:	684a      	ldr	r2, [r1, #4]
 8005186:	6889      	ldr	r1, [r1, #8]
 8005188:	6800      	ldr	r0, [r0, #0]
 800518a:	f7ff ffa7 	bl	80050dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	6893      	ldr	r3, [r2, #8]
 8005192:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005196:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005198:	2000      	movs	r0, #0
      break;
 800519a:	e7d8      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800519c:	2b70      	cmp	r3, #112	@ 0x70
 800519e:	d124      	bne.n	80051ea <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80051a0:	68cb      	ldr	r3, [r1, #12]
 80051a2:	684a      	ldr	r2, [r1, #4]
 80051a4:	6889      	ldr	r1, [r1, #8]
 80051a6:	6800      	ldr	r0, [r0, #0]
 80051a8:	f7ff ff98 	bl	80050dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80051b4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2000      	movs	r0, #0
      break;
 80051b8:	e7c9      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ba:	68ca      	ldr	r2, [r1, #12]
 80051bc:	6849      	ldr	r1, [r1, #4]
 80051be:	6800      	ldr	r0, [r0, #0]
 80051c0:	f7ff fcf6 	bl	8004bb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051c4:	2160      	movs	r1, #96	@ 0x60
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	f7ff fd05 	bl	8004bd6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2000      	movs	r0, #0
      break;
 80051ce:	e7be      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d0:	68ca      	ldr	r2, [r1, #12]
 80051d2:	6849      	ldr	r1, [r1, #4]
 80051d4:	6800      	ldr	r0, [r0, #0]
 80051d6:	f7ff fcd9 	bl	8004b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051da:	2140      	movs	r1, #64	@ 0x40
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	f7ff fcfa 	bl	8004bd6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2000      	movs	r0, #0
      break;
 80051e4:	e7b3      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80051e6:	2000      	movs	r0, #0
 80051e8:	e7b1      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80051ea:	2001      	movs	r0, #1
 80051ec:	e7af      	b.n	800514e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80051ee:	2002      	movs	r0, #2
}
 80051f0:	4770      	bx	lr

080051f2 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f2:	f001 011f 	and.w	r1, r1, #31
 80051f6:	f04f 0c01 	mov.w	ip, #1
 80051fa:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051fe:	6a03      	ldr	r3, [r0, #32]
 8005200:	ea23 030c 	bic.w	r3, r3, ip
 8005204:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005206:	6a03      	ldr	r3, [r0, #32]
 8005208:	408a      	lsls	r2, r1
 800520a:	4313      	orrs	r3, r2
 800520c:	6203      	str	r3, [r0, #32]
}
 800520e:	4770      	bx	lr

08005210 <HAL_TIM_PWM_Start>:
{
 8005210:	b510      	push	{r4, lr}
 8005212:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005214:	4608      	mov	r0, r1
 8005216:	bb51      	cbnz	r1, 800526e <HAL_TIM_PWM_Start+0x5e>
 8005218:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800521c:	b2db      	uxtb	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	bf18      	it	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d15b      	bne.n	80052e0 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005228:	2800      	cmp	r0, #0
 800522a:	d139      	bne.n	80052a0 <HAL_TIM_PWM_Start+0x90>
 800522c:	2302      	movs	r3, #2
 800522e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005232:	2201      	movs	r2, #1
 8005234:	4601      	mov	r1, r0
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	f7ff ffdb 	bl	80051f2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	4a2a      	ldr	r2, [pc, #168]	@ (80052e8 <HAL_TIM_PWM_Start+0xd8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d03d      	beq.n	80052c0 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	4a28      	ldr	r2, [pc, #160]	@ (80052e8 <HAL_TIM_PWM_Start+0xd8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03e      	beq.n	80052ca <HAL_TIM_PWM_Start+0xba>
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005250:	d03b      	beq.n	80052ca <HAL_TIM_PWM_Start+0xba>
 8005252:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005256:	4293      	cmp	r3, r2
 8005258:	d037      	beq.n	80052ca <HAL_TIM_PWM_Start+0xba>
 800525a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800525e:	4293      	cmp	r3, r2
 8005260:	d033      	beq.n	80052ca <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800526a:	2000      	movs	r0, #0
 800526c:	e039      	b.n	80052e2 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800526e:	2904      	cmp	r1, #4
 8005270:	d008      	beq.n	8005284 <HAL_TIM_PWM_Start+0x74>
 8005272:	2908      	cmp	r1, #8
 8005274:	d00d      	beq.n	8005292 <HAL_TIM_PWM_Start+0x82>
 8005276:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800527a:	b2db      	uxtb	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	bf18      	it	ne
 8005280:	2301      	movne	r3, #1
 8005282:	e7cf      	b.n	8005224 <HAL_TIM_PWM_Start+0x14>
 8005284:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8005288:	b2db      	uxtb	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	bf18      	it	ne
 800528e:	2301      	movne	r3, #1
 8005290:	e7c8      	b.n	8005224 <HAL_TIM_PWM_Start+0x14>
 8005292:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005296:	b2db      	uxtb	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	bf18      	it	ne
 800529c:	2301      	movne	r3, #1
 800529e:	e7c1      	b.n	8005224 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a0:	2804      	cmp	r0, #4
 80052a2:	d005      	beq.n	80052b0 <HAL_TIM_PWM_Start+0xa0>
 80052a4:	2808      	cmp	r0, #8
 80052a6:	d007      	beq.n	80052b8 <HAL_TIM_PWM_Start+0xa8>
 80052a8:	2302      	movs	r3, #2
 80052aa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80052ae:	e7c0      	b.n	8005232 <HAL_TIM_PWM_Start+0x22>
 80052b0:	2302      	movs	r3, #2
 80052b2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80052b6:	e7bc      	b.n	8005232 <HAL_TIM_PWM_Start+0x22>
 80052b8:	2302      	movs	r3, #2
 80052ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80052be:	e7b8      	b.n	8005232 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 80052c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80052c8:	e7bc      	b.n	8005244 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	2a06      	cmp	r2, #6
 80052d2:	d007      	beq.n	80052e4 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80052dc:	2000      	movs	r0, #0
 80052de:	e000      	b.n	80052e2 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 80052e0:	2001      	movs	r0, #1
}
 80052e2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80052e4:	2000      	movs	r0, #0
 80052e6:	e7fc      	b.n	80052e2 <HAL_TIM_PWM_Start+0xd2>
 80052e8:	40012c00 	.word	0x40012c00

080052ec <HAL_TIM_Encoder_Start>:
{
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052f0:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 80052f4:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052f6:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052fa:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80052fe:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005300:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
  if (Channel == TIM_CHANNEL_1)
 8005304:	460d      	mov	r5, r1
 8005306:	b9b1      	cbnz	r1, 8005336 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005308:	2801      	cmp	r0, #1
 800530a:	d149      	bne.n	80053a0 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800530c:	2a01      	cmp	r2, #1
 800530e:	d148      	bne.n	80053a2 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005310:	2302      	movs	r3, #2
 8005312:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005316:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 800531a:	b37d      	cbz	r5, 800537c <HAL_TIM_Encoder_Start+0x90>
 800531c:	2d04      	cmp	r5, #4
 800531e:	d039      	beq.n	8005394 <HAL_TIM_Encoder_Start+0xa8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005320:	2201      	movs	r2, #1
 8005322:	2100      	movs	r1, #0
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	f7ff ff64 	bl	80051f2 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800532a:	2201      	movs	r2, #1
 800532c:	2104      	movs	r1, #4
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	f7ff ff5f 	bl	80051f2 <TIM_CCxChannelCmd>
      break;
 8005334:	e027      	b.n	8005386 <HAL_TIM_Encoder_Start+0x9a>
 8005336:	b2db      	uxtb	r3, r3
 8005338:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 800533c:	2904      	cmp	r1, #4
 800533e:	d012      	beq.n	8005366 <HAL_TIM_Encoder_Start+0x7a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005340:	2801      	cmp	r0, #1
 8005342:	d133      	bne.n	80053ac <HAL_TIM_Encoder_Start+0xc0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005344:	2b01      	cmp	r3, #1
 8005346:	d12c      	bne.n	80053a2 <HAL_TIM_Encoder_Start+0xb6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005348:	2a01      	cmp	r2, #1
 800534a:	d131      	bne.n	80053b0 <HAL_TIM_Encoder_Start+0xc4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800534c:	f1bc 0f01 	cmp.w	ip, #1
 8005350:	d130      	bne.n	80053b4 <HAL_TIM_Encoder_Start+0xc8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005352:	2302      	movs	r3, #2
 8005354:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005358:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800535c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005364:	e7d9      	b.n	800531a <HAL_TIM_Encoder_Start+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005366:	2b01      	cmp	r3, #1
 8005368:	d11c      	bne.n	80053a4 <HAL_TIM_Encoder_Start+0xb8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800536a:	f1bc 0f01 	cmp.w	ip, #1
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005370:	2302      	movs	r3, #2
 8005372:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800537a:	e7ce      	b.n	800531a <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800537c:	2201      	movs	r2, #1
 800537e:	2100      	movs	r1, #0
 8005380:	6820      	ldr	r0, [r4, #0]
 8005382:	f7ff ff36 	bl	80051f2 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	6813      	ldr	r3, [r2, #0]
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005390:	2000      	movs	r0, #0
 8005392:	e006      	b.n	80053a2 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005394:	2201      	movs	r2, #1
 8005396:	2104      	movs	r1, #4
 8005398:	6820      	ldr	r0, [r4, #0]
 800539a:	f7ff ff2a 	bl	80051f2 <TIM_CCxChannelCmd>
      break;
 800539e:	e7f2      	b.n	8005386 <HAL_TIM_Encoder_Start+0x9a>
      return HAL_ERROR;
 80053a0:	2001      	movs	r0, #1
}
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80053a4:	2001      	movs	r0, #1
 80053a6:	e7fc      	b.n	80053a2 <HAL_TIM_Encoder_Start+0xb6>
 80053a8:	4618      	mov	r0, r3
 80053aa:	e7fa      	b.n	80053a2 <HAL_TIM_Encoder_Start+0xb6>
      return HAL_ERROR;
 80053ac:	2001      	movs	r0, #1
 80053ae:	e7f8      	b.n	80053a2 <HAL_TIM_Encoder_Start+0xb6>
 80053b0:	4618      	mov	r0, r3
 80053b2:	e7f6      	b.n	80053a2 <HAL_TIM_Encoder_Start+0xb6>
 80053b4:	4610      	mov	r0, r2
 80053b6:	e7f4      	b.n	80053a2 <HAL_TIM_Encoder_Start+0xb6>

080053b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80053bc:	2a01      	cmp	r2, #1
 80053be:	d02c      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80053c0:	b410      	push	{r4}
 80053c2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80053c4:	2201      	movs	r2, #1
 80053c6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ca:	2202      	movs	r2, #2
 80053cc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d0:	6802      	ldr	r2, [r0, #0]
 80053d2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053da:	6808      	ldr	r0, [r1, #0]
 80053dc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	480e      	ldr	r0, [pc, #56]	@ (8005420 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80053e6:	4282      	cmp	r2, r0
 80053e8:	d00a      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80053ea:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80053ee:	d007      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80053f0:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80053f4:	4282      	cmp	r2, r0
 80053f6:	d003      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80053f8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80053fc:	4282      	cmp	r2, r0
 80053fe:	d104      	bne.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005400:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005404:	6849      	ldr	r1, [r1, #4]
 8005406:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005408:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005410:	2000      	movs	r0, #0
 8005412:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005416:	bc10      	pop	{r4}
 8005418:	4770      	bx	lr
  __HAL_LOCK(htim);
 800541a:	2002      	movs	r0, #2
}
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40012c00 	.word	0x40012c00

08005424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005424:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005426:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d021      	beq.n	8005472 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800542e:	2301      	movs	r3, #1
 8005430:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005434:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543a:	6888      	ldr	r0, [r1, #8]
 800543c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800543e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005442:	6848      	ldr	r0, [r1, #4]
 8005444:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800544a:	6808      	ldr	r0, [r1, #0]
 800544c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800544e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005452:	6908      	ldr	r0, [r1, #16]
 8005454:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005456:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800545a:	6948      	ldr	r0, [r1, #20]
 800545c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800545e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005462:	69c9      	ldr	r1, [r1, #28]
 8005464:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005466:	6811      	ldr	r1, [r2, #0]
 8005468:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800546a:	2000      	movs	r0, #0
 800546c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005470:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005472:	2002      	movs	r0, #2
}
 8005474:	4770      	bx	lr

08005476 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005478:	4770      	bx	lr

0800547a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	f102 030c 	add.w	r3, r2, #12
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	320c      	adds	r2, #12
 800548a:	e842 3100 	strex	r1, r3, [r2]
 800548e:	2900      	cmp	r1, #0
 8005490:	d1f3      	bne.n	800547a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	f102 0314 	add.w	r3, r2, #20
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	3214      	adds	r2, #20
 80054a2:	e842 3100 	strex	r1, r3, [r2]
 80054a6:	2900      	cmp	r1, #0
 80054a8:	d1f3      	bne.n	8005492 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d005      	beq.n	80054bc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	2320      	movs	r3, #32
 80054b2:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b6:	2300      	movs	r3, #0
 80054b8:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80054ba:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	f102 030c 	add.w	r3, r2, #12
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	320c      	adds	r2, #12
 80054cc:	e842 3100 	strex	r1, r3, [r2]
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d1f3      	bne.n	80054bc <UART_EndRxTransfer+0x42>
 80054d4:	e7ec      	b.n	80054b0 <UART_EndRxTransfer+0x36>
	...

080054d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d8:	b510      	push	{r4, lr}
 80054da:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054dc:	6802      	ldr	r2, [r0, #0]
 80054de:	6913      	ldr	r3, [r2, #16]
 80054e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80054e4:	68c1      	ldr	r1, [r0, #12]
 80054e6:	430b      	orrs	r3, r1
 80054e8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054ea:	6883      	ldr	r3, [r0, #8]
 80054ec:	6902      	ldr	r2, [r0, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	6942      	ldr	r2, [r0, #20]
 80054f2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80054f4:	6801      	ldr	r1, [r0, #0]
 80054f6:	68cb      	ldr	r3, [r1, #12]
 80054f8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80054fc:	f023 030c 	bic.w	r3, r3, #12
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005504:	6802      	ldr	r2, [r0, #0]
 8005506:	6953      	ldr	r3, [r2, #20]
 8005508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800550c:	6981      	ldr	r1, [r0, #24]
 800550e:	430b      	orrs	r3, r1
 8005510:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8005512:	6802      	ldr	r2, [r0, #0]
 8005514:	4b13      	ldr	r3, [pc, #76]	@ (8005564 <UART_SetConfig+0x8c>)
 8005516:	429a      	cmp	r2, r3
 8005518:	d020      	beq.n	800555c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800551a:	f7ff fa0f 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 800551e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005520:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005524:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005530:	480d      	ldr	r0, [pc, #52]	@ (8005568 <UART_SetConfig+0x90>)
 8005532:	fba0 3102 	umull	r3, r1, r0, r2
 8005536:	0949      	lsrs	r1, r1, #5
 8005538:	2364      	movs	r3, #100	@ 0x64
 800553a:	fb03 2311 	mls	r3, r3, r1, r2
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	3332      	adds	r3, #50	@ 0x32
 8005542:	fba0 0303 	umull	r0, r3, r0, r3
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800554c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	6821      	ldr	r1, [r4, #0]
 8005556:	4413      	add	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800555a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800555c:	f7ff f9fe 	bl	800495c <HAL_RCC_GetPCLK2Freq>
 8005560:	4602      	mov	r2, r0
 8005562:	e7dd      	b.n	8005520 <UART_SetConfig+0x48>
 8005564:	40013800 	.word	0x40013800
 8005568:	51eb851f 	.word	0x51eb851f

0800556c <UART_WaitOnFlagUntilTimeout>:
{
 800556c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005570:	b083      	sub	sp, #12
 8005572:	4605      	mov	r5, r0
 8005574:	460e      	mov	r6, r1
 8005576:	4617      	mov	r7, r2
 8005578:	4699      	mov	r9, r3
 800557a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557e:	682b      	ldr	r3, [r5, #0]
 8005580:	681c      	ldr	r4, [r3, #0]
 8005582:	ea36 0404 	bics.w	r4, r6, r4
 8005586:	bf0c      	ite	eq
 8005588:	2401      	moveq	r4, #1
 800558a:	2400      	movne	r4, #0
 800558c:	42bc      	cmp	r4, r7
 800558e:	d128      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8005590:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005594:	d0f3      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005596:	f7fd fb7d 	bl	8002c94 <HAL_GetTick>
 800559a:	eba0 0009 	sub.w	r0, r0, r9
 800559e:	4540      	cmp	r0, r8
 80055a0:	d823      	bhi.n	80055ea <UART_WaitOnFlagUntilTimeout+0x7e>
 80055a2:	f1b8 0f00 	cmp.w	r8, #0
 80055a6:	d022      	beq.n	80055ee <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	f012 0f04 	tst.w	r2, #4
 80055b0:	d0e5      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x12>
 80055b2:	2e80      	cmp	r6, #128	@ 0x80
 80055b4:	d0e3      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x12>
 80055b6:	2e40      	cmp	r6, #64	@ 0x40
 80055b8:	d0e1      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f012 0f08 	tst.w	r2, #8
 80055c0:	d0dd      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055c2:	2400      	movs	r4, #0
 80055c4:	9401      	str	r4, [sp, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	9201      	str	r2, [sp, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80055d0:	4628      	mov	r0, r5
 80055d2:	f7ff ff52 	bl	800547a <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055d6:	2308      	movs	r3, #8
 80055d8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80055da:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80055de:	2001      	movs	r0, #1
 80055e0:	e000      	b.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80055e2:	2000      	movs	r0, #0
}
 80055e4:	b003      	add	sp, #12
 80055e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80055ea:	2003      	movs	r0, #3
 80055ec:	e7fa      	b.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x78>
 80055ee:	2003      	movs	r0, #3
 80055f0:	e7f8      	b.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x78>

080055f2 <HAL_UART_Init>:
  if (huart == NULL)
 80055f2:	b360      	cbz	r0, 800564e <HAL_UART_Init+0x5c>
{
 80055f4:	b510      	push	{r4, lr}
 80055f6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80055f8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80055fc:	b313      	cbz	r3, 8005644 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80055fe:	2324      	movs	r3, #36	@ 0x24
 8005600:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	68d3      	ldr	r3, [r2, #12]
 8005608:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800560c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800560e:	4620      	mov	r0, r4
 8005610:	f7ff ff62 	bl	80054d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	6913      	ldr	r3, [r2, #16]
 8005618:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800561c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	6953      	ldr	r3, [r2, #20]
 8005622:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005626:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005628:	6822      	ldr	r2, [r4, #0]
 800562a:	68d3      	ldr	r3, [r2, #12]
 800562c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005630:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005632:	2000      	movs	r0, #0
 8005634:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005636:	2320      	movs	r3, #32
 8005638:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800563c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005640:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8005642:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005644:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8005648:	f7fd f9f2 	bl	8002a30 <HAL_UART_MspInit>
 800564c:	e7d7      	b.n	80055fe <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800564e:	2001      	movs	r0, #1
}
 8005650:	4770      	bx	lr

08005652 <HAL_UART_Transmit>:
{
 8005652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800565a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b20      	cmp	r3, #32
 8005662:	d156      	bne.n	8005712 <HAL_UART_Transmit+0xc0>
 8005664:	4604      	mov	r4, r0
 8005666:	460d      	mov	r5, r1
 8005668:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800566a:	2900      	cmp	r1, #0
 800566c:	d055      	beq.n	800571a <HAL_UART_Transmit+0xc8>
 800566e:	b90a      	cbnz	r2, 8005674 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8005670:	2001      	movs	r0, #1
 8005672:	e04f      	b.n	8005714 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	2300      	movs	r3, #0
 8005676:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005678:	2321      	movs	r3, #33	@ 0x21
 800567a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800567e:	f7fd fb09 	bl	8002c94 <HAL_GetTick>
 8005682:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005684:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005688:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568c:	68a3      	ldr	r3, [r4, #8]
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005692:	d002      	beq.n	800569a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8005694:	f04f 0800 	mov.w	r8, #0
 8005698:	e014      	b.n	80056c4 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	b32b      	cbz	r3, 80056ea <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800569e:	f04f 0800 	mov.w	r8, #0
 80056a2:	e00f      	b.n	80056c4 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80056a4:	2320      	movs	r3, #32
 80056a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80056aa:	2003      	movs	r0, #3
 80056ac:	e032      	b.n	8005714 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ae:	f838 3b02 	ldrh.w	r3, [r8], #2
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80056ba:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80056bc:	b292      	uxth	r2, r2
 80056be:	3a01      	subs	r2, #1
 80056c0:	b292      	uxth	r2, r2
 80056c2:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056c4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	b193      	cbz	r3, 80056f0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	9600      	str	r6, [sp, #0]
 80056cc:	463b      	mov	r3, r7
 80056ce:	2200      	movs	r2, #0
 80056d0:	2180      	movs	r1, #128	@ 0x80
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7ff ff4a 	bl	800556c <UART_WaitOnFlagUntilTimeout>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d1e3      	bne.n	80056a4 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80056dc:	2d00      	cmp	r5, #0
 80056de:	d0e6      	beq.n	80056ae <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056e8:	e7e7      	b.n	80056ba <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80056ea:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80056ec:	2500      	movs	r5, #0
 80056ee:	e7e9      	b.n	80056c4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f0:	9600      	str	r6, [sp, #0]
 80056f2:	463b      	mov	r3, r7
 80056f4:	2200      	movs	r2, #0
 80056f6:	2140      	movs	r1, #64	@ 0x40
 80056f8:	4620      	mov	r0, r4
 80056fa:	f7ff ff37 	bl	800556c <UART_WaitOnFlagUntilTimeout>
 80056fe:	b918      	cbnz	r0, 8005708 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8005700:	2320      	movs	r3, #32
 8005702:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8005706:	e005      	b.n	8005714 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8005708:	2320      	movs	r3, #32
 800570a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800570e:	2003      	movs	r0, #3
 8005710:	e000      	b.n	8005714 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8005712:	2002      	movs	r0, #2
}
 8005714:	b002      	add	sp, #8
 8005716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800571a:	2001      	movs	r0, #1
 800571c:	e7fa      	b.n	8005714 <HAL_UART_Transmit+0xc2>
	...

08005720 <exit>:
 8005720:	b508      	push	{r3, lr}
 8005722:	4b06      	ldr	r3, [pc, #24]	@ (800573c <exit+0x1c>)
 8005724:	4604      	mov	r4, r0
 8005726:	b113      	cbz	r3, 800572e <exit+0xe>
 8005728:	2100      	movs	r1, #0
 800572a:	f3af 8000 	nop.w
 800572e:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <exit+0x20>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	b103      	cbz	r3, 8005736 <exit+0x16>
 8005734:	4798      	blx	r3
 8005736:	4620      	mov	r0, r4
 8005738:	f7fd f9fa 	bl	8002b30 <_exit>
 800573c:	00000000 	.word	0x00000000
 8005740:	20000700 	.word	0x20000700

08005744 <malloc>:
 8005744:	4b02      	ldr	r3, [pc, #8]	@ (8005750 <malloc+0xc>)
 8005746:	4601      	mov	r1, r0
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	f000 b825 	b.w	8005798 <_malloc_r>
 800574e:	bf00      	nop
 8005750:	20000024 	.word	0x20000024

08005754 <sbrk_aligned>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	4e0f      	ldr	r6, [pc, #60]	@ (8005794 <sbrk_aligned+0x40>)
 8005758:	460c      	mov	r4, r1
 800575a:	6831      	ldr	r1, [r6, #0]
 800575c:	4605      	mov	r5, r0
 800575e:	b911      	cbnz	r1, 8005766 <sbrk_aligned+0x12>
 8005760:	f000 fe90 	bl	8006484 <_sbrk_r>
 8005764:	6030      	str	r0, [r6, #0]
 8005766:	4621      	mov	r1, r4
 8005768:	4628      	mov	r0, r5
 800576a:	f000 fe8b 	bl	8006484 <_sbrk_r>
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	d103      	bne.n	800577a <sbrk_aligned+0x26>
 8005772:	f04f 34ff 	mov.w	r4, #4294967295
 8005776:	4620      	mov	r0, r4
 8005778:	bd70      	pop	{r4, r5, r6, pc}
 800577a:	1cc4      	adds	r4, r0, #3
 800577c:	f024 0403 	bic.w	r4, r4, #3
 8005780:	42a0      	cmp	r0, r4
 8005782:	d0f8      	beq.n	8005776 <sbrk_aligned+0x22>
 8005784:	1a21      	subs	r1, r4, r0
 8005786:	4628      	mov	r0, r5
 8005788:	f000 fe7c 	bl	8006484 <_sbrk_r>
 800578c:	3001      	adds	r0, #1
 800578e:	d1f2      	bne.n	8005776 <sbrk_aligned+0x22>
 8005790:	e7ef      	b.n	8005772 <sbrk_aligned+0x1e>
 8005792:	bf00      	nop
 8005794:	200005c0 	.word	0x200005c0

08005798 <_malloc_r>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	1ccd      	adds	r5, r1, #3
 800579e:	f025 0503 	bic.w	r5, r5, #3
 80057a2:	3508      	adds	r5, #8
 80057a4:	2d0c      	cmp	r5, #12
 80057a6:	bf38      	it	cc
 80057a8:	250c      	movcc	r5, #12
 80057aa:	2d00      	cmp	r5, #0
 80057ac:	4606      	mov	r6, r0
 80057ae:	db01      	blt.n	80057b4 <_malloc_r+0x1c>
 80057b0:	42a9      	cmp	r1, r5
 80057b2:	d904      	bls.n	80057be <_malloc_r+0x26>
 80057b4:	230c      	movs	r3, #12
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	2000      	movs	r0, #0
 80057ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005894 <_malloc_r+0xfc>
 80057c2:	f000 f869 	bl	8005898 <__malloc_lock>
 80057c6:	f8d8 3000 	ldr.w	r3, [r8]
 80057ca:	461c      	mov	r4, r3
 80057cc:	bb44      	cbnz	r4, 8005820 <_malloc_r+0x88>
 80057ce:	4629      	mov	r1, r5
 80057d0:	4630      	mov	r0, r6
 80057d2:	f7ff ffbf 	bl	8005754 <sbrk_aligned>
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	4604      	mov	r4, r0
 80057da:	d158      	bne.n	800588e <_malloc_r+0xf6>
 80057dc:	f8d8 4000 	ldr.w	r4, [r8]
 80057e0:	4627      	mov	r7, r4
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	d143      	bne.n	800586e <_malloc_r+0xd6>
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	d04b      	beq.n	8005882 <_malloc_r+0xea>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	4639      	mov	r1, r7
 80057ee:	4630      	mov	r0, r6
 80057f0:	eb04 0903 	add.w	r9, r4, r3
 80057f4:	f000 fe46 	bl	8006484 <_sbrk_r>
 80057f8:	4581      	cmp	r9, r0
 80057fa:	d142      	bne.n	8005882 <_malloc_r+0xea>
 80057fc:	6821      	ldr	r1, [r4, #0]
 80057fe:	4630      	mov	r0, r6
 8005800:	1a6d      	subs	r5, r5, r1
 8005802:	4629      	mov	r1, r5
 8005804:	f7ff ffa6 	bl	8005754 <sbrk_aligned>
 8005808:	3001      	adds	r0, #1
 800580a:	d03a      	beq.n	8005882 <_malloc_r+0xea>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	442b      	add	r3, r5
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	f8d8 3000 	ldr.w	r3, [r8]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	bb62      	cbnz	r2, 8005874 <_malloc_r+0xdc>
 800581a:	f8c8 7000 	str.w	r7, [r8]
 800581e:	e00f      	b.n	8005840 <_malloc_r+0xa8>
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	1b52      	subs	r2, r2, r5
 8005824:	d420      	bmi.n	8005868 <_malloc_r+0xd0>
 8005826:	2a0b      	cmp	r2, #11
 8005828:	d917      	bls.n	800585a <_malloc_r+0xc2>
 800582a:	1961      	adds	r1, r4, r5
 800582c:	42a3      	cmp	r3, r4
 800582e:	6025      	str	r5, [r4, #0]
 8005830:	bf18      	it	ne
 8005832:	6059      	strne	r1, [r3, #4]
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	bf08      	it	eq
 8005838:	f8c8 1000 	streq.w	r1, [r8]
 800583c:	5162      	str	r2, [r4, r5]
 800583e:	604b      	str	r3, [r1, #4]
 8005840:	4630      	mov	r0, r6
 8005842:	f000 f82f 	bl	80058a4 <__malloc_unlock>
 8005846:	f104 000b 	add.w	r0, r4, #11
 800584a:	1d23      	adds	r3, r4, #4
 800584c:	f020 0007 	bic.w	r0, r0, #7
 8005850:	1ac2      	subs	r2, r0, r3
 8005852:	bf1c      	itt	ne
 8005854:	1a1b      	subne	r3, r3, r0
 8005856:	50a3      	strne	r3, [r4, r2]
 8005858:	e7af      	b.n	80057ba <_malloc_r+0x22>
 800585a:	6862      	ldr	r2, [r4, #4]
 800585c:	42a3      	cmp	r3, r4
 800585e:	bf0c      	ite	eq
 8005860:	f8c8 2000 	streq.w	r2, [r8]
 8005864:	605a      	strne	r2, [r3, #4]
 8005866:	e7eb      	b.n	8005840 <_malloc_r+0xa8>
 8005868:	4623      	mov	r3, r4
 800586a:	6864      	ldr	r4, [r4, #4]
 800586c:	e7ae      	b.n	80057cc <_malloc_r+0x34>
 800586e:	463c      	mov	r4, r7
 8005870:	687f      	ldr	r7, [r7, #4]
 8005872:	e7b6      	b.n	80057e2 <_malloc_r+0x4a>
 8005874:	461a      	mov	r2, r3
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	42a3      	cmp	r3, r4
 800587a:	d1fb      	bne.n	8005874 <_malloc_r+0xdc>
 800587c:	2300      	movs	r3, #0
 800587e:	6053      	str	r3, [r2, #4]
 8005880:	e7de      	b.n	8005840 <_malloc_r+0xa8>
 8005882:	230c      	movs	r3, #12
 8005884:	4630      	mov	r0, r6
 8005886:	6033      	str	r3, [r6, #0]
 8005888:	f000 f80c 	bl	80058a4 <__malloc_unlock>
 800588c:	e794      	b.n	80057b8 <_malloc_r+0x20>
 800588e:	6005      	str	r5, [r0, #0]
 8005890:	e7d6      	b.n	8005840 <_malloc_r+0xa8>
 8005892:	bf00      	nop
 8005894:	200005c4 	.word	0x200005c4

08005898 <__malloc_lock>:
 8005898:	4801      	ldr	r0, [pc, #4]	@ (80058a0 <__malloc_lock+0x8>)
 800589a:	f000 be40 	b.w	800651e <__retarget_lock_acquire_recursive>
 800589e:	bf00      	nop
 80058a0:	20000708 	.word	0x20000708

080058a4 <__malloc_unlock>:
 80058a4:	4801      	ldr	r0, [pc, #4]	@ (80058ac <__malloc_unlock+0x8>)
 80058a6:	f000 be3b 	b.w	8006520 <__retarget_lock_release_recursive>
 80058aa:	bf00      	nop
 80058ac:	20000708 	.word	0x20000708

080058b0 <realloc>:
 80058b0:	4b02      	ldr	r3, [pc, #8]	@ (80058bc <realloc+0xc>)
 80058b2:	460a      	mov	r2, r1
 80058b4:	4601      	mov	r1, r0
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	f000 b802 	b.w	80058c0 <_realloc_r>
 80058bc:	20000024 	.word	0x20000024

080058c0 <_realloc_r>:
 80058c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c4:	4680      	mov	r8, r0
 80058c6:	4615      	mov	r5, r2
 80058c8:	460c      	mov	r4, r1
 80058ca:	b921      	cbnz	r1, 80058d6 <_realloc_r+0x16>
 80058cc:	4611      	mov	r1, r2
 80058ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	f7ff bf61 	b.w	8005798 <_malloc_r>
 80058d6:	b92a      	cbnz	r2, 80058e4 <_realloc_r+0x24>
 80058d8:	f001 fc92 	bl	8007200 <_free_r>
 80058dc:	2400      	movs	r4, #0
 80058de:	4620      	mov	r0, r4
 80058e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e4:	f002 f854 	bl	8007990 <_malloc_usable_size_r>
 80058e8:	4285      	cmp	r5, r0
 80058ea:	4606      	mov	r6, r0
 80058ec:	d802      	bhi.n	80058f4 <_realloc_r+0x34>
 80058ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80058f2:	d8f4      	bhi.n	80058de <_realloc_r+0x1e>
 80058f4:	4629      	mov	r1, r5
 80058f6:	4640      	mov	r0, r8
 80058f8:	f7ff ff4e 	bl	8005798 <_malloc_r>
 80058fc:	4607      	mov	r7, r0
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0ec      	beq.n	80058dc <_realloc_r+0x1c>
 8005902:	42b5      	cmp	r5, r6
 8005904:	462a      	mov	r2, r5
 8005906:	4621      	mov	r1, r4
 8005908:	bf28      	it	cs
 800590a:	4632      	movcs	r2, r6
 800590c:	f000 fe17 	bl	800653e <memcpy>
 8005910:	4621      	mov	r1, r4
 8005912:	4640      	mov	r0, r8
 8005914:	f001 fc74 	bl	8007200 <_free_r>
 8005918:	463c      	mov	r4, r7
 800591a:	e7e0      	b.n	80058de <_realloc_r+0x1e>

0800591c <__cvt>:
 800591c:	2b00      	cmp	r3, #0
 800591e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005922:	461d      	mov	r5, r3
 8005924:	bfbb      	ittet	lt
 8005926:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800592a:	461d      	movlt	r5, r3
 800592c:	2300      	movge	r3, #0
 800592e:	232d      	movlt	r3, #45	@ 0x2d
 8005930:	b088      	sub	sp, #32
 8005932:	4614      	mov	r4, r2
 8005934:	bfb8      	it	lt
 8005936:	4614      	movlt	r4, r2
 8005938:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800593a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800593c:	7013      	strb	r3, [r2, #0]
 800593e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005940:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005944:	f023 0820 	bic.w	r8, r3, #32
 8005948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800594c:	d005      	beq.n	800595a <__cvt+0x3e>
 800594e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005952:	d100      	bne.n	8005956 <__cvt+0x3a>
 8005954:	3601      	adds	r6, #1
 8005956:	2302      	movs	r3, #2
 8005958:	e000      	b.n	800595c <__cvt+0x40>
 800595a:	2303      	movs	r3, #3
 800595c:	aa07      	add	r2, sp, #28
 800595e:	9204      	str	r2, [sp, #16]
 8005960:	aa06      	add	r2, sp, #24
 8005962:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005966:	e9cd 3600 	strd	r3, r6, [sp]
 800596a:	4622      	mov	r2, r4
 800596c:	462b      	mov	r3, r5
 800596e:	f000 fe7f 	bl	8006670 <_dtoa_r>
 8005972:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005976:	4607      	mov	r7, r0
 8005978:	d119      	bne.n	80059ae <__cvt+0x92>
 800597a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800597c:	07db      	lsls	r3, r3, #31
 800597e:	d50e      	bpl.n	800599e <__cvt+0x82>
 8005980:	eb00 0906 	add.w	r9, r0, r6
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
 8005988:	4620      	mov	r0, r4
 800598a:	4629      	mov	r1, r5
 800598c:	f7fb f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8005990:	b108      	cbz	r0, 8005996 <__cvt+0x7a>
 8005992:	f8cd 901c 	str.w	r9, [sp, #28]
 8005996:	2230      	movs	r2, #48	@ 0x30
 8005998:	9b07      	ldr	r3, [sp, #28]
 800599a:	454b      	cmp	r3, r9
 800599c:	d31e      	bcc.n	80059dc <__cvt+0xc0>
 800599e:	4638      	mov	r0, r7
 80059a0:	9b07      	ldr	r3, [sp, #28]
 80059a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059a4:	1bdb      	subs	r3, r3, r7
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	b008      	add	sp, #32
 80059aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059b2:	eb00 0906 	add.w	r9, r0, r6
 80059b6:	d1e5      	bne.n	8005984 <__cvt+0x68>
 80059b8:	7803      	ldrb	r3, [r0, #0]
 80059ba:	2b30      	cmp	r3, #48	@ 0x30
 80059bc:	d10a      	bne.n	80059d4 <__cvt+0xb8>
 80059be:	2200      	movs	r2, #0
 80059c0:	2300      	movs	r3, #0
 80059c2:	4620      	mov	r0, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	f7fa ffef 	bl	80009a8 <__aeabi_dcmpeq>
 80059ca:	b918      	cbnz	r0, 80059d4 <__cvt+0xb8>
 80059cc:	f1c6 0601 	rsb	r6, r6, #1
 80059d0:	f8ca 6000 	str.w	r6, [sl]
 80059d4:	f8da 3000 	ldr.w	r3, [sl]
 80059d8:	4499      	add	r9, r3
 80059da:	e7d3      	b.n	8005984 <__cvt+0x68>
 80059dc:	1c59      	adds	r1, r3, #1
 80059de:	9107      	str	r1, [sp, #28]
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e7d9      	b.n	8005998 <__cvt+0x7c>

080059e4 <__exponent>:
 80059e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059e6:	2900      	cmp	r1, #0
 80059e8:	bfb6      	itet	lt
 80059ea:	232d      	movlt	r3, #45	@ 0x2d
 80059ec:	232b      	movge	r3, #43	@ 0x2b
 80059ee:	4249      	neglt	r1, r1
 80059f0:	2909      	cmp	r1, #9
 80059f2:	7002      	strb	r2, [r0, #0]
 80059f4:	7043      	strb	r3, [r0, #1]
 80059f6:	dd29      	ble.n	8005a4c <__exponent+0x68>
 80059f8:	f10d 0307 	add.w	r3, sp, #7
 80059fc:	461d      	mov	r5, r3
 80059fe:	270a      	movs	r7, #10
 8005a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a04:	461a      	mov	r2, r3
 8005a06:	fb07 1416 	mls	r4, r7, r6, r1
 8005a0a:	3430      	adds	r4, #48	@ 0x30
 8005a0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a10:	460c      	mov	r4, r1
 8005a12:	2c63      	cmp	r4, #99	@ 0x63
 8005a14:	4631      	mov	r1, r6
 8005a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a1a:	dcf1      	bgt.n	8005a00 <__exponent+0x1c>
 8005a1c:	3130      	adds	r1, #48	@ 0x30
 8005a1e:	1e94      	subs	r4, r2, #2
 8005a20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a24:	4623      	mov	r3, r4
 8005a26:	1c41      	adds	r1, r0, #1
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	d30a      	bcc.n	8005a42 <__exponent+0x5e>
 8005a2c:	f10d 0309 	add.w	r3, sp, #9
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	42ac      	cmp	r4, r5
 8005a34:	bf88      	it	hi
 8005a36:	2300      	movhi	r3, #0
 8005a38:	3302      	adds	r3, #2
 8005a3a:	4403      	add	r3, r0
 8005a3c:	1a18      	subs	r0, r3, r0
 8005a3e:	b003      	add	sp, #12
 8005a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a46:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a4a:	e7ed      	b.n	8005a28 <__exponent+0x44>
 8005a4c:	2330      	movs	r3, #48	@ 0x30
 8005a4e:	3130      	adds	r1, #48	@ 0x30
 8005a50:	7083      	strb	r3, [r0, #2]
 8005a52:	70c1      	strb	r1, [r0, #3]
 8005a54:	1d03      	adds	r3, r0, #4
 8005a56:	e7f1      	b.n	8005a3c <__exponent+0x58>

08005a58 <_printf_float>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	b091      	sub	sp, #68	@ 0x44
 8005a5e:	460c      	mov	r4, r1
 8005a60:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005a64:	4616      	mov	r6, r2
 8005a66:	461f      	mov	r7, r3
 8005a68:	4605      	mov	r5, r0
 8005a6a:	f000 fcd3 	bl	8006414 <_localeconv_r>
 8005a6e:	6803      	ldr	r3, [r0, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	9308      	str	r3, [sp, #32]
 8005a74:	f7fa fb6c 	bl	8000150 <strlen>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a80:	9009      	str	r0, [sp, #36]	@ 0x24
 8005a82:	3307      	adds	r3, #7
 8005a84:	f023 0307 	bic.w	r3, r3, #7
 8005a88:	f103 0208 	add.w	r2, r3, #8
 8005a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a90:	f8d4 b000 	ldr.w	fp, [r4]
 8005a94:	f8c8 2000 	str.w	r2, [r8]
 8005a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aa2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005aae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ab2:	4b9c      	ldr	r3, [pc, #624]	@ (8005d24 <_printf_float+0x2cc>)
 8005ab4:	f7fa ffaa 	bl	8000a0c <__aeabi_dcmpun>
 8005ab8:	bb70      	cbnz	r0, 8005b18 <_printf_float+0xc0>
 8005aba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005abe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac2:	4b98      	ldr	r3, [pc, #608]	@ (8005d24 <_printf_float+0x2cc>)
 8005ac4:	f7fa ff84 	bl	80009d0 <__aeabi_dcmple>
 8005ac8:	bb30      	cbnz	r0, 8005b18 <_printf_float+0xc0>
 8005aca:	2200      	movs	r2, #0
 8005acc:	2300      	movs	r3, #0
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fa ff73 	bl	80009bc <__aeabi_dcmplt>
 8005ad6:	b110      	cbz	r0, 8005ade <_printf_float+0x86>
 8005ad8:	232d      	movs	r3, #45	@ 0x2d
 8005ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ade:	4a92      	ldr	r2, [pc, #584]	@ (8005d28 <_printf_float+0x2d0>)
 8005ae0:	4b92      	ldr	r3, [pc, #584]	@ (8005d2c <_printf_float+0x2d4>)
 8005ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ae6:	bf94      	ite	ls
 8005ae8:	4690      	movls	r8, r2
 8005aea:	4698      	movhi	r8, r3
 8005aec:	2303      	movs	r3, #3
 8005aee:	f04f 0900 	mov.w	r9, #0
 8005af2:	6123      	str	r3, [r4, #16]
 8005af4:	f02b 0304 	bic.w	r3, fp, #4
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	4633      	mov	r3, r6
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	9700      	str	r7, [sp, #0]
 8005b02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005b04:	f000 f9d4 	bl	8005eb0 <_printf_common>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f040 8090 	bne.w	8005c2e <_printf_float+0x1d6>
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	b011      	add	sp, #68	@ 0x44
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f7fa ff74 	bl	8000a0c <__aeabi_dcmpun>
 8005b24:	b148      	cbz	r0, 8005b3a <_printf_float+0xe2>
 8005b26:	464b      	mov	r3, r9
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bfb8      	it	lt
 8005b2c:	232d      	movlt	r3, #45	@ 0x2d
 8005b2e:	4a80      	ldr	r2, [pc, #512]	@ (8005d30 <_printf_float+0x2d8>)
 8005b30:	bfb8      	it	lt
 8005b32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b36:	4b7f      	ldr	r3, [pc, #508]	@ (8005d34 <_printf_float+0x2dc>)
 8005b38:	e7d3      	b.n	8005ae2 <_printf_float+0x8a>
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	d13f      	bne.n	8005bc4 <_printf_float+0x16c>
 8005b44:	2306      	movs	r3, #6
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	9206      	str	r2, [sp, #24]
 8005b52:	aa0e      	add	r2, sp, #56	@ 0x38
 8005b54:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005b58:	aa0d      	add	r2, sp, #52	@ 0x34
 8005b5a:	9203      	str	r2, [sp, #12]
 8005b5c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005b60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	4642      	mov	r2, r8
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005b70:	f7ff fed4 	bl	800591c <__cvt>
 8005b74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b76:	4680      	mov	r8, r0
 8005b78:	2947      	cmp	r1, #71	@ 0x47
 8005b7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005b7c:	d128      	bne.n	8005bd0 <_printf_float+0x178>
 8005b7e:	1cc8      	adds	r0, r1, #3
 8005b80:	db02      	blt.n	8005b88 <_printf_float+0x130>
 8005b82:	6863      	ldr	r3, [r4, #4]
 8005b84:	4299      	cmp	r1, r3
 8005b86:	dd40      	ble.n	8005c0a <_printf_float+0x1b2>
 8005b88:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8005b90:	4652      	mov	r2, sl
 8005b92:	3901      	subs	r1, #1
 8005b94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b98:	910d      	str	r1, [sp, #52]	@ 0x34
 8005b9a:	f7ff ff23 	bl	80059e4 <__exponent>
 8005b9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ba0:	4681      	mov	r9, r0
 8005ba2:	1813      	adds	r3, r2, r0
 8005ba4:	2a01      	cmp	r2, #1
 8005ba6:	6123      	str	r3, [r4, #16]
 8005ba8:	dc02      	bgt.n	8005bb0 <_printf_float+0x158>
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	07d2      	lsls	r2, r2, #31
 8005bae:	d501      	bpl.n	8005bb4 <_printf_float+0x15c>
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d09e      	beq.n	8005afa <_printf_float+0xa2>
 8005bbc:	232d      	movs	r3, #45	@ 0x2d
 8005bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bc2:	e79a      	b.n	8005afa <_printf_float+0xa2>
 8005bc4:	2947      	cmp	r1, #71	@ 0x47
 8005bc6:	d1bf      	bne.n	8005b48 <_printf_float+0xf0>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1bd      	bne.n	8005b48 <_printf_float+0xf0>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e7ba      	b.n	8005b46 <_printf_float+0xee>
 8005bd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bd4:	d9dc      	bls.n	8005b90 <_printf_float+0x138>
 8005bd6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005bda:	d118      	bne.n	8005c0e <_printf_float+0x1b6>
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	6863      	ldr	r3, [r4, #4]
 8005be0:	dd0b      	ble.n	8005bfa <_printf_float+0x1a2>
 8005be2:	6121      	str	r1, [r4, #16]
 8005be4:	b913      	cbnz	r3, 8005bec <_printf_float+0x194>
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	07d0      	lsls	r0, r2, #31
 8005bea:	d502      	bpl.n	8005bf2 <_printf_float+0x19a>
 8005bec:	3301      	adds	r3, #1
 8005bee:	440b      	add	r3, r1
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	f04f 0900 	mov.w	r9, #0
 8005bf6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005bf8:	e7dc      	b.n	8005bb4 <_printf_float+0x15c>
 8005bfa:	b913      	cbnz	r3, 8005c02 <_printf_float+0x1aa>
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	07d2      	lsls	r2, r2, #31
 8005c00:	d501      	bpl.n	8005c06 <_printf_float+0x1ae>
 8005c02:	3302      	adds	r3, #2
 8005c04:	e7f4      	b.n	8005bf0 <_printf_float+0x198>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e7f2      	b.n	8005bf0 <_printf_float+0x198>
 8005c0a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c10:	4299      	cmp	r1, r3
 8005c12:	db05      	blt.n	8005c20 <_printf_float+0x1c8>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	6121      	str	r1, [r4, #16]
 8005c18:	07d8      	lsls	r0, r3, #31
 8005c1a:	d5ea      	bpl.n	8005bf2 <_printf_float+0x19a>
 8005c1c:	1c4b      	adds	r3, r1, #1
 8005c1e:	e7e7      	b.n	8005bf0 <_printf_float+0x198>
 8005c20:	2900      	cmp	r1, #0
 8005c22:	bfcc      	ite	gt
 8005c24:	2201      	movgt	r2, #1
 8005c26:	f1c1 0202 	rsble	r2, r1, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	e7e0      	b.n	8005bf0 <_printf_float+0x198>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	055a      	lsls	r2, r3, #21
 8005c32:	d407      	bmi.n	8005c44 <_printf_float+0x1ec>
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	4642      	mov	r2, r8
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d12b      	bne.n	8005c9a <_printf_float+0x242>
 8005c42:	e764      	b.n	8005b0e <_printf_float+0xb6>
 8005c44:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c48:	f240 80dc 	bls.w	8005e04 <_printf_float+0x3ac>
 8005c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c50:	2200      	movs	r2, #0
 8005c52:	2300      	movs	r3, #0
 8005c54:	f7fa fea8 	bl	80009a8 <__aeabi_dcmpeq>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d033      	beq.n	8005cc4 <_printf_float+0x26c>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	4a35      	ldr	r2, [pc, #212]	@ (8005d38 <_printf_float+0x2e0>)
 8005c64:	47b8      	blx	r7
 8005c66:	3001      	adds	r0, #1
 8005c68:	f43f af51 	beq.w	8005b0e <_printf_float+0xb6>
 8005c6c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005c70:	4543      	cmp	r3, r8
 8005c72:	db02      	blt.n	8005c7a <_printf_float+0x222>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	07d8      	lsls	r0, r3, #31
 8005c78:	d50f      	bpl.n	8005c9a <_printf_float+0x242>
 8005c7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b8      	blx	r7
 8005c84:	3001      	adds	r0, #1
 8005c86:	f43f af42 	beq.w	8005b0e <_printf_float+0xb6>
 8005c8a:	f04f 0900 	mov.w	r9, #0
 8005c8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c92:	f104 0a1a 	add.w	sl, r4, #26
 8005c96:	45c8      	cmp	r8, r9
 8005c98:	dc09      	bgt.n	8005cae <_printf_float+0x256>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	079b      	lsls	r3, r3, #30
 8005c9e:	f100 8102 	bmi.w	8005ea6 <_printf_float+0x44e>
 8005ca2:	68e0      	ldr	r0, [r4, #12]
 8005ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ca6:	4298      	cmp	r0, r3
 8005ca8:	bfb8      	it	lt
 8005caa:	4618      	movlt	r0, r3
 8005cac:	e731      	b.n	8005b12 <_printf_float+0xba>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f af28 	beq.w	8005b0e <_printf_float+0xb6>
 8005cbe:	f109 0901 	add.w	r9, r9, #1
 8005cc2:	e7e8      	b.n	8005c96 <_printf_float+0x23e>
 8005cc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	dc38      	bgt.n	8005d3c <_printf_float+0x2e4>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	4a19      	ldr	r2, [pc, #100]	@ (8005d38 <_printf_float+0x2e0>)
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f af1a 	beq.w	8005b0e <_printf_float+0xb6>
 8005cda:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005cde:	ea59 0303 	orrs.w	r3, r9, r3
 8005ce2:	d102      	bne.n	8005cea <_printf_float+0x292>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	07d9      	lsls	r1, r3, #31
 8005ce8:	d5d7      	bpl.n	8005c9a <_printf_float+0x242>
 8005cea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f af0a 	beq.w	8005b0e <_printf_float+0xb6>
 8005cfa:	f04f 0a00 	mov.w	sl, #0
 8005cfe:	f104 0b1a 	add.w	fp, r4, #26
 8005d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d04:	425b      	negs	r3, r3
 8005d06:	4553      	cmp	r3, sl
 8005d08:	dc01      	bgt.n	8005d0e <_printf_float+0x2b6>
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	e793      	b.n	8005c36 <_printf_float+0x1de>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	465a      	mov	r2, fp
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f aef8 	beq.w	8005b0e <_printf_float+0xb6>
 8005d1e:	f10a 0a01 	add.w	sl, sl, #1
 8005d22:	e7ee      	b.n	8005d02 <_printf_float+0x2aa>
 8005d24:	7fefffff 	.word	0x7fefffff
 8005d28:	08008148 	.word	0x08008148
 8005d2c:	0800814c 	.word	0x0800814c
 8005d30:	08008150 	.word	0x08008150
 8005d34:	08008154 	.word	0x08008154
 8005d38:	08008158 	.word	0x08008158
 8005d3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d3e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d42:	4553      	cmp	r3, sl
 8005d44:	bfa8      	it	ge
 8005d46:	4653      	movge	r3, sl
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	4699      	mov	r9, r3
 8005d4c:	dc36      	bgt.n	8005dbc <_printf_float+0x364>
 8005d4e:	f04f 0b00 	mov.w	fp, #0
 8005d52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d56:	f104 021a 	add.w	r2, r4, #26
 8005d5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d5e:	eba3 0309 	sub.w	r3, r3, r9
 8005d62:	455b      	cmp	r3, fp
 8005d64:	dc31      	bgt.n	8005dca <_printf_float+0x372>
 8005d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d68:	459a      	cmp	sl, r3
 8005d6a:	dc3a      	bgt.n	8005de2 <_printf_float+0x38a>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	07da      	lsls	r2, r3, #31
 8005d70:	d437      	bmi.n	8005de2 <_printf_float+0x38a>
 8005d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d74:	ebaa 0903 	sub.w	r9, sl, r3
 8005d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d7a:	ebaa 0303 	sub.w	r3, sl, r3
 8005d7e:	4599      	cmp	r9, r3
 8005d80:	bfa8      	it	ge
 8005d82:	4699      	movge	r9, r3
 8005d84:	f1b9 0f00 	cmp.w	r9, #0
 8005d88:	dc33      	bgt.n	8005df2 <_printf_float+0x39a>
 8005d8a:	f04f 0800 	mov.w	r8, #0
 8005d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d92:	f104 0b1a 	add.w	fp, r4, #26
 8005d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d98:	ebaa 0303 	sub.w	r3, sl, r3
 8005d9c:	eba3 0309 	sub.w	r3, r3, r9
 8005da0:	4543      	cmp	r3, r8
 8005da2:	f77f af7a 	ble.w	8005c9a <_printf_float+0x242>
 8005da6:	2301      	movs	r3, #1
 8005da8:	465a      	mov	r2, fp
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	f43f aeac 	beq.w	8005b0e <_printf_float+0xb6>
 8005db6:	f108 0801 	add.w	r8, r8, #1
 8005dba:	e7ec      	b.n	8005d96 <_printf_float+0x33e>
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	47b8      	blx	r7
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d1c2      	bne.n	8005d4e <_printf_float+0x2f6>
 8005dc8:	e6a1      	b.n	8005b0e <_printf_float+0xb6>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	920a      	str	r2, [sp, #40]	@ 0x28
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	f43f ae9a 	beq.w	8005b0e <_printf_float+0xb6>
 8005dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ddc:	f10b 0b01 	add.w	fp, fp, #1
 8005de0:	e7bb      	b.n	8005d5a <_printf_float+0x302>
 8005de2:	4631      	mov	r1, r6
 8005de4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	d1c0      	bne.n	8005d72 <_printf_float+0x31a>
 8005df0:	e68d      	b.n	8005b0e <_printf_float+0xb6>
 8005df2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005df4:	464b      	mov	r3, r9
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	4442      	add	r2, r8
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d1c3      	bne.n	8005d8a <_printf_float+0x332>
 8005e02:	e684      	b.n	8005b0e <_printf_float+0xb6>
 8005e04:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e08:	f1ba 0f01 	cmp.w	sl, #1
 8005e0c:	dc01      	bgt.n	8005e12 <_printf_float+0x3ba>
 8005e0e:	07db      	lsls	r3, r3, #31
 8005e10:	d536      	bpl.n	8005e80 <_printf_float+0x428>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4642      	mov	r2, r8
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f43f ae76 	beq.w	8005b0e <_printf_float+0xb6>
 8005e22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f43f ae6e 	beq.w	8005b0e <_printf_float+0xb6>
 8005e32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e36:	2200      	movs	r2, #0
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e3e:	f7fa fdb3 	bl	80009a8 <__aeabi_dcmpeq>
 8005e42:	b9c0      	cbnz	r0, 8005e76 <_printf_float+0x41e>
 8005e44:	4653      	mov	r3, sl
 8005e46:	f108 0201 	add.w	r2, r8, #1
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	d10c      	bne.n	8005e6e <_printf_float+0x416>
 8005e54:	e65b      	b.n	8005b0e <_printf_float+0xb6>
 8005e56:	2301      	movs	r3, #1
 8005e58:	465a      	mov	r2, fp
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	f43f ae54 	beq.w	8005b0e <_printf_float+0xb6>
 8005e66:	f108 0801 	add.w	r8, r8, #1
 8005e6a:	45d0      	cmp	r8, sl
 8005e6c:	dbf3      	blt.n	8005e56 <_printf_float+0x3fe>
 8005e6e:	464b      	mov	r3, r9
 8005e70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e74:	e6e0      	b.n	8005c38 <_printf_float+0x1e0>
 8005e76:	f04f 0800 	mov.w	r8, #0
 8005e7a:	f104 0b1a 	add.w	fp, r4, #26
 8005e7e:	e7f4      	b.n	8005e6a <_printf_float+0x412>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4642      	mov	r2, r8
 8005e84:	e7e1      	b.n	8005e4a <_printf_float+0x3f2>
 8005e86:	2301      	movs	r3, #1
 8005e88:	464a      	mov	r2, r9
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	f43f ae3c 	beq.w	8005b0e <_printf_float+0xb6>
 8005e96:	f108 0801 	add.w	r8, r8, #1
 8005e9a:	68e3      	ldr	r3, [r4, #12]
 8005e9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005e9e:	1a5b      	subs	r3, r3, r1
 8005ea0:	4543      	cmp	r3, r8
 8005ea2:	dcf0      	bgt.n	8005e86 <_printf_float+0x42e>
 8005ea4:	e6fd      	b.n	8005ca2 <_printf_float+0x24a>
 8005ea6:	f04f 0800 	mov.w	r8, #0
 8005eaa:	f104 0919 	add.w	r9, r4, #25
 8005eae:	e7f4      	b.n	8005e9a <_printf_float+0x442>

08005eb0 <_printf_common>:
 8005eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	4698      	mov	r8, r3
 8005eb8:	688a      	ldr	r2, [r1, #8]
 8005eba:	690b      	ldr	r3, [r1, #16]
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	bfb8      	it	lt
 8005ec2:	4613      	movlt	r3, r2
 8005ec4:	6033      	str	r3, [r6, #0]
 8005ec6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005eca:	460c      	mov	r4, r1
 8005ecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ed0:	b10a      	cbz	r2, 8005ed6 <_printf_common+0x26>
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	6033      	str	r3, [r6, #0]
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	0699      	lsls	r1, r3, #26
 8005eda:	bf42      	ittt	mi
 8005edc:	6833      	ldrmi	r3, [r6, #0]
 8005ede:	3302      	addmi	r3, #2
 8005ee0:	6033      	strmi	r3, [r6, #0]
 8005ee2:	6825      	ldr	r5, [r4, #0]
 8005ee4:	f015 0506 	ands.w	r5, r5, #6
 8005ee8:	d106      	bne.n	8005ef8 <_printf_common+0x48>
 8005eea:	f104 0a19 	add.w	sl, r4, #25
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	6832      	ldr	r2, [r6, #0]
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dc2b      	bgt.n	8005f50 <_printf_common+0xa0>
 8005ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	3b00      	subs	r3, #0
 8005f00:	bf18      	it	ne
 8005f02:	2301      	movne	r3, #1
 8005f04:	0692      	lsls	r2, r2, #26
 8005f06:	d430      	bmi.n	8005f6a <_printf_common+0xba>
 8005f08:	4641      	mov	r1, r8
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f10:	47c8      	blx	r9
 8005f12:	3001      	adds	r0, #1
 8005f14:	d023      	beq.n	8005f5e <_printf_common+0xae>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	6922      	ldr	r2, [r4, #16]
 8005f1a:	f003 0306 	and.w	r3, r3, #6
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	bf14      	ite	ne
 8005f22:	2500      	movne	r5, #0
 8005f24:	6833      	ldreq	r3, [r6, #0]
 8005f26:	f04f 0600 	mov.w	r6, #0
 8005f2a:	bf08      	it	eq
 8005f2c:	68e5      	ldreq	r5, [r4, #12]
 8005f2e:	f104 041a 	add.w	r4, r4, #26
 8005f32:	bf08      	it	eq
 8005f34:	1aed      	subeq	r5, r5, r3
 8005f36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f3a:	bf08      	it	eq
 8005f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f40:	4293      	cmp	r3, r2
 8005f42:	bfc4      	itt	gt
 8005f44:	1a9b      	subgt	r3, r3, r2
 8005f46:	18ed      	addgt	r5, r5, r3
 8005f48:	42b5      	cmp	r5, r6
 8005f4a:	d11a      	bne.n	8005f82 <_printf_common+0xd2>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e008      	b.n	8005f62 <_printf_common+0xb2>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4652      	mov	r2, sl
 8005f54:	4641      	mov	r1, r8
 8005f56:	4638      	mov	r0, r7
 8005f58:	47c8      	blx	r9
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d103      	bne.n	8005f66 <_printf_common+0xb6>
 8005f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	3501      	adds	r5, #1
 8005f68:	e7c1      	b.n	8005eee <_printf_common+0x3e>
 8005f6a:	2030      	movs	r0, #48	@ 0x30
 8005f6c:	18e1      	adds	r1, r4, r3
 8005f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f78:	4422      	add	r2, r4
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f80:	e7c2      	b.n	8005f08 <_printf_common+0x58>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4622      	mov	r2, r4
 8005f86:	4641      	mov	r1, r8
 8005f88:	4638      	mov	r0, r7
 8005f8a:	47c8      	blx	r9
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d0e6      	beq.n	8005f5e <_printf_common+0xae>
 8005f90:	3601      	adds	r6, #1
 8005f92:	e7d9      	b.n	8005f48 <_printf_common+0x98>

08005f94 <_printf_i>:
 8005f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	7e0f      	ldrb	r7, [r1, #24]
 8005f9a:	4691      	mov	r9, r2
 8005f9c:	2f78      	cmp	r7, #120	@ 0x78
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	469a      	mov	sl, r3
 8005fa4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005faa:	d807      	bhi.n	8005fbc <_printf_i+0x28>
 8005fac:	2f62      	cmp	r7, #98	@ 0x62
 8005fae:	d80a      	bhi.n	8005fc6 <_printf_i+0x32>
 8005fb0:	2f00      	cmp	r7, #0
 8005fb2:	f000 80d3 	beq.w	800615c <_printf_i+0x1c8>
 8005fb6:	2f58      	cmp	r7, #88	@ 0x58
 8005fb8:	f000 80ba 	beq.w	8006130 <_printf_i+0x19c>
 8005fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fc4:	e03a      	b.n	800603c <_printf_i+0xa8>
 8005fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fca:	2b15      	cmp	r3, #21
 8005fcc:	d8f6      	bhi.n	8005fbc <_printf_i+0x28>
 8005fce:	a101      	add	r1, pc, #4	@ (adr r1, 8005fd4 <_printf_i+0x40>)
 8005fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fd4:	0800602d 	.word	0x0800602d
 8005fd8:	08006041 	.word	0x08006041
 8005fdc:	08005fbd 	.word	0x08005fbd
 8005fe0:	08005fbd 	.word	0x08005fbd
 8005fe4:	08005fbd 	.word	0x08005fbd
 8005fe8:	08005fbd 	.word	0x08005fbd
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	08005fbd 	.word	0x08005fbd
 8005ff4:	08005fbd 	.word	0x08005fbd
 8005ff8:	08005fbd 	.word	0x08005fbd
 8005ffc:	08005fbd 	.word	0x08005fbd
 8006000:	08006143 	.word	0x08006143
 8006004:	0800606b 	.word	0x0800606b
 8006008:	080060fd 	.word	0x080060fd
 800600c:	08005fbd 	.word	0x08005fbd
 8006010:	08005fbd 	.word	0x08005fbd
 8006014:	08006165 	.word	0x08006165
 8006018:	08005fbd 	.word	0x08005fbd
 800601c:	0800606b 	.word	0x0800606b
 8006020:	08005fbd 	.word	0x08005fbd
 8006024:	08005fbd 	.word	0x08005fbd
 8006028:	08006105 	.word	0x08006105
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	1d1a      	adds	r2, r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6032      	str	r2, [r6, #0]
 8006034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800603c:	2301      	movs	r3, #1
 800603e:	e09e      	b.n	800617e <_printf_i+0x1ea>
 8006040:	6833      	ldr	r3, [r6, #0]
 8006042:	6820      	ldr	r0, [r4, #0]
 8006044:	1d19      	adds	r1, r3, #4
 8006046:	6031      	str	r1, [r6, #0]
 8006048:	0606      	lsls	r6, r0, #24
 800604a:	d501      	bpl.n	8006050 <_printf_i+0xbc>
 800604c:	681d      	ldr	r5, [r3, #0]
 800604e:	e003      	b.n	8006058 <_printf_i+0xc4>
 8006050:	0645      	lsls	r5, r0, #25
 8006052:	d5fb      	bpl.n	800604c <_printf_i+0xb8>
 8006054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006058:	2d00      	cmp	r5, #0
 800605a:	da03      	bge.n	8006064 <_printf_i+0xd0>
 800605c:	232d      	movs	r3, #45	@ 0x2d
 800605e:	426d      	negs	r5, r5
 8006060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006064:	230a      	movs	r3, #10
 8006066:	4859      	ldr	r0, [pc, #356]	@ (80061cc <_printf_i+0x238>)
 8006068:	e011      	b.n	800608e <_printf_i+0xfa>
 800606a:	6821      	ldr	r1, [r4, #0]
 800606c:	6833      	ldr	r3, [r6, #0]
 800606e:	0608      	lsls	r0, r1, #24
 8006070:	f853 5b04 	ldr.w	r5, [r3], #4
 8006074:	d402      	bmi.n	800607c <_printf_i+0xe8>
 8006076:	0649      	lsls	r1, r1, #25
 8006078:	bf48      	it	mi
 800607a:	b2ad      	uxthmi	r5, r5
 800607c:	2f6f      	cmp	r7, #111	@ 0x6f
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	bf14      	ite	ne
 8006082:	230a      	movne	r3, #10
 8006084:	2308      	moveq	r3, #8
 8006086:	4851      	ldr	r0, [pc, #324]	@ (80061cc <_printf_i+0x238>)
 8006088:	2100      	movs	r1, #0
 800608a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800608e:	6866      	ldr	r6, [r4, #4]
 8006090:	2e00      	cmp	r6, #0
 8006092:	bfa8      	it	ge
 8006094:	6821      	ldrge	r1, [r4, #0]
 8006096:	60a6      	str	r6, [r4, #8]
 8006098:	bfa4      	itt	ge
 800609a:	f021 0104 	bicge.w	r1, r1, #4
 800609e:	6021      	strge	r1, [r4, #0]
 80060a0:	b90d      	cbnz	r5, 80060a6 <_printf_i+0x112>
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	d04b      	beq.n	800613e <_printf_i+0x1aa>
 80060a6:	4616      	mov	r6, r2
 80060a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80060ac:	fb03 5711 	mls	r7, r3, r1, r5
 80060b0:	5dc7      	ldrb	r7, [r0, r7]
 80060b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060b6:	462f      	mov	r7, r5
 80060b8:	42bb      	cmp	r3, r7
 80060ba:	460d      	mov	r5, r1
 80060bc:	d9f4      	bls.n	80060a8 <_printf_i+0x114>
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d10b      	bne.n	80060da <_printf_i+0x146>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	07df      	lsls	r7, r3, #31
 80060c6:	d508      	bpl.n	80060da <_printf_i+0x146>
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	6861      	ldr	r1, [r4, #4]
 80060cc:	4299      	cmp	r1, r3
 80060ce:	bfde      	ittt	le
 80060d0:	2330      	movle	r3, #48	@ 0x30
 80060d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060da:	1b92      	subs	r2, r2, r6
 80060dc:	6122      	str	r2, [r4, #16]
 80060de:	464b      	mov	r3, r9
 80060e0:	4621      	mov	r1, r4
 80060e2:	4640      	mov	r0, r8
 80060e4:	f8cd a000 	str.w	sl, [sp]
 80060e8:	aa03      	add	r2, sp, #12
 80060ea:	f7ff fee1 	bl	8005eb0 <_printf_common>
 80060ee:	3001      	adds	r0, #1
 80060f0:	d14a      	bne.n	8006188 <_printf_i+0x1f4>
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295
 80060f6:	b004      	add	sp, #16
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	f043 0320 	orr.w	r3, r3, #32
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	2778      	movs	r7, #120	@ 0x78
 8006106:	4832      	ldr	r0, [pc, #200]	@ (80061d0 <_printf_i+0x23c>)
 8006108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	6831      	ldr	r1, [r6, #0]
 8006110:	061f      	lsls	r7, r3, #24
 8006112:	f851 5b04 	ldr.w	r5, [r1], #4
 8006116:	d402      	bmi.n	800611e <_printf_i+0x18a>
 8006118:	065f      	lsls	r7, r3, #25
 800611a:	bf48      	it	mi
 800611c:	b2ad      	uxthmi	r5, r5
 800611e:	6031      	str	r1, [r6, #0]
 8006120:	07d9      	lsls	r1, r3, #31
 8006122:	bf44      	itt	mi
 8006124:	f043 0320 	orrmi.w	r3, r3, #32
 8006128:	6023      	strmi	r3, [r4, #0]
 800612a:	b11d      	cbz	r5, 8006134 <_printf_i+0x1a0>
 800612c:	2310      	movs	r3, #16
 800612e:	e7ab      	b.n	8006088 <_printf_i+0xf4>
 8006130:	4826      	ldr	r0, [pc, #152]	@ (80061cc <_printf_i+0x238>)
 8006132:	e7e9      	b.n	8006108 <_printf_i+0x174>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	f023 0320 	bic.w	r3, r3, #32
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	e7f6      	b.n	800612c <_printf_i+0x198>
 800613e:	4616      	mov	r6, r2
 8006140:	e7bd      	b.n	80060be <_printf_i+0x12a>
 8006142:	6833      	ldr	r3, [r6, #0]
 8006144:	6825      	ldr	r5, [r4, #0]
 8006146:	1d18      	adds	r0, r3, #4
 8006148:	6961      	ldr	r1, [r4, #20]
 800614a:	6030      	str	r0, [r6, #0]
 800614c:	062e      	lsls	r6, r5, #24
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	d501      	bpl.n	8006156 <_printf_i+0x1c2>
 8006152:	6019      	str	r1, [r3, #0]
 8006154:	e002      	b.n	800615c <_printf_i+0x1c8>
 8006156:	0668      	lsls	r0, r5, #25
 8006158:	d5fb      	bpl.n	8006152 <_printf_i+0x1be>
 800615a:	8019      	strh	r1, [r3, #0]
 800615c:	2300      	movs	r3, #0
 800615e:	4616      	mov	r6, r2
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	e7bc      	b.n	80060de <_printf_i+0x14a>
 8006164:	6833      	ldr	r3, [r6, #0]
 8006166:	2100      	movs	r1, #0
 8006168:	1d1a      	adds	r2, r3, #4
 800616a:	6032      	str	r2, [r6, #0]
 800616c:	681e      	ldr	r6, [r3, #0]
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	4630      	mov	r0, r6
 8006172:	f000 f9d6 	bl	8006522 <memchr>
 8006176:	b108      	cbz	r0, 800617c <_printf_i+0x1e8>
 8006178:	1b80      	subs	r0, r0, r6
 800617a:	6060      	str	r0, [r4, #4]
 800617c:	6863      	ldr	r3, [r4, #4]
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	2300      	movs	r3, #0
 8006182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006186:	e7aa      	b.n	80060de <_printf_i+0x14a>
 8006188:	4632      	mov	r2, r6
 800618a:	4649      	mov	r1, r9
 800618c:	4640      	mov	r0, r8
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	47d0      	blx	sl
 8006192:	3001      	adds	r0, #1
 8006194:	d0ad      	beq.n	80060f2 <_printf_i+0x15e>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	079b      	lsls	r3, r3, #30
 800619a:	d413      	bmi.n	80061c4 <_printf_i+0x230>
 800619c:	68e0      	ldr	r0, [r4, #12]
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	4298      	cmp	r0, r3
 80061a2:	bfb8      	it	lt
 80061a4:	4618      	movlt	r0, r3
 80061a6:	e7a6      	b.n	80060f6 <_printf_i+0x162>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4632      	mov	r2, r6
 80061ac:	4649      	mov	r1, r9
 80061ae:	4640      	mov	r0, r8
 80061b0:	47d0      	blx	sl
 80061b2:	3001      	adds	r0, #1
 80061b4:	d09d      	beq.n	80060f2 <_printf_i+0x15e>
 80061b6:	3501      	adds	r5, #1
 80061b8:	68e3      	ldr	r3, [r4, #12]
 80061ba:	9903      	ldr	r1, [sp, #12]
 80061bc:	1a5b      	subs	r3, r3, r1
 80061be:	42ab      	cmp	r3, r5
 80061c0:	dcf2      	bgt.n	80061a8 <_printf_i+0x214>
 80061c2:	e7eb      	b.n	800619c <_printf_i+0x208>
 80061c4:	2500      	movs	r5, #0
 80061c6:	f104 0619 	add.w	r6, r4, #25
 80061ca:	e7f5      	b.n	80061b8 <_printf_i+0x224>
 80061cc:	0800815a 	.word	0x0800815a
 80061d0:	0800816b 	.word	0x0800816b

080061d4 <std>:
 80061d4:	2300      	movs	r3, #0
 80061d6:	b510      	push	{r4, lr}
 80061d8:	4604      	mov	r4, r0
 80061da:	e9c0 3300 	strd	r3, r3, [r0]
 80061de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061e2:	6083      	str	r3, [r0, #8]
 80061e4:	8181      	strh	r1, [r0, #12]
 80061e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80061e8:	81c2      	strh	r2, [r0, #14]
 80061ea:	6183      	str	r3, [r0, #24]
 80061ec:	4619      	mov	r1, r3
 80061ee:	2208      	movs	r2, #8
 80061f0:	305c      	adds	r0, #92	@ 0x5c
 80061f2:	f000 f906 	bl	8006402 <memset>
 80061f6:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <std+0x58>)
 80061f8:	6224      	str	r4, [r4, #32]
 80061fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80061fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006230 <std+0x5c>)
 80061fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006200:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <std+0x60>)
 8006202:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006204:	4b0c      	ldr	r3, [pc, #48]	@ (8006238 <std+0x64>)
 8006206:	6323      	str	r3, [r4, #48]	@ 0x30
 8006208:	4b0c      	ldr	r3, [pc, #48]	@ (800623c <std+0x68>)
 800620a:	429c      	cmp	r4, r3
 800620c:	d006      	beq.n	800621c <std+0x48>
 800620e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006212:	4294      	cmp	r4, r2
 8006214:	d002      	beq.n	800621c <std+0x48>
 8006216:	33d0      	adds	r3, #208	@ 0xd0
 8006218:	429c      	cmp	r4, r3
 800621a:	d105      	bne.n	8006228 <std+0x54>
 800621c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006224:	f000 b97a 	b.w	800651c <__retarget_lock_init_recursive>
 8006228:	bd10      	pop	{r4, pc}
 800622a:	bf00      	nop
 800622c:	0800637d 	.word	0x0800637d
 8006230:	0800639f 	.word	0x0800639f
 8006234:	080063d7 	.word	0x080063d7
 8006238:	080063fb 	.word	0x080063fb
 800623c:	200005c8 	.word	0x200005c8

08006240 <stdio_exit_handler>:
 8006240:	4a02      	ldr	r2, [pc, #8]	@ (800624c <stdio_exit_handler+0xc>)
 8006242:	4903      	ldr	r1, [pc, #12]	@ (8006250 <stdio_exit_handler+0x10>)
 8006244:	4803      	ldr	r0, [pc, #12]	@ (8006254 <stdio_exit_handler+0x14>)
 8006246:	f000 b869 	b.w	800631c <_fwalk_sglue>
 800624a:	bf00      	nop
 800624c:	20000018 	.word	0x20000018
 8006250:	08007d21 	.word	0x08007d21
 8006254:	20000028 	.word	0x20000028

08006258 <cleanup_stdio>:
 8006258:	6841      	ldr	r1, [r0, #4]
 800625a:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <cleanup_stdio+0x34>)
 800625c:	b510      	push	{r4, lr}
 800625e:	4299      	cmp	r1, r3
 8006260:	4604      	mov	r4, r0
 8006262:	d001      	beq.n	8006268 <cleanup_stdio+0x10>
 8006264:	f001 fd5c 	bl	8007d20 <_fflush_r>
 8006268:	68a1      	ldr	r1, [r4, #8]
 800626a:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <cleanup_stdio+0x38>)
 800626c:	4299      	cmp	r1, r3
 800626e:	d002      	beq.n	8006276 <cleanup_stdio+0x1e>
 8006270:	4620      	mov	r0, r4
 8006272:	f001 fd55 	bl	8007d20 <_fflush_r>
 8006276:	68e1      	ldr	r1, [r4, #12]
 8006278:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <cleanup_stdio+0x3c>)
 800627a:	4299      	cmp	r1, r3
 800627c:	d004      	beq.n	8006288 <cleanup_stdio+0x30>
 800627e:	4620      	mov	r0, r4
 8006280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006284:	f001 bd4c 	b.w	8007d20 <_fflush_r>
 8006288:	bd10      	pop	{r4, pc}
 800628a:	bf00      	nop
 800628c:	200005c8 	.word	0x200005c8
 8006290:	20000630 	.word	0x20000630
 8006294:	20000698 	.word	0x20000698

08006298 <global_stdio_init.part.0>:
 8006298:	b510      	push	{r4, lr}
 800629a:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <global_stdio_init.part.0+0x30>)
 800629c:	4c0b      	ldr	r4, [pc, #44]	@ (80062cc <global_stdio_init.part.0+0x34>)
 800629e:	4a0c      	ldr	r2, [pc, #48]	@ (80062d0 <global_stdio_init.part.0+0x38>)
 80062a0:	4620      	mov	r0, r4
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	2104      	movs	r1, #4
 80062a6:	2200      	movs	r2, #0
 80062a8:	f7ff ff94 	bl	80061d4 <std>
 80062ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062b0:	2201      	movs	r2, #1
 80062b2:	2109      	movs	r1, #9
 80062b4:	f7ff ff8e 	bl	80061d4 <std>
 80062b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062bc:	2202      	movs	r2, #2
 80062be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c2:	2112      	movs	r1, #18
 80062c4:	f7ff bf86 	b.w	80061d4 <std>
 80062c8:	20000700 	.word	0x20000700
 80062cc:	200005c8 	.word	0x200005c8
 80062d0:	08006241 	.word	0x08006241

080062d4 <__sfp_lock_acquire>:
 80062d4:	4801      	ldr	r0, [pc, #4]	@ (80062dc <__sfp_lock_acquire+0x8>)
 80062d6:	f000 b922 	b.w	800651e <__retarget_lock_acquire_recursive>
 80062da:	bf00      	nop
 80062dc:	20000709 	.word	0x20000709

080062e0 <__sfp_lock_release>:
 80062e0:	4801      	ldr	r0, [pc, #4]	@ (80062e8 <__sfp_lock_release+0x8>)
 80062e2:	f000 b91d 	b.w	8006520 <__retarget_lock_release_recursive>
 80062e6:	bf00      	nop
 80062e8:	20000709 	.word	0x20000709

080062ec <__sinit>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	4604      	mov	r4, r0
 80062f0:	f7ff fff0 	bl	80062d4 <__sfp_lock_acquire>
 80062f4:	6a23      	ldr	r3, [r4, #32]
 80062f6:	b11b      	cbz	r3, 8006300 <__sinit+0x14>
 80062f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fc:	f7ff bff0 	b.w	80062e0 <__sfp_lock_release>
 8006300:	4b04      	ldr	r3, [pc, #16]	@ (8006314 <__sinit+0x28>)
 8006302:	6223      	str	r3, [r4, #32]
 8006304:	4b04      	ldr	r3, [pc, #16]	@ (8006318 <__sinit+0x2c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f5      	bne.n	80062f8 <__sinit+0xc>
 800630c:	f7ff ffc4 	bl	8006298 <global_stdio_init.part.0>
 8006310:	e7f2      	b.n	80062f8 <__sinit+0xc>
 8006312:	bf00      	nop
 8006314:	08006259 	.word	0x08006259
 8006318:	20000700 	.word	0x20000700

0800631c <_fwalk_sglue>:
 800631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006320:	4607      	mov	r7, r0
 8006322:	4688      	mov	r8, r1
 8006324:	4614      	mov	r4, r2
 8006326:	2600      	movs	r6, #0
 8006328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800632c:	f1b9 0901 	subs.w	r9, r9, #1
 8006330:	d505      	bpl.n	800633e <_fwalk_sglue+0x22>
 8006332:	6824      	ldr	r4, [r4, #0]
 8006334:	2c00      	cmp	r4, #0
 8006336:	d1f7      	bne.n	8006328 <_fwalk_sglue+0xc>
 8006338:	4630      	mov	r0, r6
 800633a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d907      	bls.n	8006354 <_fwalk_sglue+0x38>
 8006344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006348:	3301      	adds	r3, #1
 800634a:	d003      	beq.n	8006354 <_fwalk_sglue+0x38>
 800634c:	4629      	mov	r1, r5
 800634e:	4638      	mov	r0, r7
 8006350:	47c0      	blx	r8
 8006352:	4306      	orrs	r6, r0
 8006354:	3568      	adds	r5, #104	@ 0x68
 8006356:	e7e9      	b.n	800632c <_fwalk_sglue+0x10>

08006358 <iprintf>:
 8006358:	b40f      	push	{r0, r1, r2, r3}
 800635a:	b507      	push	{r0, r1, r2, lr}
 800635c:	4906      	ldr	r1, [pc, #24]	@ (8006378 <iprintf+0x20>)
 800635e:	ab04      	add	r3, sp, #16
 8006360:	6808      	ldr	r0, [r1, #0]
 8006362:	f853 2b04 	ldr.w	r2, [r3], #4
 8006366:	6881      	ldr	r1, [r0, #8]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	f001 fb41 	bl	80079f0 <_vfiprintf_r>
 800636e:	b003      	add	sp, #12
 8006370:	f85d eb04 	ldr.w	lr, [sp], #4
 8006374:	b004      	add	sp, #16
 8006376:	4770      	bx	lr
 8006378:	20000024 	.word	0x20000024

0800637c <__sread>:
 800637c:	b510      	push	{r4, lr}
 800637e:	460c      	mov	r4, r1
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	f000 f86c 	bl	8006460 <_read_r>
 8006388:	2800      	cmp	r0, #0
 800638a:	bfab      	itete	ge
 800638c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800638e:	89a3      	ldrhlt	r3, [r4, #12]
 8006390:	181b      	addge	r3, r3, r0
 8006392:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006396:	bfac      	ite	ge
 8006398:	6563      	strge	r3, [r4, #84]	@ 0x54
 800639a:	81a3      	strhlt	r3, [r4, #12]
 800639c:	bd10      	pop	{r4, pc}

0800639e <__swrite>:
 800639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	461f      	mov	r7, r3
 80063a4:	898b      	ldrh	r3, [r1, #12]
 80063a6:	4605      	mov	r5, r0
 80063a8:	05db      	lsls	r3, r3, #23
 80063aa:	460c      	mov	r4, r1
 80063ac:	4616      	mov	r6, r2
 80063ae:	d505      	bpl.n	80063bc <__swrite+0x1e>
 80063b0:	2302      	movs	r3, #2
 80063b2:	2200      	movs	r2, #0
 80063b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b8:	f000 f840 	bl	800643c <_lseek_r>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	4632      	mov	r2, r6
 80063c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	4628      	mov	r0, r5
 80063c8:	463b      	mov	r3, r7
 80063ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	f000 b867 	b.w	80064a4 <_write_r>

080063d6 <__sseek>:
 80063d6:	b510      	push	{r4, lr}
 80063d8:	460c      	mov	r4, r1
 80063da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063de:	f000 f82d 	bl	800643c <_lseek_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	bf15      	itete	ne
 80063e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063f2:	81a3      	strheq	r3, [r4, #12]
 80063f4:	bf18      	it	ne
 80063f6:	81a3      	strhne	r3, [r4, #12]
 80063f8:	bd10      	pop	{r4, pc}

080063fa <__sclose>:
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 b80d 	b.w	800641c <_close_r>

08006402 <memset>:
 8006402:	4603      	mov	r3, r0
 8006404:	4402      	add	r2, r0
 8006406:	4293      	cmp	r3, r2
 8006408:	d100      	bne.n	800640c <memset+0xa>
 800640a:	4770      	bx	lr
 800640c:	f803 1b01 	strb.w	r1, [r3], #1
 8006410:	e7f9      	b.n	8006406 <memset+0x4>
	...

08006414 <_localeconv_r>:
 8006414:	4800      	ldr	r0, [pc, #0]	@ (8006418 <_localeconv_r+0x4>)
 8006416:	4770      	bx	lr
 8006418:	20000164 	.word	0x20000164

0800641c <_close_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	2300      	movs	r3, #0
 8006420:	4d05      	ldr	r5, [pc, #20]	@ (8006438 <_close_r+0x1c>)
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	f7fc fb98 	bl	8002b5c <_close>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_close_r+0x1a>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_close_r+0x1a>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20000704 	.word	0x20000704

0800643c <_lseek_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4604      	mov	r4, r0
 8006440:	4608      	mov	r0, r1
 8006442:	4611      	mov	r1, r2
 8006444:	2200      	movs	r2, #0
 8006446:	4d05      	ldr	r5, [pc, #20]	@ (800645c <_lseek_r+0x20>)
 8006448:	602a      	str	r2, [r5, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	f7fc fb90 	bl	8002b70 <_lseek>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_lseek_r+0x1e>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_lseek_r+0x1e>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	20000704 	.word	0x20000704

08006460 <_read_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	4611      	mov	r1, r2
 8006468:	2200      	movs	r2, #0
 800646a:	4d05      	ldr	r5, [pc, #20]	@ (8006480 <_read_r+0x20>)
 800646c:	602a      	str	r2, [r5, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	f7fc fb64 	bl	8002b3c <_read>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_read_r+0x1e>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_read_r+0x1e>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	20000704 	.word	0x20000704

08006484 <_sbrk_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	2300      	movs	r3, #0
 8006488:	4d05      	ldr	r5, [pc, #20]	@ (80064a0 <_sbrk_r+0x1c>)
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	602b      	str	r3, [r5, #0]
 8006490:	f7fc fb70 	bl	8002b74 <_sbrk>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_sbrk_r+0x1a>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_sbrk_r+0x1a>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	20000704 	.word	0x20000704

080064a4 <_write_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	2200      	movs	r2, #0
 80064ae:	4d05      	ldr	r5, [pc, #20]	@ (80064c4 <_write_r+0x20>)
 80064b0:	602a      	str	r2, [r5, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f7fb fd64 	bl	8001f80 <_write>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_write_r+0x1e>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_write_r+0x1e>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	20000704 	.word	0x20000704

080064c8 <__errno>:
 80064c8:	4b01      	ldr	r3, [pc, #4]	@ (80064d0 <__errno+0x8>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000024 	.word	0x20000024

080064d4 <__libc_init_array>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	2600      	movs	r6, #0
 80064d8:	4d0c      	ldr	r5, [pc, #48]	@ (800650c <__libc_init_array+0x38>)
 80064da:	4c0d      	ldr	r4, [pc, #52]	@ (8006510 <__libc_init_array+0x3c>)
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	42a6      	cmp	r6, r4
 80064e2:	d109      	bne.n	80064f8 <__libc_init_array+0x24>
 80064e4:	f001 fe0c 	bl	8008100 <_init>
 80064e8:	2600      	movs	r6, #0
 80064ea:	4d0a      	ldr	r5, [pc, #40]	@ (8006514 <__libc_init_array+0x40>)
 80064ec:	4c0a      	ldr	r4, [pc, #40]	@ (8006518 <__libc_init_array+0x44>)
 80064ee:	1b64      	subs	r4, r4, r5
 80064f0:	10a4      	asrs	r4, r4, #2
 80064f2:	42a6      	cmp	r6, r4
 80064f4:	d105      	bne.n	8006502 <__libc_init_array+0x2e>
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fc:	4798      	blx	r3
 80064fe:	3601      	adds	r6, #1
 8006500:	e7ee      	b.n	80064e0 <__libc_init_array+0xc>
 8006502:	f855 3b04 	ldr.w	r3, [r5], #4
 8006506:	4798      	blx	r3
 8006508:	3601      	adds	r6, #1
 800650a:	e7f2      	b.n	80064f2 <__libc_init_array+0x1e>
 800650c:	080084c0 	.word	0x080084c0
 8006510:	080084c0 	.word	0x080084c0
 8006514:	080084c0 	.word	0x080084c0
 8006518:	080084c4 	.word	0x080084c4

0800651c <__retarget_lock_init_recursive>:
 800651c:	4770      	bx	lr

0800651e <__retarget_lock_acquire_recursive>:
 800651e:	4770      	bx	lr

08006520 <__retarget_lock_release_recursive>:
 8006520:	4770      	bx	lr

08006522 <memchr>:
 8006522:	4603      	mov	r3, r0
 8006524:	b510      	push	{r4, lr}
 8006526:	b2c9      	uxtb	r1, r1
 8006528:	4402      	add	r2, r0
 800652a:	4293      	cmp	r3, r2
 800652c:	4618      	mov	r0, r3
 800652e:	d101      	bne.n	8006534 <memchr+0x12>
 8006530:	2000      	movs	r0, #0
 8006532:	e003      	b.n	800653c <memchr+0x1a>
 8006534:	7804      	ldrb	r4, [r0, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	428c      	cmp	r4, r1
 800653a:	d1f6      	bne.n	800652a <memchr+0x8>
 800653c:	bd10      	pop	{r4, pc}

0800653e <memcpy>:
 800653e:	440a      	add	r2, r1
 8006540:	4291      	cmp	r1, r2
 8006542:	f100 33ff 	add.w	r3, r0, #4294967295
 8006546:	d100      	bne.n	800654a <memcpy+0xc>
 8006548:	4770      	bx	lr
 800654a:	b510      	push	{r4, lr}
 800654c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006550:	4291      	cmp	r1, r2
 8006552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006556:	d1f9      	bne.n	800654c <memcpy+0xe>
 8006558:	bd10      	pop	{r4, pc}

0800655a <quorem>:
 800655a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655e:	6903      	ldr	r3, [r0, #16]
 8006560:	690c      	ldr	r4, [r1, #16]
 8006562:	4607      	mov	r7, r0
 8006564:	42a3      	cmp	r3, r4
 8006566:	db7e      	blt.n	8006666 <quorem+0x10c>
 8006568:	3c01      	subs	r4, #1
 800656a:	00a3      	lsls	r3, r4, #2
 800656c:	f100 0514 	add.w	r5, r0, #20
 8006570:	f101 0814 	add.w	r8, r1, #20
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006580:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006584:	3301      	adds	r3, #1
 8006586:	429a      	cmp	r2, r3
 8006588:	fbb2 f6f3 	udiv	r6, r2, r3
 800658c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006590:	d32e      	bcc.n	80065f0 <quorem+0x96>
 8006592:	f04f 0a00 	mov.w	sl, #0
 8006596:	46c4      	mov	ip, r8
 8006598:	46ae      	mov	lr, r5
 800659a:	46d3      	mov	fp, sl
 800659c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065a0:	b298      	uxth	r0, r3
 80065a2:	fb06 a000 	mla	r0, r6, r0, sl
 80065a6:	0c1b      	lsrs	r3, r3, #16
 80065a8:	0c02      	lsrs	r2, r0, #16
 80065aa:	fb06 2303 	mla	r3, r6, r3, r2
 80065ae:	f8de 2000 	ldr.w	r2, [lr]
 80065b2:	b280      	uxth	r0, r0
 80065b4:	b292      	uxth	r2, r2
 80065b6:	1a12      	subs	r2, r2, r0
 80065b8:	445a      	add	r2, fp
 80065ba:	f8de 0000 	ldr.w	r0, [lr]
 80065be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80065c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80065cc:	b292      	uxth	r2, r2
 80065ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80065d2:	45e1      	cmp	r9, ip
 80065d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80065d8:	f84e 2b04 	str.w	r2, [lr], #4
 80065dc:	d2de      	bcs.n	800659c <quorem+0x42>
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	58eb      	ldr	r3, [r5, r3]
 80065e2:	b92b      	cbnz	r3, 80065f0 <quorem+0x96>
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	3b04      	subs	r3, #4
 80065e8:	429d      	cmp	r5, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	d32f      	bcc.n	800664e <quorem+0xf4>
 80065ee:	613c      	str	r4, [r7, #16]
 80065f0:	4638      	mov	r0, r7
 80065f2:	f001 f8c5 	bl	8007780 <__mcmp>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	db25      	blt.n	8006646 <quorem+0xec>
 80065fa:	4629      	mov	r1, r5
 80065fc:	2000      	movs	r0, #0
 80065fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8006602:	f8d1 c000 	ldr.w	ip, [r1]
 8006606:	fa1f fe82 	uxth.w	lr, r2
 800660a:	fa1f f38c 	uxth.w	r3, ip
 800660e:	eba3 030e 	sub.w	r3, r3, lr
 8006612:	4403      	add	r3, r0
 8006614:	0c12      	lsrs	r2, r2, #16
 8006616:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800661a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800661e:	b29b      	uxth	r3, r3
 8006620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006624:	45c1      	cmp	r9, r8
 8006626:	ea4f 4022 	mov.w	r0, r2, asr #16
 800662a:	f841 3b04 	str.w	r3, [r1], #4
 800662e:	d2e6      	bcs.n	80065fe <quorem+0xa4>
 8006630:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006634:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006638:	b922      	cbnz	r2, 8006644 <quorem+0xea>
 800663a:	3b04      	subs	r3, #4
 800663c:	429d      	cmp	r5, r3
 800663e:	461a      	mov	r2, r3
 8006640:	d30b      	bcc.n	800665a <quorem+0x100>
 8006642:	613c      	str	r4, [r7, #16]
 8006644:	3601      	adds	r6, #1
 8006646:	4630      	mov	r0, r6
 8006648:	b003      	add	sp, #12
 800664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	3b04      	subs	r3, #4
 8006652:	2a00      	cmp	r2, #0
 8006654:	d1cb      	bne.n	80065ee <quorem+0x94>
 8006656:	3c01      	subs	r4, #1
 8006658:	e7c6      	b.n	80065e8 <quorem+0x8e>
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	3b04      	subs	r3, #4
 800665e:	2a00      	cmp	r2, #0
 8006660:	d1ef      	bne.n	8006642 <quorem+0xe8>
 8006662:	3c01      	subs	r4, #1
 8006664:	e7ea      	b.n	800663c <quorem+0xe2>
 8006666:	2000      	movs	r0, #0
 8006668:	e7ee      	b.n	8006648 <quorem+0xee>
 800666a:	0000      	movs	r0, r0
 800666c:	0000      	movs	r0, r0
	...

08006670 <_dtoa_r>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	4614      	mov	r4, r2
 8006676:	461d      	mov	r5, r3
 8006678:	69c7      	ldr	r7, [r0, #28]
 800667a:	b097      	sub	sp, #92	@ 0x5c
 800667c:	4683      	mov	fp, r0
 800667e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006682:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006684:	b97f      	cbnz	r7, 80066a6 <_dtoa_r+0x36>
 8006686:	2010      	movs	r0, #16
 8006688:	f7ff f85c 	bl	8005744 <malloc>
 800668c:	4602      	mov	r2, r0
 800668e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006692:	b920      	cbnz	r0, 800669e <_dtoa_r+0x2e>
 8006694:	21ef      	movs	r1, #239	@ 0xef
 8006696:	4ba8      	ldr	r3, [pc, #672]	@ (8006938 <_dtoa_r+0x2c8>)
 8006698:	48a8      	ldr	r0, [pc, #672]	@ (800693c <_dtoa_r+0x2cc>)
 800669a:	f001 fbfd 	bl	8007e98 <__assert_func>
 800669e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066a2:	6007      	str	r7, [r0, #0]
 80066a4:	60c7      	str	r7, [r0, #12]
 80066a6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066aa:	6819      	ldr	r1, [r3, #0]
 80066ac:	b159      	cbz	r1, 80066c6 <_dtoa_r+0x56>
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	2301      	movs	r3, #1
 80066b2:	4093      	lsls	r3, r2
 80066b4:	604a      	str	r2, [r1, #4]
 80066b6:	608b      	str	r3, [r1, #8]
 80066b8:	4658      	mov	r0, fp
 80066ba:	f000 fe29 	bl	8007310 <_Bfree>
 80066be:	2200      	movs	r2, #0
 80066c0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	1e2b      	subs	r3, r5, #0
 80066c8:	bfaf      	iteee	ge
 80066ca:	2300      	movge	r3, #0
 80066cc:	2201      	movlt	r2, #1
 80066ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80066d2:	9303      	strlt	r3, [sp, #12]
 80066d4:	bfa8      	it	ge
 80066d6:	6033      	strge	r3, [r6, #0]
 80066d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80066dc:	4b98      	ldr	r3, [pc, #608]	@ (8006940 <_dtoa_r+0x2d0>)
 80066de:	bfb8      	it	lt
 80066e0:	6032      	strlt	r2, [r6, #0]
 80066e2:	ea33 0308 	bics.w	r3, r3, r8
 80066e6:	d112      	bne.n	800670e <_dtoa_r+0x9e>
 80066e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80066ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066f4:	4323      	orrs	r3, r4
 80066f6:	f000 8550 	beq.w	800719a <_dtoa_r+0xb2a>
 80066fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066fc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006944 <_dtoa_r+0x2d4>
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8552 	beq.w	80071aa <_dtoa_r+0xb3a>
 8006706:	f10a 0303 	add.w	r3, sl, #3
 800670a:	f000 bd4c 	b.w	80071a6 <_dtoa_r+0xb36>
 800670e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006712:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006716:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800671a:	2200      	movs	r2, #0
 800671c:	2300      	movs	r3, #0
 800671e:	f7fa f943 	bl	80009a8 <__aeabi_dcmpeq>
 8006722:	4607      	mov	r7, r0
 8006724:	b158      	cbz	r0, 800673e <_dtoa_r+0xce>
 8006726:	2301      	movs	r3, #1
 8006728:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800672e:	b113      	cbz	r3, 8006736 <_dtoa_r+0xc6>
 8006730:	4b85      	ldr	r3, [pc, #532]	@ (8006948 <_dtoa_r+0x2d8>)
 8006732:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800694c <_dtoa_r+0x2dc>
 800673a:	f000 bd36 	b.w	80071aa <_dtoa_r+0xb3a>
 800673e:	ab14      	add	r3, sp, #80	@ 0x50
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	ab15      	add	r3, sp, #84	@ 0x54
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	4658      	mov	r0, fp
 8006748:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800674c:	f001 f8c8 	bl	80078e0 <__d2b>
 8006750:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006754:	4681      	mov	r9, r0
 8006756:	2e00      	cmp	r6, #0
 8006758:	d077      	beq.n	800684a <_dtoa_r+0x1da>
 800675a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800675e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006760:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006768:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800676c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006770:	9712      	str	r7, [sp, #72]	@ 0x48
 8006772:	4619      	mov	r1, r3
 8006774:	2200      	movs	r2, #0
 8006776:	4b76      	ldr	r3, [pc, #472]	@ (8006950 <_dtoa_r+0x2e0>)
 8006778:	f7f9 fcf6 	bl	8000168 <__aeabi_dsub>
 800677c:	a368      	add	r3, pc, #416	@ (adr r3, 8006920 <_dtoa_r+0x2b0>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f7f9 fea9 	bl	80004d8 <__aeabi_dmul>
 8006786:	a368      	add	r3, pc, #416	@ (adr r3, 8006928 <_dtoa_r+0x2b8>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f7f9 fcee 	bl	800016c <__adddf3>
 8006790:	4604      	mov	r4, r0
 8006792:	4630      	mov	r0, r6
 8006794:	460d      	mov	r5, r1
 8006796:	f7f9 fe35 	bl	8000404 <__aeabi_i2d>
 800679a:	a365      	add	r3, pc, #404	@ (adr r3, 8006930 <_dtoa_r+0x2c0>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f7f9 fe9a 	bl	80004d8 <__aeabi_dmul>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4620      	mov	r0, r4
 80067aa:	4629      	mov	r1, r5
 80067ac:	f7f9 fcde 	bl	800016c <__adddf3>
 80067b0:	4604      	mov	r4, r0
 80067b2:	460d      	mov	r5, r1
 80067b4:	f7fa f940 	bl	8000a38 <__aeabi_d2iz>
 80067b8:	2200      	movs	r2, #0
 80067ba:	4607      	mov	r7, r0
 80067bc:	2300      	movs	r3, #0
 80067be:	4620      	mov	r0, r4
 80067c0:	4629      	mov	r1, r5
 80067c2:	f7fa f8fb 	bl	80009bc <__aeabi_dcmplt>
 80067c6:	b140      	cbz	r0, 80067da <_dtoa_r+0x16a>
 80067c8:	4638      	mov	r0, r7
 80067ca:	f7f9 fe1b 	bl	8000404 <__aeabi_i2d>
 80067ce:	4622      	mov	r2, r4
 80067d0:	462b      	mov	r3, r5
 80067d2:	f7fa f8e9 	bl	80009a8 <__aeabi_dcmpeq>
 80067d6:	b900      	cbnz	r0, 80067da <_dtoa_r+0x16a>
 80067d8:	3f01      	subs	r7, #1
 80067da:	2f16      	cmp	r7, #22
 80067dc:	d853      	bhi.n	8006886 <_dtoa_r+0x216>
 80067de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006954 <_dtoa_r+0x2e4>)
 80067e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7fa f8e6 	bl	80009bc <__aeabi_dcmplt>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d04a      	beq.n	800688a <_dtoa_r+0x21a>
 80067f4:	2300      	movs	r3, #0
 80067f6:	3f01      	subs	r7, #1
 80067f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80067fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067fc:	1b9b      	subs	r3, r3, r6
 80067fe:	1e5a      	subs	r2, r3, #1
 8006800:	bf46      	itte	mi
 8006802:	f1c3 0801 	rsbmi	r8, r3, #1
 8006806:	2300      	movmi	r3, #0
 8006808:	f04f 0800 	movpl.w	r8, #0
 800680c:	9209      	str	r2, [sp, #36]	@ 0x24
 800680e:	bf48      	it	mi
 8006810:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006812:	2f00      	cmp	r7, #0
 8006814:	db3b      	blt.n	800688e <_dtoa_r+0x21e>
 8006816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006818:	970e      	str	r7, [sp, #56]	@ 0x38
 800681a:	443b      	add	r3, r7
 800681c:	9309      	str	r3, [sp, #36]	@ 0x24
 800681e:	2300      	movs	r3, #0
 8006820:	930a      	str	r3, [sp, #40]	@ 0x28
 8006822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006824:	2b09      	cmp	r3, #9
 8006826:	d866      	bhi.n	80068f6 <_dtoa_r+0x286>
 8006828:	2b05      	cmp	r3, #5
 800682a:	bfc4      	itt	gt
 800682c:	3b04      	subgt	r3, #4
 800682e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006830:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006832:	bfc8      	it	gt
 8006834:	2400      	movgt	r4, #0
 8006836:	f1a3 0302 	sub.w	r3, r3, #2
 800683a:	bfd8      	it	le
 800683c:	2401      	movle	r4, #1
 800683e:	2b03      	cmp	r3, #3
 8006840:	d864      	bhi.n	800690c <_dtoa_r+0x29c>
 8006842:	e8df f003 	tbb	[pc, r3]
 8006846:	382b      	.short	0x382b
 8006848:	5636      	.short	0x5636
 800684a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800684e:	441e      	add	r6, r3
 8006850:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006854:	2b20      	cmp	r3, #32
 8006856:	bfc1      	itttt	gt
 8006858:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800685c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006860:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006864:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006868:	bfd6      	itet	le
 800686a:	f1c3 0320 	rsble	r3, r3, #32
 800686e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006872:	fa04 f003 	lslle.w	r0, r4, r3
 8006876:	f7f9 fdb5 	bl	80003e4 <__aeabi_ui2d>
 800687a:	2201      	movs	r2, #1
 800687c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006880:	3e01      	subs	r6, #1
 8006882:	9212      	str	r2, [sp, #72]	@ 0x48
 8006884:	e775      	b.n	8006772 <_dtoa_r+0x102>
 8006886:	2301      	movs	r3, #1
 8006888:	e7b6      	b.n	80067f8 <_dtoa_r+0x188>
 800688a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800688c:	e7b5      	b.n	80067fa <_dtoa_r+0x18a>
 800688e:	427b      	negs	r3, r7
 8006890:	930a      	str	r3, [sp, #40]	@ 0x28
 8006892:	2300      	movs	r3, #0
 8006894:	eba8 0807 	sub.w	r8, r8, r7
 8006898:	930e      	str	r3, [sp, #56]	@ 0x38
 800689a:	e7c2      	b.n	8006822 <_dtoa_r+0x1b2>
 800689c:	2300      	movs	r3, #0
 800689e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dc35      	bgt.n	8006912 <_dtoa_r+0x2a2>
 80068a6:	2301      	movs	r3, #1
 80068a8:	461a      	mov	r2, r3
 80068aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80068ae:	9221      	str	r2, [sp, #132]	@ 0x84
 80068b0:	e00b      	b.n	80068ca <_dtoa_r+0x25a>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e7f3      	b.n	800689e <_dtoa_r+0x22e>
 80068b6:	2300      	movs	r3, #0
 80068b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	9308      	str	r3, [sp, #32]
 80068c0:	3301      	adds	r3, #1
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	9307      	str	r3, [sp, #28]
 80068c6:	bfb8      	it	lt
 80068c8:	2301      	movlt	r3, #1
 80068ca:	2100      	movs	r1, #0
 80068cc:	2204      	movs	r2, #4
 80068ce:	f8db 001c 	ldr.w	r0, [fp, #28]
 80068d2:	f102 0514 	add.w	r5, r2, #20
 80068d6:	429d      	cmp	r5, r3
 80068d8:	d91f      	bls.n	800691a <_dtoa_r+0x2aa>
 80068da:	6041      	str	r1, [r0, #4]
 80068dc:	4658      	mov	r0, fp
 80068de:	f000 fcd7 	bl	8007290 <_Balloc>
 80068e2:	4682      	mov	sl, r0
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d139      	bne.n	800695c <_dtoa_r+0x2ec>
 80068e8:	4602      	mov	r2, r0
 80068ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80068ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006958 <_dtoa_r+0x2e8>)
 80068f0:	e6d2      	b.n	8006698 <_dtoa_r+0x28>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e7e0      	b.n	80068b8 <_dtoa_r+0x248>
 80068f6:	2401      	movs	r4, #1
 80068f8:	2300      	movs	r3, #0
 80068fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80068fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006902:	2200      	movs	r2, #0
 8006904:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006908:	2312      	movs	r3, #18
 800690a:	e7d0      	b.n	80068ae <_dtoa_r+0x23e>
 800690c:	2301      	movs	r3, #1
 800690e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006910:	e7f5      	b.n	80068fe <_dtoa_r+0x28e>
 8006912:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006914:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006918:	e7d7      	b.n	80068ca <_dtoa_r+0x25a>
 800691a:	3101      	adds	r1, #1
 800691c:	0052      	lsls	r2, r2, #1
 800691e:	e7d8      	b.n	80068d2 <_dtoa_r+0x262>
 8006920:	636f4361 	.word	0x636f4361
 8006924:	3fd287a7 	.word	0x3fd287a7
 8006928:	8b60c8b3 	.word	0x8b60c8b3
 800692c:	3fc68a28 	.word	0x3fc68a28
 8006930:	509f79fb 	.word	0x509f79fb
 8006934:	3fd34413 	.word	0x3fd34413
 8006938:	08008189 	.word	0x08008189
 800693c:	080081a0 	.word	0x080081a0
 8006940:	7ff00000 	.word	0x7ff00000
 8006944:	08008185 	.word	0x08008185
 8006948:	08008159 	.word	0x08008159
 800694c:	08008158 	.word	0x08008158
 8006950:	3ff80000 	.word	0x3ff80000
 8006954:	08008298 	.word	0x08008298
 8006958:	080081f8 	.word	0x080081f8
 800695c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006960:	6018      	str	r0, [r3, #0]
 8006962:	9b07      	ldr	r3, [sp, #28]
 8006964:	2b0e      	cmp	r3, #14
 8006966:	f200 80a4 	bhi.w	8006ab2 <_dtoa_r+0x442>
 800696a:	2c00      	cmp	r4, #0
 800696c:	f000 80a1 	beq.w	8006ab2 <_dtoa_r+0x442>
 8006970:	2f00      	cmp	r7, #0
 8006972:	dd33      	ble.n	80069dc <_dtoa_r+0x36c>
 8006974:	4b86      	ldr	r3, [pc, #536]	@ (8006b90 <_dtoa_r+0x520>)
 8006976:	f007 020f 	and.w	r2, r7, #15
 800697a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800697e:	05f8      	lsls	r0, r7, #23
 8006980:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006984:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006988:	ea4f 1427 	mov.w	r4, r7, asr #4
 800698c:	d516      	bpl.n	80069bc <_dtoa_r+0x34c>
 800698e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006992:	4b80      	ldr	r3, [pc, #512]	@ (8006b94 <_dtoa_r+0x524>)
 8006994:	2603      	movs	r6, #3
 8006996:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800699a:	f7f9 fec7 	bl	800072c <__aeabi_ddiv>
 800699e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a2:	f004 040f 	and.w	r4, r4, #15
 80069a6:	4d7b      	ldr	r5, [pc, #492]	@ (8006b94 <_dtoa_r+0x524>)
 80069a8:	b954      	cbnz	r4, 80069c0 <_dtoa_r+0x350>
 80069aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b2:	f7f9 febb 	bl	800072c <__aeabi_ddiv>
 80069b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069ba:	e028      	b.n	8006a0e <_dtoa_r+0x39e>
 80069bc:	2602      	movs	r6, #2
 80069be:	e7f2      	b.n	80069a6 <_dtoa_r+0x336>
 80069c0:	07e1      	lsls	r1, r4, #31
 80069c2:	d508      	bpl.n	80069d6 <_dtoa_r+0x366>
 80069c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069cc:	f7f9 fd84 	bl	80004d8 <__aeabi_dmul>
 80069d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069d4:	3601      	adds	r6, #1
 80069d6:	1064      	asrs	r4, r4, #1
 80069d8:	3508      	adds	r5, #8
 80069da:	e7e5      	b.n	80069a8 <_dtoa_r+0x338>
 80069dc:	f000 80d2 	beq.w	8006b84 <_dtoa_r+0x514>
 80069e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069e4:	427c      	negs	r4, r7
 80069e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006b90 <_dtoa_r+0x520>)
 80069e8:	f004 020f 	and.w	r2, r4, #15
 80069ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fd70 	bl	80004d8 <__aeabi_dmul>
 80069f8:	2602      	movs	r6, #2
 80069fa:	2300      	movs	r3, #0
 80069fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a00:	4d64      	ldr	r5, [pc, #400]	@ (8006b94 <_dtoa_r+0x524>)
 8006a02:	1124      	asrs	r4, r4, #4
 8006a04:	2c00      	cmp	r4, #0
 8006a06:	f040 80b2 	bne.w	8006b6e <_dtoa_r+0x4fe>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1d3      	bne.n	80069b6 <_dtoa_r+0x346>
 8006a0e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80b7 	beq.w	8006b88 <_dtoa_r+0x518>
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4b5d      	ldr	r3, [pc, #372]	@ (8006b98 <_dtoa_r+0x528>)
 8006a22:	f7f9 ffcb 	bl	80009bc <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f000 80ae 	beq.w	8006b88 <_dtoa_r+0x518>
 8006a2c:	9b07      	ldr	r3, [sp, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 80aa 	beq.w	8006b88 <_dtoa_r+0x518>
 8006a34:	9b08      	ldr	r3, [sp, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dd37      	ble.n	8006aaa <_dtoa_r+0x43a>
 8006a3a:	1e7b      	subs	r3, r7, #1
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	9304      	str	r3, [sp, #16]
 8006a40:	2200      	movs	r2, #0
 8006a42:	4629      	mov	r1, r5
 8006a44:	4b55      	ldr	r3, [pc, #340]	@ (8006b9c <_dtoa_r+0x52c>)
 8006a46:	f7f9 fd47 	bl	80004d8 <__aeabi_dmul>
 8006a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a4e:	9c08      	ldr	r4, [sp, #32]
 8006a50:	3601      	adds	r6, #1
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7f9 fcd6 	bl	8000404 <__aeabi_i2d>
 8006a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a5c:	f7f9 fd3c 	bl	80004d8 <__aeabi_dmul>
 8006a60:	2200      	movs	r2, #0
 8006a62:	4b4f      	ldr	r3, [pc, #316]	@ (8006ba0 <_dtoa_r+0x530>)
 8006a64:	f7f9 fb82 	bl	800016c <__adddf3>
 8006a68:	4605      	mov	r5, r0
 8006a6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a6e:	2c00      	cmp	r4, #0
 8006a70:	f040 809a 	bne.w	8006ba8 <_dtoa_r+0x538>
 8006a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8006ba4 <_dtoa_r+0x534>)
 8006a7c:	f7f9 fb74 	bl	8000168 <__aeabi_dsub>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a88:	462a      	mov	r2, r5
 8006a8a:	4633      	mov	r3, r6
 8006a8c:	f7f9 ffb4 	bl	80009f8 <__aeabi_dcmpgt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	f040 828e 	bne.w	8006fb2 <_dtoa_r+0x942>
 8006a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006aa0:	f7f9 ff8c 	bl	80009bc <__aeabi_dcmplt>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f040 8127 	bne.w	8006cf8 <_dtoa_r+0x688>
 8006aaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006aae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006ab2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f2c0 8163 	blt.w	8006d80 <_dtoa_r+0x710>
 8006aba:	2f0e      	cmp	r7, #14
 8006abc:	f300 8160 	bgt.w	8006d80 <_dtoa_r+0x710>
 8006ac0:	4b33      	ldr	r3, [pc, #204]	@ (8006b90 <_dtoa_r+0x520>)
 8006ac2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ac6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006aca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ace:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	da03      	bge.n	8006adc <_dtoa_r+0x46c>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f340 8100 	ble.w	8006cdc <_dtoa_r+0x66c>
 8006adc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ae0:	4656      	mov	r6, sl
 8006ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7f9 fe1f 	bl	800072c <__aeabi_ddiv>
 8006aee:	f7f9 ffa3 	bl	8000a38 <__aeabi_d2iz>
 8006af2:	4680      	mov	r8, r0
 8006af4:	f7f9 fc86 	bl	8000404 <__aeabi_i2d>
 8006af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006afc:	f7f9 fcec 	bl	80004d8 <__aeabi_dmul>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4620      	mov	r0, r4
 8006b06:	4629      	mov	r1, r5
 8006b08:	f7f9 fb2e 	bl	8000168 <__aeabi_dsub>
 8006b0c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b10:	9d07      	ldr	r5, [sp, #28]
 8006b12:	f806 4b01 	strb.w	r4, [r6], #1
 8006b16:	eba6 040a 	sub.w	r4, r6, sl
 8006b1a:	42a5      	cmp	r5, r4
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	f040 8116 	bne.w	8006d50 <_dtoa_r+0x6e0>
 8006b24:	f7f9 fb22 	bl	800016c <__adddf3>
 8006b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
 8006b30:	f7f9 ff62 	bl	80009f8 <__aeabi_dcmpgt>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f040 80f8 	bne.w	8006d2a <_dtoa_r+0x6ba>
 8006b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 ff31 	bl	80009a8 <__aeabi_dcmpeq>
 8006b46:	b118      	cbz	r0, 8006b50 <_dtoa_r+0x4e0>
 8006b48:	f018 0f01 	tst.w	r8, #1
 8006b4c:	f040 80ed 	bne.w	8006d2a <_dtoa_r+0x6ba>
 8006b50:	4649      	mov	r1, r9
 8006b52:	4658      	mov	r0, fp
 8006b54:	f000 fbdc 	bl	8007310 <_Bfree>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	7033      	strb	r3, [r6, #0]
 8006b5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006b5e:	3701      	adds	r7, #1
 8006b60:	601f      	str	r7, [r3, #0]
 8006b62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8320 	beq.w	80071aa <_dtoa_r+0xb3a>
 8006b6a:	601e      	str	r6, [r3, #0]
 8006b6c:	e31d      	b.n	80071aa <_dtoa_r+0xb3a>
 8006b6e:	07e2      	lsls	r2, r4, #31
 8006b70:	d505      	bpl.n	8006b7e <_dtoa_r+0x50e>
 8006b72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b76:	f7f9 fcaf 	bl	80004d8 <__aeabi_dmul>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	3601      	adds	r6, #1
 8006b7e:	1064      	asrs	r4, r4, #1
 8006b80:	3508      	adds	r5, #8
 8006b82:	e73f      	b.n	8006a04 <_dtoa_r+0x394>
 8006b84:	2602      	movs	r6, #2
 8006b86:	e742      	b.n	8006a0e <_dtoa_r+0x39e>
 8006b88:	9c07      	ldr	r4, [sp, #28]
 8006b8a:	9704      	str	r7, [sp, #16]
 8006b8c:	e761      	b.n	8006a52 <_dtoa_r+0x3e2>
 8006b8e:	bf00      	nop
 8006b90:	08008298 	.word	0x08008298
 8006b94:	08008270 	.word	0x08008270
 8006b98:	3ff00000 	.word	0x3ff00000
 8006b9c:	40240000 	.word	0x40240000
 8006ba0:	401c0000 	.word	0x401c0000
 8006ba4:	40140000 	.word	0x40140000
 8006ba8:	4b70      	ldr	r3, [pc, #448]	@ (8006d6c <_dtoa_r+0x6fc>)
 8006baa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bb4:	4454      	add	r4, sl
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	d045      	beq.n	8006c46 <_dtoa_r+0x5d6>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	496c      	ldr	r1, [pc, #432]	@ (8006d70 <_dtoa_r+0x700>)
 8006bbe:	f7f9 fdb5 	bl	800072c <__aeabi_ddiv>
 8006bc2:	4633      	mov	r3, r6
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	f7f9 facf 	bl	8000168 <__aeabi_dsub>
 8006bca:	4656      	mov	r6, sl
 8006bcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd4:	f7f9 ff30 	bl	8000a38 <__aeabi_d2iz>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	f7f9 fc13 	bl	8000404 <__aeabi_i2d>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006be6:	f7f9 fabf 	bl	8000168 <__aeabi_dsub>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	3530      	adds	r5, #48	@ 0x30
 8006bf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bf8:	f806 5b01 	strb.w	r5, [r6], #1
 8006bfc:	f7f9 fede 	bl	80009bc <__aeabi_dcmplt>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d163      	bne.n	8006ccc <_dtoa_r+0x65c>
 8006c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c08:	2000      	movs	r0, #0
 8006c0a:	495a      	ldr	r1, [pc, #360]	@ (8006d74 <_dtoa_r+0x704>)
 8006c0c:	f7f9 faac 	bl	8000168 <__aeabi_dsub>
 8006c10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c14:	f7f9 fed2 	bl	80009bc <__aeabi_dcmplt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f040 8087 	bne.w	8006d2c <_dtoa_r+0x6bc>
 8006c1e:	42a6      	cmp	r6, r4
 8006c20:	f43f af43 	beq.w	8006aaa <_dtoa_r+0x43a>
 8006c24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4b53      	ldr	r3, [pc, #332]	@ (8006d78 <_dtoa_r+0x708>)
 8006c2c:	f7f9 fc54 	bl	80004d8 <__aeabi_dmul>
 8006c30:	2200      	movs	r2, #0
 8006c32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8006d78 <_dtoa_r+0x708>)
 8006c3c:	f7f9 fc4c 	bl	80004d8 <__aeabi_dmul>
 8006c40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c44:	e7c4      	b.n	8006bd0 <_dtoa_r+0x560>
 8006c46:	4631      	mov	r1, r6
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f7f9 fc45 	bl	80004d8 <__aeabi_dmul>
 8006c4e:	4656      	mov	r6, sl
 8006c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c54:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c5a:	f7f9 feed 	bl	8000a38 <__aeabi_d2iz>
 8006c5e:	4605      	mov	r5, r0
 8006c60:	f7f9 fbd0 	bl	8000404 <__aeabi_i2d>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c6c:	f7f9 fa7c 	bl	8000168 <__aeabi_dsub>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	3530      	adds	r5, #48	@ 0x30
 8006c76:	f806 5b01 	strb.w	r5, [r6], #1
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	d124      	bne.n	8006cd0 <_dtoa_r+0x660>
 8006c86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c8a:	4b39      	ldr	r3, [pc, #228]	@ (8006d70 <_dtoa_r+0x700>)
 8006c8c:	f7f9 fa6e 	bl	800016c <__adddf3>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c98:	f7f9 feae 	bl	80009f8 <__aeabi_dcmpgt>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d145      	bne.n	8006d2c <_dtoa_r+0x6bc>
 8006ca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	4932      	ldr	r1, [pc, #200]	@ (8006d70 <_dtoa_r+0x700>)
 8006ca8:	f7f9 fa5e 	bl	8000168 <__aeabi_dsub>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb4:	f7f9 fe82 	bl	80009bc <__aeabi_dcmplt>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f43f aef6 	beq.w	8006aaa <_dtoa_r+0x43a>
 8006cbe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006cc0:	1e73      	subs	r3, r6, #1
 8006cc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006cc8:	2b30      	cmp	r3, #48	@ 0x30
 8006cca:	d0f8      	beq.n	8006cbe <_dtoa_r+0x64e>
 8006ccc:	9f04      	ldr	r7, [sp, #16]
 8006cce:	e73f      	b.n	8006b50 <_dtoa_r+0x4e0>
 8006cd0:	4b29      	ldr	r3, [pc, #164]	@ (8006d78 <_dtoa_r+0x708>)
 8006cd2:	f7f9 fc01 	bl	80004d8 <__aeabi_dmul>
 8006cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cda:	e7bc      	b.n	8006c56 <_dtoa_r+0x5e6>
 8006cdc:	d10c      	bne.n	8006cf8 <_dtoa_r+0x688>
 8006cde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4b25      	ldr	r3, [pc, #148]	@ (8006d7c <_dtoa_r+0x70c>)
 8006ce6:	f7f9 fbf7 	bl	80004d8 <__aeabi_dmul>
 8006cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cee:	f7f9 fe79 	bl	80009e4 <__aeabi_dcmpge>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f000 815b 	beq.w	8006fae <_dtoa_r+0x93e>
 8006cf8:	2400      	movs	r4, #0
 8006cfa:	4625      	mov	r5, r4
 8006cfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cfe:	4656      	mov	r6, sl
 8006d00:	43db      	mvns	r3, r3
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	2700      	movs	r7, #0
 8006d06:	4621      	mov	r1, r4
 8006d08:	4658      	mov	r0, fp
 8006d0a:	f000 fb01 	bl	8007310 <_Bfree>
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	d0dc      	beq.n	8006ccc <_dtoa_r+0x65c>
 8006d12:	b12f      	cbz	r7, 8006d20 <_dtoa_r+0x6b0>
 8006d14:	42af      	cmp	r7, r5
 8006d16:	d003      	beq.n	8006d20 <_dtoa_r+0x6b0>
 8006d18:	4639      	mov	r1, r7
 8006d1a:	4658      	mov	r0, fp
 8006d1c:	f000 faf8 	bl	8007310 <_Bfree>
 8006d20:	4629      	mov	r1, r5
 8006d22:	4658      	mov	r0, fp
 8006d24:	f000 faf4 	bl	8007310 <_Bfree>
 8006d28:	e7d0      	b.n	8006ccc <_dtoa_r+0x65c>
 8006d2a:	9704      	str	r7, [sp, #16]
 8006d2c:	4633      	mov	r3, r6
 8006d2e:	461e      	mov	r6, r3
 8006d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d34:	2a39      	cmp	r2, #57	@ 0x39
 8006d36:	d107      	bne.n	8006d48 <_dtoa_r+0x6d8>
 8006d38:	459a      	cmp	sl, r3
 8006d3a:	d1f8      	bne.n	8006d2e <_dtoa_r+0x6be>
 8006d3c:	9a04      	ldr	r2, [sp, #16]
 8006d3e:	3201      	adds	r2, #1
 8006d40:	9204      	str	r2, [sp, #16]
 8006d42:	2230      	movs	r2, #48	@ 0x30
 8006d44:	f88a 2000 	strb.w	r2, [sl]
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	3201      	adds	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e7bd      	b.n	8006ccc <_dtoa_r+0x65c>
 8006d50:	2200      	movs	r2, #0
 8006d52:	4b09      	ldr	r3, [pc, #36]	@ (8006d78 <_dtoa_r+0x708>)
 8006d54:	f7f9 fbc0 	bl	80004d8 <__aeabi_dmul>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	460d      	mov	r5, r1
 8006d60:	f7f9 fe22 	bl	80009a8 <__aeabi_dcmpeq>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	f43f aebc 	beq.w	8006ae2 <_dtoa_r+0x472>
 8006d6a:	e6f1      	b.n	8006b50 <_dtoa_r+0x4e0>
 8006d6c:	08008298 	.word	0x08008298
 8006d70:	3fe00000 	.word	0x3fe00000
 8006d74:	3ff00000 	.word	0x3ff00000
 8006d78:	40240000 	.word	0x40240000
 8006d7c:	40140000 	.word	0x40140000
 8006d80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	f000 80db 	beq.w	8006f3e <_dtoa_r+0x8ce>
 8006d88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d8a:	2a01      	cmp	r2, #1
 8006d8c:	f300 80bf 	bgt.w	8006f0e <_dtoa_r+0x89e>
 8006d90:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	f000 80b7 	beq.w	8006f06 <_dtoa_r+0x896>
 8006d98:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d9c:	4646      	mov	r6, r8
 8006d9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006da2:	2101      	movs	r1, #1
 8006da4:	441a      	add	r2, r3
 8006da6:	4658      	mov	r0, fp
 8006da8:	4498      	add	r8, r3
 8006daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dac:	f000 fb64 	bl	8007478 <__i2b>
 8006db0:	4605      	mov	r5, r0
 8006db2:	b15e      	cbz	r6, 8006dcc <_dtoa_r+0x75c>
 8006db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dd08      	ble.n	8006dcc <_dtoa_r+0x75c>
 8006dba:	42b3      	cmp	r3, r6
 8006dbc:	bfa8      	it	ge
 8006dbe:	4633      	movge	r3, r6
 8006dc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dc2:	eba8 0803 	sub.w	r8, r8, r3
 8006dc6:	1af6      	subs	r6, r6, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dce:	b1f3      	cbz	r3, 8006e0e <_dtoa_r+0x79e>
 8006dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80b7 	beq.w	8006f46 <_dtoa_r+0x8d6>
 8006dd8:	b18c      	cbz	r4, 8006dfe <_dtoa_r+0x78e>
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4622      	mov	r2, r4
 8006dde:	4658      	mov	r0, fp
 8006de0:	f000 fc08 	bl	80075f4 <__pow5mult>
 8006de4:	464a      	mov	r2, r9
 8006de6:	4601      	mov	r1, r0
 8006de8:	4605      	mov	r5, r0
 8006dea:	4658      	mov	r0, fp
 8006dec:	f000 fb5a 	bl	80074a4 <__multiply>
 8006df0:	4649      	mov	r1, r9
 8006df2:	9004      	str	r0, [sp, #16]
 8006df4:	4658      	mov	r0, fp
 8006df6:	f000 fa8b 	bl	8007310 <_Bfree>
 8006dfa:	9b04      	ldr	r3, [sp, #16]
 8006dfc:	4699      	mov	r9, r3
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e00:	1b1a      	subs	r2, r3, r4
 8006e02:	d004      	beq.n	8006e0e <_dtoa_r+0x79e>
 8006e04:	4649      	mov	r1, r9
 8006e06:	4658      	mov	r0, fp
 8006e08:	f000 fbf4 	bl	80075f4 <__pow5mult>
 8006e0c:	4681      	mov	r9, r0
 8006e0e:	2101      	movs	r1, #1
 8006e10:	4658      	mov	r0, fp
 8006e12:	f000 fb31 	bl	8007478 <__i2b>
 8006e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e18:	4604      	mov	r4, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 81c9 	beq.w	80071b2 <_dtoa_r+0xb42>
 8006e20:	461a      	mov	r2, r3
 8006e22:	4601      	mov	r1, r0
 8006e24:	4658      	mov	r0, fp
 8006e26:	f000 fbe5 	bl	80075f4 <__pow5mult>
 8006e2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	f300 808f 	bgt.w	8006f52 <_dtoa_r+0x8e2>
 8006e34:	9b02      	ldr	r3, [sp, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f040 8087 	bne.w	8006f4a <_dtoa_r+0x8da>
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f040 8083 	bne.w	8006f4e <_dtoa_r+0x8de>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e4e:	0d1b      	lsrs	r3, r3, #20
 8006e50:	051b      	lsls	r3, r3, #20
 8006e52:	b12b      	cbz	r3, 8006e60 <_dtoa_r+0x7f0>
 8006e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e56:	f108 0801 	add.w	r8, r8, #1
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e5e:	2301      	movs	r3, #1
 8006e60:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 81aa 	beq.w	80071be <_dtoa_r+0xb4e>
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e70:	6918      	ldr	r0, [r3, #16]
 8006e72:	f000 fab5 	bl	80073e0 <__hi0bits>
 8006e76:	f1c0 0020 	rsb	r0, r0, #32
 8006e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e7c:	4418      	add	r0, r3
 8006e7e:	f010 001f 	ands.w	r0, r0, #31
 8006e82:	d071      	beq.n	8006f68 <_dtoa_r+0x8f8>
 8006e84:	f1c0 0320 	rsb	r3, r0, #32
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	dd65      	ble.n	8006f58 <_dtoa_r+0x8e8>
 8006e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8e:	f1c0 001c 	rsb	r0, r0, #28
 8006e92:	4403      	add	r3, r0
 8006e94:	4480      	add	r8, r0
 8006e96:	4406      	add	r6, r0
 8006e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9a:	f1b8 0f00 	cmp.w	r8, #0
 8006e9e:	dd05      	ble.n	8006eac <_dtoa_r+0x83c>
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	4642      	mov	r2, r8
 8006ea4:	4658      	mov	r0, fp
 8006ea6:	f000 fbff 	bl	80076a8 <__lshift>
 8006eaa:	4681      	mov	r9, r0
 8006eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	dd05      	ble.n	8006ebe <_dtoa_r+0x84e>
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	f000 fbf6 	bl	80076a8 <__lshift>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d053      	beq.n	8006f6c <_dtoa_r+0x8fc>
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	f000 fc5a 	bl	8007780 <__mcmp>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	da4d      	bge.n	8006f6c <_dtoa_r+0x8fc>
 8006ed0:	1e7b      	subs	r3, r7, #1
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	220a      	movs	r2, #10
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4658      	mov	r0, fp
 8006edc:	f000 fa3a 	bl	8007354 <__multadd>
 8006ee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ee2:	4681      	mov	r9, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 816c 	beq.w	80071c2 <_dtoa_r+0xb52>
 8006eea:	2300      	movs	r3, #0
 8006eec:	4629      	mov	r1, r5
 8006eee:	220a      	movs	r2, #10
 8006ef0:	4658      	mov	r0, fp
 8006ef2:	f000 fa2f 	bl	8007354 <__multadd>
 8006ef6:	9b08      	ldr	r3, [sp, #32]
 8006ef8:	4605      	mov	r5, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dc61      	bgt.n	8006fc2 <_dtoa_r+0x952>
 8006efe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	dc3b      	bgt.n	8006f7c <_dtoa_r+0x90c>
 8006f04:	e05d      	b.n	8006fc2 <_dtoa_r+0x952>
 8006f06:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f08:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f0c:	e746      	b.n	8006d9c <_dtoa_r+0x72c>
 8006f0e:	9b07      	ldr	r3, [sp, #28]
 8006f10:	1e5c      	subs	r4, r3, #1
 8006f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	bfbf      	itttt	lt
 8006f18:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006f1a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006f1c:	1ae3      	sublt	r3, r4, r3
 8006f1e:	18d2      	addlt	r2, r2, r3
 8006f20:	bfa8      	it	ge
 8006f22:	1b1c      	subge	r4, r3, r4
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	bfbe      	ittt	lt
 8006f28:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006f2a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006f2c:	2400      	movlt	r4, #0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfb5      	itete	lt
 8006f32:	eba8 0603 	sublt.w	r6, r8, r3
 8006f36:	4646      	movge	r6, r8
 8006f38:	2300      	movlt	r3, #0
 8006f3a:	9b07      	ldrge	r3, [sp, #28]
 8006f3c:	e730      	b.n	8006da0 <_dtoa_r+0x730>
 8006f3e:	4646      	mov	r6, r8
 8006f40:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f44:	e735      	b.n	8006db2 <_dtoa_r+0x742>
 8006f46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f48:	e75c      	b.n	8006e04 <_dtoa_r+0x794>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e788      	b.n	8006e60 <_dtoa_r+0x7f0>
 8006f4e:	9b02      	ldr	r3, [sp, #8]
 8006f50:	e786      	b.n	8006e60 <_dtoa_r+0x7f0>
 8006f52:	2300      	movs	r3, #0
 8006f54:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f56:	e788      	b.n	8006e6a <_dtoa_r+0x7fa>
 8006f58:	d09f      	beq.n	8006e9a <_dtoa_r+0x82a>
 8006f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f5c:	331c      	adds	r3, #28
 8006f5e:	441a      	add	r2, r3
 8006f60:	4498      	add	r8, r3
 8006f62:	441e      	add	r6, r3
 8006f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f66:	e798      	b.n	8006e9a <_dtoa_r+0x82a>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	e7f6      	b.n	8006f5a <_dtoa_r+0x8ea>
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	9704      	str	r7, [sp, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	dc20      	bgt.n	8006fb6 <_dtoa_r+0x946>
 8006f74:	9308      	str	r3, [sp, #32]
 8006f76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	dd1e      	ble.n	8006fba <_dtoa_r+0x94a>
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f47f aebc 	bne.w	8006cfc <_dtoa_r+0x68c>
 8006f84:	4621      	mov	r1, r4
 8006f86:	2205      	movs	r2, #5
 8006f88:	4658      	mov	r0, fp
 8006f8a:	f000 f9e3 	bl	8007354 <__multadd>
 8006f8e:	4601      	mov	r1, r0
 8006f90:	4604      	mov	r4, r0
 8006f92:	4648      	mov	r0, r9
 8006f94:	f000 fbf4 	bl	8007780 <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	f77f aeaf 	ble.w	8006cfc <_dtoa_r+0x68c>
 8006f9e:	2331      	movs	r3, #49	@ 0x31
 8006fa0:	4656      	mov	r6, sl
 8006fa2:	f806 3b01 	strb.w	r3, [r6], #1
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	9304      	str	r3, [sp, #16]
 8006fac:	e6aa      	b.n	8006d04 <_dtoa_r+0x694>
 8006fae:	9c07      	ldr	r4, [sp, #28]
 8006fb0:	9704      	str	r7, [sp, #16]
 8006fb2:	4625      	mov	r5, r4
 8006fb4:	e7f3      	b.n	8006f9e <_dtoa_r+0x92e>
 8006fb6:	9b07      	ldr	r3, [sp, #28]
 8006fb8:	9308      	str	r3, [sp, #32]
 8006fba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8104 	beq.w	80071ca <_dtoa_r+0xb5a>
 8006fc2:	2e00      	cmp	r6, #0
 8006fc4:	dd05      	ble.n	8006fd2 <_dtoa_r+0x962>
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4658      	mov	r0, fp
 8006fcc:	f000 fb6c 	bl	80076a8 <__lshift>
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d05a      	beq.n	800708e <_dtoa_r+0xa1e>
 8006fd8:	4658      	mov	r0, fp
 8006fda:	6869      	ldr	r1, [r5, #4]
 8006fdc:	f000 f958 	bl	8007290 <_Balloc>
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	b928      	cbnz	r0, 8006ff0 <_dtoa_r+0x980>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006fea:	4b83      	ldr	r3, [pc, #524]	@ (80071f8 <_dtoa_r+0xb88>)
 8006fec:	f7ff bb54 	b.w	8006698 <_dtoa_r+0x28>
 8006ff0:	692a      	ldr	r2, [r5, #16]
 8006ff2:	f105 010c 	add.w	r1, r5, #12
 8006ff6:	3202      	adds	r2, #2
 8006ff8:	0092      	lsls	r2, r2, #2
 8006ffa:	300c      	adds	r0, #12
 8006ffc:	f7ff fa9f 	bl	800653e <memcpy>
 8007000:	2201      	movs	r2, #1
 8007002:	4631      	mov	r1, r6
 8007004:	4658      	mov	r0, fp
 8007006:	f000 fb4f 	bl	80076a8 <__lshift>
 800700a:	462f      	mov	r7, r5
 800700c:	4605      	mov	r5, r0
 800700e:	f10a 0301 	add.w	r3, sl, #1
 8007012:	9307      	str	r3, [sp, #28]
 8007014:	9b08      	ldr	r3, [sp, #32]
 8007016:	4453      	add	r3, sl
 8007018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800701a:	9b02      	ldr	r3, [sp, #8]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	930a      	str	r3, [sp, #40]	@ 0x28
 8007022:	9b07      	ldr	r3, [sp, #28]
 8007024:	4621      	mov	r1, r4
 8007026:	3b01      	subs	r3, #1
 8007028:	4648      	mov	r0, r9
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	f7ff fa95 	bl	800655a <quorem>
 8007030:	4639      	mov	r1, r7
 8007032:	9008      	str	r0, [sp, #32]
 8007034:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007038:	4648      	mov	r0, r9
 800703a:	f000 fba1 	bl	8007780 <__mcmp>
 800703e:	462a      	mov	r2, r5
 8007040:	9009      	str	r0, [sp, #36]	@ 0x24
 8007042:	4621      	mov	r1, r4
 8007044:	4658      	mov	r0, fp
 8007046:	f000 fbb7 	bl	80077b8 <__mdiff>
 800704a:	68c2      	ldr	r2, [r0, #12]
 800704c:	4606      	mov	r6, r0
 800704e:	bb02      	cbnz	r2, 8007092 <_dtoa_r+0xa22>
 8007050:	4601      	mov	r1, r0
 8007052:	4648      	mov	r0, r9
 8007054:	f000 fb94 	bl	8007780 <__mcmp>
 8007058:	4602      	mov	r2, r0
 800705a:	4631      	mov	r1, r6
 800705c:	4658      	mov	r0, fp
 800705e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007060:	f000 f956 	bl	8007310 <_Bfree>
 8007064:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007066:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007068:	9e07      	ldr	r6, [sp, #28]
 800706a:	ea43 0102 	orr.w	r1, r3, r2
 800706e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007070:	4319      	orrs	r1, r3
 8007072:	d110      	bne.n	8007096 <_dtoa_r+0xa26>
 8007074:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007078:	d029      	beq.n	80070ce <_dtoa_r+0xa5e>
 800707a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	dd02      	ble.n	8007086 <_dtoa_r+0xa16>
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007086:	9b02      	ldr	r3, [sp, #8]
 8007088:	f883 8000 	strb.w	r8, [r3]
 800708c:	e63b      	b.n	8006d06 <_dtoa_r+0x696>
 800708e:	4628      	mov	r0, r5
 8007090:	e7bb      	b.n	800700a <_dtoa_r+0x99a>
 8007092:	2201      	movs	r2, #1
 8007094:	e7e1      	b.n	800705a <_dtoa_r+0x9ea>
 8007096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	db04      	blt.n	80070a6 <_dtoa_r+0xa36>
 800709c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800709e:	430b      	orrs	r3, r1
 80070a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070a2:	430b      	orrs	r3, r1
 80070a4:	d120      	bne.n	80070e8 <_dtoa_r+0xa78>
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	dded      	ble.n	8007086 <_dtoa_r+0xa16>
 80070aa:	4649      	mov	r1, r9
 80070ac:	2201      	movs	r2, #1
 80070ae:	4658      	mov	r0, fp
 80070b0:	f000 fafa 	bl	80076a8 <__lshift>
 80070b4:	4621      	mov	r1, r4
 80070b6:	4681      	mov	r9, r0
 80070b8:	f000 fb62 	bl	8007780 <__mcmp>
 80070bc:	2800      	cmp	r0, #0
 80070be:	dc03      	bgt.n	80070c8 <_dtoa_r+0xa58>
 80070c0:	d1e1      	bne.n	8007086 <_dtoa_r+0xa16>
 80070c2:	f018 0f01 	tst.w	r8, #1
 80070c6:	d0de      	beq.n	8007086 <_dtoa_r+0xa16>
 80070c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070cc:	d1d8      	bne.n	8007080 <_dtoa_r+0xa10>
 80070ce:	2339      	movs	r3, #57	@ 0x39
 80070d0:	9a02      	ldr	r2, [sp, #8]
 80070d2:	7013      	strb	r3, [r2, #0]
 80070d4:	4633      	mov	r3, r6
 80070d6:	461e      	mov	r6, r3
 80070d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80070dc:	3b01      	subs	r3, #1
 80070de:	2a39      	cmp	r2, #57	@ 0x39
 80070e0:	d052      	beq.n	8007188 <_dtoa_r+0xb18>
 80070e2:	3201      	adds	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e60e      	b.n	8006d06 <_dtoa_r+0x696>
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	dd07      	ble.n	80070fc <_dtoa_r+0xa8c>
 80070ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070f0:	d0ed      	beq.n	80070ce <_dtoa_r+0xa5e>
 80070f2:	9a02      	ldr	r2, [sp, #8]
 80070f4:	f108 0301 	add.w	r3, r8, #1
 80070f8:	7013      	strb	r3, [r2, #0]
 80070fa:	e604      	b.n	8006d06 <_dtoa_r+0x696>
 80070fc:	9b07      	ldr	r3, [sp, #28]
 80070fe:	9a07      	ldr	r2, [sp, #28]
 8007100:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007104:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007106:	4293      	cmp	r3, r2
 8007108:	d028      	beq.n	800715c <_dtoa_r+0xaec>
 800710a:	4649      	mov	r1, r9
 800710c:	2300      	movs	r3, #0
 800710e:	220a      	movs	r2, #10
 8007110:	4658      	mov	r0, fp
 8007112:	f000 f91f 	bl	8007354 <__multadd>
 8007116:	42af      	cmp	r7, r5
 8007118:	4681      	mov	r9, r0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	f04f 020a 	mov.w	r2, #10
 8007122:	4639      	mov	r1, r7
 8007124:	4658      	mov	r0, fp
 8007126:	d107      	bne.n	8007138 <_dtoa_r+0xac8>
 8007128:	f000 f914 	bl	8007354 <__multadd>
 800712c:	4607      	mov	r7, r0
 800712e:	4605      	mov	r5, r0
 8007130:	9b07      	ldr	r3, [sp, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	9307      	str	r3, [sp, #28]
 8007136:	e774      	b.n	8007022 <_dtoa_r+0x9b2>
 8007138:	f000 f90c 	bl	8007354 <__multadd>
 800713c:	4629      	mov	r1, r5
 800713e:	4607      	mov	r7, r0
 8007140:	2300      	movs	r3, #0
 8007142:	220a      	movs	r2, #10
 8007144:	4658      	mov	r0, fp
 8007146:	f000 f905 	bl	8007354 <__multadd>
 800714a:	4605      	mov	r5, r0
 800714c:	e7f0      	b.n	8007130 <_dtoa_r+0xac0>
 800714e:	9b08      	ldr	r3, [sp, #32]
 8007150:	2700      	movs	r7, #0
 8007152:	2b00      	cmp	r3, #0
 8007154:	bfcc      	ite	gt
 8007156:	461e      	movgt	r6, r3
 8007158:	2601      	movle	r6, #1
 800715a:	4456      	add	r6, sl
 800715c:	4649      	mov	r1, r9
 800715e:	2201      	movs	r2, #1
 8007160:	4658      	mov	r0, fp
 8007162:	f000 faa1 	bl	80076a8 <__lshift>
 8007166:	4621      	mov	r1, r4
 8007168:	4681      	mov	r9, r0
 800716a:	f000 fb09 	bl	8007780 <__mcmp>
 800716e:	2800      	cmp	r0, #0
 8007170:	dcb0      	bgt.n	80070d4 <_dtoa_r+0xa64>
 8007172:	d102      	bne.n	800717a <_dtoa_r+0xb0a>
 8007174:	f018 0f01 	tst.w	r8, #1
 8007178:	d1ac      	bne.n	80070d4 <_dtoa_r+0xa64>
 800717a:	4633      	mov	r3, r6
 800717c:	461e      	mov	r6, r3
 800717e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007182:	2a30      	cmp	r2, #48	@ 0x30
 8007184:	d0fa      	beq.n	800717c <_dtoa_r+0xb0c>
 8007186:	e5be      	b.n	8006d06 <_dtoa_r+0x696>
 8007188:	459a      	cmp	sl, r3
 800718a:	d1a4      	bne.n	80070d6 <_dtoa_r+0xa66>
 800718c:	9b04      	ldr	r3, [sp, #16]
 800718e:	3301      	adds	r3, #1
 8007190:	9304      	str	r3, [sp, #16]
 8007192:	2331      	movs	r3, #49	@ 0x31
 8007194:	f88a 3000 	strb.w	r3, [sl]
 8007198:	e5b5      	b.n	8006d06 <_dtoa_r+0x696>
 800719a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800719c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80071fc <_dtoa_r+0xb8c>
 80071a0:	b11b      	cbz	r3, 80071aa <_dtoa_r+0xb3a>
 80071a2:	f10a 0308 	add.w	r3, sl, #8
 80071a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	4650      	mov	r0, sl
 80071ac:	b017      	add	sp, #92	@ 0x5c
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	f77f ae3d 	ble.w	8006e34 <_dtoa_r+0x7c4>
 80071ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80071be:	2001      	movs	r0, #1
 80071c0:	e65b      	b.n	8006e7a <_dtoa_r+0x80a>
 80071c2:	9b08      	ldr	r3, [sp, #32]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f77f aed6 	ble.w	8006f76 <_dtoa_r+0x906>
 80071ca:	4656      	mov	r6, sl
 80071cc:	4621      	mov	r1, r4
 80071ce:	4648      	mov	r0, r9
 80071d0:	f7ff f9c3 	bl	800655a <quorem>
 80071d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071d8:	9b08      	ldr	r3, [sp, #32]
 80071da:	f806 8b01 	strb.w	r8, [r6], #1
 80071de:	eba6 020a 	sub.w	r2, r6, sl
 80071e2:	4293      	cmp	r3, r2
 80071e4:	ddb3      	ble.n	800714e <_dtoa_r+0xade>
 80071e6:	4649      	mov	r1, r9
 80071e8:	2300      	movs	r3, #0
 80071ea:	220a      	movs	r2, #10
 80071ec:	4658      	mov	r0, fp
 80071ee:	f000 f8b1 	bl	8007354 <__multadd>
 80071f2:	4681      	mov	r9, r0
 80071f4:	e7ea      	b.n	80071cc <_dtoa_r+0xb5c>
 80071f6:	bf00      	nop
 80071f8:	080081f8 	.word	0x080081f8
 80071fc:	0800817c 	.word	0x0800817c

08007200 <_free_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4605      	mov	r5, r0
 8007204:	2900      	cmp	r1, #0
 8007206:	d040      	beq.n	800728a <_free_r+0x8a>
 8007208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800720c:	1f0c      	subs	r4, r1, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	bfb8      	it	lt
 8007212:	18e4      	addlt	r4, r4, r3
 8007214:	f7fe fb40 	bl	8005898 <__malloc_lock>
 8007218:	4a1c      	ldr	r2, [pc, #112]	@ (800728c <_free_r+0x8c>)
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	b933      	cbnz	r3, 800722c <_free_r+0x2c>
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	6014      	str	r4, [r2, #0]
 8007222:	4628      	mov	r0, r5
 8007224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007228:	f7fe bb3c 	b.w	80058a4 <__malloc_unlock>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d908      	bls.n	8007242 <_free_r+0x42>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	1821      	adds	r1, r4, r0
 8007234:	428b      	cmp	r3, r1
 8007236:	bf01      	itttt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	1809      	addeq	r1, r1, r0
 800723e:	6021      	streq	r1, [r4, #0]
 8007240:	e7ed      	b.n	800721e <_free_r+0x1e>
 8007242:	461a      	mov	r2, r3
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b10b      	cbz	r3, 800724c <_free_r+0x4c>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d9fa      	bls.n	8007242 <_free_r+0x42>
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	1850      	adds	r0, r2, r1
 8007250:	42a0      	cmp	r0, r4
 8007252:	d10b      	bne.n	800726c <_free_r+0x6c>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	4401      	add	r1, r0
 8007258:	1850      	adds	r0, r2, r1
 800725a:	4283      	cmp	r3, r0
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	d1e0      	bne.n	8007222 <_free_r+0x22>
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4408      	add	r0, r1
 8007266:	6010      	str	r0, [r2, #0]
 8007268:	6053      	str	r3, [r2, #4]
 800726a:	e7da      	b.n	8007222 <_free_r+0x22>
 800726c:	d902      	bls.n	8007274 <_free_r+0x74>
 800726e:	230c      	movs	r3, #12
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	e7d6      	b.n	8007222 <_free_r+0x22>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	1821      	adds	r1, r4, r0
 8007278:	428b      	cmp	r3, r1
 800727a:	bf01      	itttt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	1809      	addeq	r1, r1, r0
 8007282:	6021      	streq	r1, [r4, #0]
 8007284:	6063      	str	r3, [r4, #4]
 8007286:	6054      	str	r4, [r2, #4]
 8007288:	e7cb      	b.n	8007222 <_free_r+0x22>
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	200005c4 	.word	0x200005c4

08007290 <_Balloc>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	69c6      	ldr	r6, [r0, #28]
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	b976      	cbnz	r6, 80072b8 <_Balloc+0x28>
 800729a:	2010      	movs	r0, #16
 800729c:	f7fe fa52 	bl	8005744 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	61e0      	str	r0, [r4, #28]
 80072a4:	b920      	cbnz	r0, 80072b0 <_Balloc+0x20>
 80072a6:	216b      	movs	r1, #107	@ 0x6b
 80072a8:	4b17      	ldr	r3, [pc, #92]	@ (8007308 <_Balloc+0x78>)
 80072aa:	4818      	ldr	r0, [pc, #96]	@ (800730c <_Balloc+0x7c>)
 80072ac:	f000 fdf4 	bl	8007e98 <__assert_func>
 80072b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b4:	6006      	str	r6, [r0, #0]
 80072b6:	60c6      	str	r6, [r0, #12]
 80072b8:	69e6      	ldr	r6, [r4, #28]
 80072ba:	68f3      	ldr	r3, [r6, #12]
 80072bc:	b183      	cbz	r3, 80072e0 <_Balloc+0x50>
 80072be:	69e3      	ldr	r3, [r4, #28]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072c6:	b9b8      	cbnz	r0, 80072f8 <_Balloc+0x68>
 80072c8:	2101      	movs	r1, #1
 80072ca:	fa01 f605 	lsl.w	r6, r1, r5
 80072ce:	1d72      	adds	r2, r6, #5
 80072d0:	4620      	mov	r0, r4
 80072d2:	0092      	lsls	r2, r2, #2
 80072d4:	f000 fdfe 	bl	8007ed4 <_calloc_r>
 80072d8:	b160      	cbz	r0, 80072f4 <_Balloc+0x64>
 80072da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072de:	e00e      	b.n	80072fe <_Balloc+0x6e>
 80072e0:	2221      	movs	r2, #33	@ 0x21
 80072e2:	2104      	movs	r1, #4
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fdf5 	bl	8007ed4 <_calloc_r>
 80072ea:	69e3      	ldr	r3, [r4, #28]
 80072ec:	60f0      	str	r0, [r6, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e4      	bne.n	80072be <_Balloc+0x2e>
 80072f4:	2000      	movs	r0, #0
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	6802      	ldr	r2, [r0, #0]
 80072fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072fe:	2300      	movs	r3, #0
 8007300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007304:	e7f7      	b.n	80072f6 <_Balloc+0x66>
 8007306:	bf00      	nop
 8007308:	08008189 	.word	0x08008189
 800730c:	08008209 	.word	0x08008209

08007310 <_Bfree>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	69c6      	ldr	r6, [r0, #28]
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	b976      	cbnz	r6, 8007338 <_Bfree+0x28>
 800731a:	2010      	movs	r0, #16
 800731c:	f7fe fa12 	bl	8005744 <malloc>
 8007320:	4602      	mov	r2, r0
 8007322:	61e8      	str	r0, [r5, #28]
 8007324:	b920      	cbnz	r0, 8007330 <_Bfree+0x20>
 8007326:	218f      	movs	r1, #143	@ 0x8f
 8007328:	4b08      	ldr	r3, [pc, #32]	@ (800734c <_Bfree+0x3c>)
 800732a:	4809      	ldr	r0, [pc, #36]	@ (8007350 <_Bfree+0x40>)
 800732c:	f000 fdb4 	bl	8007e98 <__assert_func>
 8007330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007334:	6006      	str	r6, [r0, #0]
 8007336:	60c6      	str	r6, [r0, #12]
 8007338:	b13c      	cbz	r4, 800734a <_Bfree+0x3a>
 800733a:	69eb      	ldr	r3, [r5, #28]
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007344:	6021      	str	r1, [r4, #0]
 8007346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	08008189 	.word	0x08008189
 8007350:	08008209 	.word	0x08008209

08007354 <__multadd>:
 8007354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007358:	4607      	mov	r7, r0
 800735a:	460c      	mov	r4, r1
 800735c:	461e      	mov	r6, r3
 800735e:	2000      	movs	r0, #0
 8007360:	690d      	ldr	r5, [r1, #16]
 8007362:	f101 0c14 	add.w	ip, r1, #20
 8007366:	f8dc 3000 	ldr.w	r3, [ip]
 800736a:	3001      	adds	r0, #1
 800736c:	b299      	uxth	r1, r3
 800736e:	fb02 6101 	mla	r1, r2, r1, r6
 8007372:	0c1e      	lsrs	r6, r3, #16
 8007374:	0c0b      	lsrs	r3, r1, #16
 8007376:	fb02 3306 	mla	r3, r2, r6, r3
 800737a:	b289      	uxth	r1, r1
 800737c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007380:	4285      	cmp	r5, r0
 8007382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007386:	f84c 1b04 	str.w	r1, [ip], #4
 800738a:	dcec      	bgt.n	8007366 <__multadd+0x12>
 800738c:	b30e      	cbz	r6, 80073d2 <__multadd+0x7e>
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	42ab      	cmp	r3, r5
 8007392:	dc19      	bgt.n	80073c8 <__multadd+0x74>
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4638      	mov	r0, r7
 8007398:	3101      	adds	r1, #1
 800739a:	f7ff ff79 	bl	8007290 <_Balloc>
 800739e:	4680      	mov	r8, r0
 80073a0:	b928      	cbnz	r0, 80073ae <__multadd+0x5a>
 80073a2:	4602      	mov	r2, r0
 80073a4:	21ba      	movs	r1, #186	@ 0xba
 80073a6:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <__multadd+0x84>)
 80073a8:	480c      	ldr	r0, [pc, #48]	@ (80073dc <__multadd+0x88>)
 80073aa:	f000 fd75 	bl	8007e98 <__assert_func>
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	f104 010c 	add.w	r1, r4, #12
 80073b4:	3202      	adds	r2, #2
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	300c      	adds	r0, #12
 80073ba:	f7ff f8c0 	bl	800653e <memcpy>
 80073be:	4621      	mov	r1, r4
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ffa5 	bl	8007310 <_Bfree>
 80073c6:	4644      	mov	r4, r8
 80073c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073cc:	3501      	adds	r5, #1
 80073ce:	615e      	str	r6, [r3, #20]
 80073d0:	6125      	str	r5, [r4, #16]
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	080081f8 	.word	0x080081f8
 80073dc:	08008209 	.word	0x08008209

080073e0 <__hi0bits>:
 80073e0:	4603      	mov	r3, r0
 80073e2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073e6:	bf3a      	itte	cc
 80073e8:	0403      	lslcc	r3, r0, #16
 80073ea:	2010      	movcc	r0, #16
 80073ec:	2000      	movcs	r0, #0
 80073ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073f2:	bf3c      	itt	cc
 80073f4:	021b      	lslcc	r3, r3, #8
 80073f6:	3008      	addcc	r0, #8
 80073f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073fc:	bf3c      	itt	cc
 80073fe:	011b      	lslcc	r3, r3, #4
 8007400:	3004      	addcc	r0, #4
 8007402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007406:	bf3c      	itt	cc
 8007408:	009b      	lslcc	r3, r3, #2
 800740a:	3002      	addcc	r0, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	db05      	blt.n	800741c <__hi0bits+0x3c>
 8007410:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007414:	f100 0001 	add.w	r0, r0, #1
 8007418:	bf08      	it	eq
 800741a:	2020      	moveq	r0, #32
 800741c:	4770      	bx	lr

0800741e <__lo0bits>:
 800741e:	6803      	ldr	r3, [r0, #0]
 8007420:	4602      	mov	r2, r0
 8007422:	f013 0007 	ands.w	r0, r3, #7
 8007426:	d00b      	beq.n	8007440 <__lo0bits+0x22>
 8007428:	07d9      	lsls	r1, r3, #31
 800742a:	d421      	bmi.n	8007470 <__lo0bits+0x52>
 800742c:	0798      	lsls	r0, r3, #30
 800742e:	bf49      	itett	mi
 8007430:	085b      	lsrmi	r3, r3, #1
 8007432:	089b      	lsrpl	r3, r3, #2
 8007434:	2001      	movmi	r0, #1
 8007436:	6013      	strmi	r3, [r2, #0]
 8007438:	bf5c      	itt	pl
 800743a:	2002      	movpl	r0, #2
 800743c:	6013      	strpl	r3, [r2, #0]
 800743e:	4770      	bx	lr
 8007440:	b299      	uxth	r1, r3
 8007442:	b909      	cbnz	r1, 8007448 <__lo0bits+0x2a>
 8007444:	2010      	movs	r0, #16
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	b2d9      	uxtb	r1, r3
 800744a:	b909      	cbnz	r1, 8007450 <__lo0bits+0x32>
 800744c:	3008      	adds	r0, #8
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	0719      	lsls	r1, r3, #28
 8007452:	bf04      	itt	eq
 8007454:	091b      	lsreq	r3, r3, #4
 8007456:	3004      	addeq	r0, #4
 8007458:	0799      	lsls	r1, r3, #30
 800745a:	bf04      	itt	eq
 800745c:	089b      	lsreq	r3, r3, #2
 800745e:	3002      	addeq	r0, #2
 8007460:	07d9      	lsls	r1, r3, #31
 8007462:	d403      	bmi.n	800746c <__lo0bits+0x4e>
 8007464:	085b      	lsrs	r3, r3, #1
 8007466:	f100 0001 	add.w	r0, r0, #1
 800746a:	d003      	beq.n	8007474 <__lo0bits+0x56>
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	4770      	bx	lr
 8007470:	2000      	movs	r0, #0
 8007472:	4770      	bx	lr
 8007474:	2020      	movs	r0, #32
 8007476:	4770      	bx	lr

08007478 <__i2b>:
 8007478:	b510      	push	{r4, lr}
 800747a:	460c      	mov	r4, r1
 800747c:	2101      	movs	r1, #1
 800747e:	f7ff ff07 	bl	8007290 <_Balloc>
 8007482:	4602      	mov	r2, r0
 8007484:	b928      	cbnz	r0, 8007492 <__i2b+0x1a>
 8007486:	f240 1145 	movw	r1, #325	@ 0x145
 800748a:	4b04      	ldr	r3, [pc, #16]	@ (800749c <__i2b+0x24>)
 800748c:	4804      	ldr	r0, [pc, #16]	@ (80074a0 <__i2b+0x28>)
 800748e:	f000 fd03 	bl	8007e98 <__assert_func>
 8007492:	2301      	movs	r3, #1
 8007494:	6144      	str	r4, [r0, #20]
 8007496:	6103      	str	r3, [r0, #16]
 8007498:	bd10      	pop	{r4, pc}
 800749a:	bf00      	nop
 800749c:	080081f8 	.word	0x080081f8
 80074a0:	08008209 	.word	0x08008209

080074a4 <__multiply>:
 80074a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	4614      	mov	r4, r2
 80074aa:	690a      	ldr	r2, [r1, #16]
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	460f      	mov	r7, r1
 80074b0:	429a      	cmp	r2, r3
 80074b2:	bfa2      	ittt	ge
 80074b4:	4623      	movge	r3, r4
 80074b6:	460c      	movge	r4, r1
 80074b8:	461f      	movge	r7, r3
 80074ba:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80074be:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	6861      	ldr	r1, [r4, #4]
 80074c6:	eb0a 0609 	add.w	r6, sl, r9
 80074ca:	42b3      	cmp	r3, r6
 80074cc:	b085      	sub	sp, #20
 80074ce:	bfb8      	it	lt
 80074d0:	3101      	addlt	r1, #1
 80074d2:	f7ff fedd 	bl	8007290 <_Balloc>
 80074d6:	b930      	cbnz	r0, 80074e6 <__multiply+0x42>
 80074d8:	4602      	mov	r2, r0
 80074da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074de:	4b43      	ldr	r3, [pc, #268]	@ (80075ec <__multiply+0x148>)
 80074e0:	4843      	ldr	r0, [pc, #268]	@ (80075f0 <__multiply+0x14c>)
 80074e2:	f000 fcd9 	bl	8007e98 <__assert_func>
 80074e6:	f100 0514 	add.w	r5, r0, #20
 80074ea:	462b      	mov	r3, r5
 80074ec:	2200      	movs	r2, #0
 80074ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074f2:	4543      	cmp	r3, r8
 80074f4:	d321      	bcc.n	800753a <__multiply+0x96>
 80074f6:	f107 0114 	add.w	r1, r7, #20
 80074fa:	f104 0214 	add.w	r2, r4, #20
 80074fe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007502:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007506:	9302      	str	r3, [sp, #8]
 8007508:	1b13      	subs	r3, r2, r4
 800750a:	3b15      	subs	r3, #21
 800750c:	f023 0303 	bic.w	r3, r3, #3
 8007510:	3304      	adds	r3, #4
 8007512:	f104 0715 	add.w	r7, r4, #21
 8007516:	42ba      	cmp	r2, r7
 8007518:	bf38      	it	cc
 800751a:	2304      	movcc	r3, #4
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	9b02      	ldr	r3, [sp, #8]
 8007520:	9103      	str	r1, [sp, #12]
 8007522:	428b      	cmp	r3, r1
 8007524:	d80c      	bhi.n	8007540 <__multiply+0x9c>
 8007526:	2e00      	cmp	r6, #0
 8007528:	dd03      	ble.n	8007532 <__multiply+0x8e>
 800752a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800752e:	2b00      	cmp	r3, #0
 8007530:	d05a      	beq.n	80075e8 <__multiply+0x144>
 8007532:	6106      	str	r6, [r0, #16]
 8007534:	b005      	add	sp, #20
 8007536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753a:	f843 2b04 	str.w	r2, [r3], #4
 800753e:	e7d8      	b.n	80074f2 <__multiply+0x4e>
 8007540:	f8b1 a000 	ldrh.w	sl, [r1]
 8007544:	f1ba 0f00 	cmp.w	sl, #0
 8007548:	d023      	beq.n	8007592 <__multiply+0xee>
 800754a:	46a9      	mov	r9, r5
 800754c:	f04f 0c00 	mov.w	ip, #0
 8007550:	f104 0e14 	add.w	lr, r4, #20
 8007554:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007558:	f8d9 3000 	ldr.w	r3, [r9]
 800755c:	fa1f fb87 	uxth.w	fp, r7
 8007560:	b29b      	uxth	r3, r3
 8007562:	fb0a 330b 	mla	r3, sl, fp, r3
 8007566:	4463      	add	r3, ip
 8007568:	f8d9 c000 	ldr.w	ip, [r9]
 800756c:	0c3f      	lsrs	r7, r7, #16
 800756e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007572:	fb0a c707 	mla	r7, sl, r7, ip
 8007576:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800757a:	b29b      	uxth	r3, r3
 800757c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007580:	4572      	cmp	r2, lr
 8007582:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007586:	f849 3b04 	str.w	r3, [r9], #4
 800758a:	d8e3      	bhi.n	8007554 <__multiply+0xb0>
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	f845 c003 	str.w	ip, [r5, r3]
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	3104      	adds	r1, #4
 8007596:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800759a:	f1b9 0f00 	cmp.w	r9, #0
 800759e:	d021      	beq.n	80075e4 <__multiply+0x140>
 80075a0:	46ae      	mov	lr, r5
 80075a2:	f04f 0a00 	mov.w	sl, #0
 80075a6:	682b      	ldr	r3, [r5, #0]
 80075a8:	f104 0c14 	add.w	ip, r4, #20
 80075ac:	f8bc b000 	ldrh.w	fp, [ip]
 80075b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	fb09 770b 	mla	r7, r9, fp, r7
 80075ba:	4457      	add	r7, sl
 80075bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075c0:	f84e 3b04 	str.w	r3, [lr], #4
 80075c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075cc:	f8be 3000 	ldrh.w	r3, [lr]
 80075d0:	4562      	cmp	r2, ip
 80075d2:	fb09 330a 	mla	r3, r9, sl, r3
 80075d6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075de:	d8e5      	bhi.n	80075ac <__multiply+0x108>
 80075e0:	9f01      	ldr	r7, [sp, #4]
 80075e2:	51eb      	str	r3, [r5, r7]
 80075e4:	3504      	adds	r5, #4
 80075e6:	e79a      	b.n	800751e <__multiply+0x7a>
 80075e8:	3e01      	subs	r6, #1
 80075ea:	e79c      	b.n	8007526 <__multiply+0x82>
 80075ec:	080081f8 	.word	0x080081f8
 80075f0:	08008209 	.word	0x08008209

080075f4 <__pow5mult>:
 80075f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f8:	4615      	mov	r5, r2
 80075fa:	f012 0203 	ands.w	r2, r2, #3
 80075fe:	4607      	mov	r7, r0
 8007600:	460e      	mov	r6, r1
 8007602:	d007      	beq.n	8007614 <__pow5mult+0x20>
 8007604:	4c25      	ldr	r4, [pc, #148]	@ (800769c <__pow5mult+0xa8>)
 8007606:	3a01      	subs	r2, #1
 8007608:	2300      	movs	r3, #0
 800760a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800760e:	f7ff fea1 	bl	8007354 <__multadd>
 8007612:	4606      	mov	r6, r0
 8007614:	10ad      	asrs	r5, r5, #2
 8007616:	d03d      	beq.n	8007694 <__pow5mult+0xa0>
 8007618:	69fc      	ldr	r4, [r7, #28]
 800761a:	b97c      	cbnz	r4, 800763c <__pow5mult+0x48>
 800761c:	2010      	movs	r0, #16
 800761e:	f7fe f891 	bl	8005744 <malloc>
 8007622:	4602      	mov	r2, r0
 8007624:	61f8      	str	r0, [r7, #28]
 8007626:	b928      	cbnz	r0, 8007634 <__pow5mult+0x40>
 8007628:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800762c:	4b1c      	ldr	r3, [pc, #112]	@ (80076a0 <__pow5mult+0xac>)
 800762e:	481d      	ldr	r0, [pc, #116]	@ (80076a4 <__pow5mult+0xb0>)
 8007630:	f000 fc32 	bl	8007e98 <__assert_func>
 8007634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007638:	6004      	str	r4, [r0, #0]
 800763a:	60c4      	str	r4, [r0, #12]
 800763c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007644:	b94c      	cbnz	r4, 800765a <__pow5mult+0x66>
 8007646:	f240 2171 	movw	r1, #625	@ 0x271
 800764a:	4638      	mov	r0, r7
 800764c:	f7ff ff14 	bl	8007478 <__i2b>
 8007650:	2300      	movs	r3, #0
 8007652:	4604      	mov	r4, r0
 8007654:	f8c8 0008 	str.w	r0, [r8, #8]
 8007658:	6003      	str	r3, [r0, #0]
 800765a:	f04f 0900 	mov.w	r9, #0
 800765e:	07eb      	lsls	r3, r5, #31
 8007660:	d50a      	bpl.n	8007678 <__pow5mult+0x84>
 8007662:	4631      	mov	r1, r6
 8007664:	4622      	mov	r2, r4
 8007666:	4638      	mov	r0, r7
 8007668:	f7ff ff1c 	bl	80074a4 <__multiply>
 800766c:	4680      	mov	r8, r0
 800766e:	4631      	mov	r1, r6
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff fe4d 	bl	8007310 <_Bfree>
 8007676:	4646      	mov	r6, r8
 8007678:	106d      	asrs	r5, r5, #1
 800767a:	d00b      	beq.n	8007694 <__pow5mult+0xa0>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	b938      	cbnz	r0, 8007690 <__pow5mult+0x9c>
 8007680:	4622      	mov	r2, r4
 8007682:	4621      	mov	r1, r4
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ff0d 	bl	80074a4 <__multiply>
 800768a:	6020      	str	r0, [r4, #0]
 800768c:	f8c0 9000 	str.w	r9, [r0]
 8007690:	4604      	mov	r4, r0
 8007692:	e7e4      	b.n	800765e <__pow5mult+0x6a>
 8007694:	4630      	mov	r0, r6
 8007696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769a:	bf00      	nop
 800769c:	08008264 	.word	0x08008264
 80076a0:	08008189 	.word	0x08008189
 80076a4:	08008209 	.word	0x08008209

080076a8 <__lshift>:
 80076a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	460c      	mov	r4, r1
 80076ae:	4607      	mov	r7, r0
 80076b0:	4691      	mov	r9, r2
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	6849      	ldr	r1, [r1, #4]
 80076b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076ba:	68a3      	ldr	r3, [r4, #8]
 80076bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076c0:	f108 0601 	add.w	r6, r8, #1
 80076c4:	42b3      	cmp	r3, r6
 80076c6:	db0b      	blt.n	80076e0 <__lshift+0x38>
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff fde1 	bl	8007290 <_Balloc>
 80076ce:	4605      	mov	r5, r0
 80076d0:	b948      	cbnz	r0, 80076e6 <__lshift+0x3e>
 80076d2:	4602      	mov	r2, r0
 80076d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076d8:	4b27      	ldr	r3, [pc, #156]	@ (8007778 <__lshift+0xd0>)
 80076da:	4828      	ldr	r0, [pc, #160]	@ (800777c <__lshift+0xd4>)
 80076dc:	f000 fbdc 	bl	8007e98 <__assert_func>
 80076e0:	3101      	adds	r1, #1
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	e7ee      	b.n	80076c4 <__lshift+0x1c>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f100 0114 	add.w	r1, r0, #20
 80076ec:	f100 0210 	add.w	r2, r0, #16
 80076f0:	4618      	mov	r0, r3
 80076f2:	4553      	cmp	r3, sl
 80076f4:	db33      	blt.n	800775e <__lshift+0xb6>
 80076f6:	6920      	ldr	r0, [r4, #16]
 80076f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076fc:	f104 0314 	add.w	r3, r4, #20
 8007700:	f019 091f 	ands.w	r9, r9, #31
 8007704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800770c:	d02b      	beq.n	8007766 <__lshift+0xbe>
 800770e:	468a      	mov	sl, r1
 8007710:	2200      	movs	r2, #0
 8007712:	f1c9 0e20 	rsb	lr, r9, #32
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	fa00 f009 	lsl.w	r0, r0, r9
 800771c:	4310      	orrs	r0, r2
 800771e:	f84a 0b04 	str.w	r0, [sl], #4
 8007722:	f853 2b04 	ldr.w	r2, [r3], #4
 8007726:	459c      	cmp	ip, r3
 8007728:	fa22 f20e 	lsr.w	r2, r2, lr
 800772c:	d8f3      	bhi.n	8007716 <__lshift+0x6e>
 800772e:	ebac 0304 	sub.w	r3, ip, r4
 8007732:	3b15      	subs	r3, #21
 8007734:	f023 0303 	bic.w	r3, r3, #3
 8007738:	3304      	adds	r3, #4
 800773a:	f104 0015 	add.w	r0, r4, #21
 800773e:	4584      	cmp	ip, r0
 8007740:	bf38      	it	cc
 8007742:	2304      	movcc	r3, #4
 8007744:	50ca      	str	r2, [r1, r3]
 8007746:	b10a      	cbz	r2, 800774c <__lshift+0xa4>
 8007748:	f108 0602 	add.w	r6, r8, #2
 800774c:	3e01      	subs	r6, #1
 800774e:	4638      	mov	r0, r7
 8007750:	4621      	mov	r1, r4
 8007752:	612e      	str	r6, [r5, #16]
 8007754:	f7ff fddc 	bl	8007310 <_Bfree>
 8007758:	4628      	mov	r0, r5
 800775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007762:	3301      	adds	r3, #1
 8007764:	e7c5      	b.n	80076f2 <__lshift+0x4a>
 8007766:	3904      	subs	r1, #4
 8007768:	f853 2b04 	ldr.w	r2, [r3], #4
 800776c:	459c      	cmp	ip, r3
 800776e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007772:	d8f9      	bhi.n	8007768 <__lshift+0xc0>
 8007774:	e7ea      	b.n	800774c <__lshift+0xa4>
 8007776:	bf00      	nop
 8007778:	080081f8 	.word	0x080081f8
 800777c:	08008209 	.word	0x08008209

08007780 <__mcmp>:
 8007780:	4603      	mov	r3, r0
 8007782:	690a      	ldr	r2, [r1, #16]
 8007784:	6900      	ldr	r0, [r0, #16]
 8007786:	b530      	push	{r4, r5, lr}
 8007788:	1a80      	subs	r0, r0, r2
 800778a:	d10e      	bne.n	80077aa <__mcmp+0x2a>
 800778c:	3314      	adds	r3, #20
 800778e:	3114      	adds	r1, #20
 8007790:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007794:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800779c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077a0:	4295      	cmp	r5, r2
 80077a2:	d003      	beq.n	80077ac <__mcmp+0x2c>
 80077a4:	d205      	bcs.n	80077b2 <__mcmp+0x32>
 80077a6:	f04f 30ff 	mov.w	r0, #4294967295
 80077aa:	bd30      	pop	{r4, r5, pc}
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	d3f3      	bcc.n	8007798 <__mcmp+0x18>
 80077b0:	e7fb      	b.n	80077aa <__mcmp+0x2a>
 80077b2:	2001      	movs	r0, #1
 80077b4:	e7f9      	b.n	80077aa <__mcmp+0x2a>
	...

080077b8 <__mdiff>:
 80077b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	4689      	mov	r9, r1
 80077be:	4606      	mov	r6, r0
 80077c0:	4611      	mov	r1, r2
 80077c2:	4648      	mov	r0, r9
 80077c4:	4614      	mov	r4, r2
 80077c6:	f7ff ffdb 	bl	8007780 <__mcmp>
 80077ca:	1e05      	subs	r5, r0, #0
 80077cc:	d112      	bne.n	80077f4 <__mdiff+0x3c>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff fd5d 	bl	8007290 <_Balloc>
 80077d6:	4602      	mov	r2, r0
 80077d8:	b928      	cbnz	r0, 80077e6 <__mdiff+0x2e>
 80077da:	f240 2137 	movw	r1, #567	@ 0x237
 80077de:	4b3e      	ldr	r3, [pc, #248]	@ (80078d8 <__mdiff+0x120>)
 80077e0:	483e      	ldr	r0, [pc, #248]	@ (80078dc <__mdiff+0x124>)
 80077e2:	f000 fb59 	bl	8007e98 <__assert_func>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077ec:	4610      	mov	r0, r2
 80077ee:	b003      	add	sp, #12
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	bfbc      	itt	lt
 80077f6:	464b      	movlt	r3, r9
 80077f8:	46a1      	movlt	r9, r4
 80077fa:	4630      	mov	r0, r6
 80077fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007800:	bfba      	itte	lt
 8007802:	461c      	movlt	r4, r3
 8007804:	2501      	movlt	r5, #1
 8007806:	2500      	movge	r5, #0
 8007808:	f7ff fd42 	bl	8007290 <_Balloc>
 800780c:	4602      	mov	r2, r0
 800780e:	b918      	cbnz	r0, 8007818 <__mdiff+0x60>
 8007810:	f240 2145 	movw	r1, #581	@ 0x245
 8007814:	4b30      	ldr	r3, [pc, #192]	@ (80078d8 <__mdiff+0x120>)
 8007816:	e7e3      	b.n	80077e0 <__mdiff+0x28>
 8007818:	f100 0b14 	add.w	fp, r0, #20
 800781c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007820:	f109 0310 	add.w	r3, r9, #16
 8007824:	60c5      	str	r5, [r0, #12]
 8007826:	f04f 0c00 	mov.w	ip, #0
 800782a:	f109 0514 	add.w	r5, r9, #20
 800782e:	46d9      	mov	r9, fp
 8007830:	6926      	ldr	r6, [r4, #16]
 8007832:	f104 0e14 	add.w	lr, r4, #20
 8007836:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800783a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007846:	f853 af04 	ldr.w	sl, [r3, #4]!
 800784a:	b281      	uxth	r1, r0
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	fa1f f38a 	uxth.w	r3, sl
 8007852:	1a5b      	subs	r3, r3, r1
 8007854:	0c00      	lsrs	r0, r0, #16
 8007856:	4463      	add	r3, ip
 8007858:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800785c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007866:	4576      	cmp	r6, lr
 8007868:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800786c:	f849 3b04 	str.w	r3, [r9], #4
 8007870:	d8e6      	bhi.n	8007840 <__mdiff+0x88>
 8007872:	1b33      	subs	r3, r6, r4
 8007874:	3b15      	subs	r3, #21
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	3415      	adds	r4, #21
 800787c:	3304      	adds	r3, #4
 800787e:	42a6      	cmp	r6, r4
 8007880:	bf38      	it	cc
 8007882:	2304      	movcc	r3, #4
 8007884:	441d      	add	r5, r3
 8007886:	445b      	add	r3, fp
 8007888:	461e      	mov	r6, r3
 800788a:	462c      	mov	r4, r5
 800788c:	4544      	cmp	r4, r8
 800788e:	d30e      	bcc.n	80078ae <__mdiff+0xf6>
 8007890:	f108 0103 	add.w	r1, r8, #3
 8007894:	1b49      	subs	r1, r1, r5
 8007896:	f021 0103 	bic.w	r1, r1, #3
 800789a:	3d03      	subs	r5, #3
 800789c:	45a8      	cmp	r8, r5
 800789e:	bf38      	it	cc
 80078a0:	2100      	movcc	r1, #0
 80078a2:	440b      	add	r3, r1
 80078a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078a8:	b199      	cbz	r1, 80078d2 <__mdiff+0x11a>
 80078aa:	6117      	str	r7, [r2, #16]
 80078ac:	e79e      	b.n	80077ec <__mdiff+0x34>
 80078ae:	46e6      	mov	lr, ip
 80078b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80078b4:	fa1f fc81 	uxth.w	ip, r1
 80078b8:	44f4      	add	ip, lr
 80078ba:	0c08      	lsrs	r0, r1, #16
 80078bc:	4471      	add	r1, lr
 80078be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078c2:	b289      	uxth	r1, r1
 80078c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078cc:	f846 1b04 	str.w	r1, [r6], #4
 80078d0:	e7dc      	b.n	800788c <__mdiff+0xd4>
 80078d2:	3f01      	subs	r7, #1
 80078d4:	e7e6      	b.n	80078a4 <__mdiff+0xec>
 80078d6:	bf00      	nop
 80078d8:	080081f8 	.word	0x080081f8
 80078dc:	08008209 	.word	0x08008209

080078e0 <__d2b>:
 80078e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80078e4:	2101      	movs	r1, #1
 80078e6:	4690      	mov	r8, r2
 80078e8:	4699      	mov	r9, r3
 80078ea:	9e08      	ldr	r6, [sp, #32]
 80078ec:	f7ff fcd0 	bl	8007290 <_Balloc>
 80078f0:	4604      	mov	r4, r0
 80078f2:	b930      	cbnz	r0, 8007902 <__d2b+0x22>
 80078f4:	4602      	mov	r2, r0
 80078f6:	f240 310f 	movw	r1, #783	@ 0x30f
 80078fa:	4b23      	ldr	r3, [pc, #140]	@ (8007988 <__d2b+0xa8>)
 80078fc:	4823      	ldr	r0, [pc, #140]	@ (800798c <__d2b+0xac>)
 80078fe:	f000 facb 	bl	8007e98 <__assert_func>
 8007902:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007906:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800790a:	b10d      	cbz	r5, 8007910 <__d2b+0x30>
 800790c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	f1b8 0300 	subs.w	r3, r8, #0
 8007916:	d024      	beq.n	8007962 <__d2b+0x82>
 8007918:	4668      	mov	r0, sp
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	f7ff fd7f 	bl	800741e <__lo0bits>
 8007920:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007924:	b1d8      	cbz	r0, 800795e <__d2b+0x7e>
 8007926:	f1c0 0320 	rsb	r3, r0, #32
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	430b      	orrs	r3, r1
 8007930:	40c2      	lsrs	r2, r0
 8007932:	6163      	str	r3, [r4, #20]
 8007934:	9201      	str	r2, [sp, #4]
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	bf0c      	ite	eq
 800793c:	2201      	moveq	r2, #1
 800793e:	2202      	movne	r2, #2
 8007940:	61a3      	str	r3, [r4, #24]
 8007942:	6122      	str	r2, [r4, #16]
 8007944:	b1ad      	cbz	r5, 8007972 <__d2b+0x92>
 8007946:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800794a:	4405      	add	r5, r0
 800794c:	6035      	str	r5, [r6, #0]
 800794e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007954:	6018      	str	r0, [r3, #0]
 8007956:	4620      	mov	r0, r4
 8007958:	b002      	add	sp, #8
 800795a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800795e:	6161      	str	r1, [r4, #20]
 8007960:	e7e9      	b.n	8007936 <__d2b+0x56>
 8007962:	a801      	add	r0, sp, #4
 8007964:	f7ff fd5b 	bl	800741e <__lo0bits>
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	6163      	str	r3, [r4, #20]
 800796e:	3020      	adds	r0, #32
 8007970:	e7e7      	b.n	8007942 <__d2b+0x62>
 8007972:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007976:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800797a:	6030      	str	r0, [r6, #0]
 800797c:	6918      	ldr	r0, [r3, #16]
 800797e:	f7ff fd2f 	bl	80073e0 <__hi0bits>
 8007982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007986:	e7e4      	b.n	8007952 <__d2b+0x72>
 8007988:	080081f8 	.word	0x080081f8
 800798c:	08008209 	.word	0x08008209

08007990 <_malloc_usable_size_r>:
 8007990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007994:	1f18      	subs	r0, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfbc      	itt	lt
 800799a:	580b      	ldrlt	r3, [r1, r0]
 800799c:	18c0      	addlt	r0, r0, r3
 800799e:	4770      	bx	lr

080079a0 <__sfputc_r>:
 80079a0:	6893      	ldr	r3, [r2, #8]
 80079a2:	b410      	push	{r4}
 80079a4:	3b01      	subs	r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	6093      	str	r3, [r2, #8]
 80079aa:	da07      	bge.n	80079bc <__sfputc_r+0x1c>
 80079ac:	6994      	ldr	r4, [r2, #24]
 80079ae:	42a3      	cmp	r3, r4
 80079b0:	db01      	blt.n	80079b6 <__sfputc_r+0x16>
 80079b2:	290a      	cmp	r1, #10
 80079b4:	d102      	bne.n	80079bc <__sfputc_r+0x1c>
 80079b6:	bc10      	pop	{r4}
 80079b8:	f000 b9da 	b.w	8007d70 <__swbuf_r>
 80079bc:	6813      	ldr	r3, [r2, #0]
 80079be:	1c58      	adds	r0, r3, #1
 80079c0:	6010      	str	r0, [r2, #0]
 80079c2:	7019      	strb	r1, [r3, #0]
 80079c4:	4608      	mov	r0, r1
 80079c6:	bc10      	pop	{r4}
 80079c8:	4770      	bx	lr

080079ca <__sfputs_r>:
 80079ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079cc:	4606      	mov	r6, r0
 80079ce:	460f      	mov	r7, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	18d5      	adds	r5, r2, r3
 80079d4:	42ac      	cmp	r4, r5
 80079d6:	d101      	bne.n	80079dc <__sfputs_r+0x12>
 80079d8:	2000      	movs	r0, #0
 80079da:	e007      	b.n	80079ec <__sfputs_r+0x22>
 80079dc:	463a      	mov	r2, r7
 80079de:	4630      	mov	r0, r6
 80079e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e4:	f7ff ffdc 	bl	80079a0 <__sfputc_r>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d1f3      	bne.n	80079d4 <__sfputs_r+0xa>
 80079ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079f0 <_vfiprintf_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	460d      	mov	r5, r1
 80079f6:	4614      	mov	r4, r2
 80079f8:	4698      	mov	r8, r3
 80079fa:	4606      	mov	r6, r0
 80079fc:	b09d      	sub	sp, #116	@ 0x74
 80079fe:	b118      	cbz	r0, 8007a08 <_vfiprintf_r+0x18>
 8007a00:	6a03      	ldr	r3, [r0, #32]
 8007a02:	b90b      	cbnz	r3, 8007a08 <_vfiprintf_r+0x18>
 8007a04:	f7fe fc72 	bl	80062ec <__sinit>
 8007a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d405      	bmi.n	8007a1a <_vfiprintf_r+0x2a>
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	059a      	lsls	r2, r3, #22
 8007a12:	d402      	bmi.n	8007a1a <_vfiprintf_r+0x2a>
 8007a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a16:	f7fe fd82 	bl	800651e <__retarget_lock_acquire_recursive>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	071b      	lsls	r3, r3, #28
 8007a1e:	d501      	bpl.n	8007a24 <_vfiprintf_r+0x34>
 8007a20:	692b      	ldr	r3, [r5, #16]
 8007a22:	b99b      	cbnz	r3, 8007a4c <_vfiprintf_r+0x5c>
 8007a24:	4629      	mov	r1, r5
 8007a26:	4630      	mov	r0, r6
 8007a28:	f000 f9e0 	bl	8007dec <__swsetup_r>
 8007a2c:	b170      	cbz	r0, 8007a4c <_vfiprintf_r+0x5c>
 8007a2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a30:	07dc      	lsls	r4, r3, #31
 8007a32:	d504      	bpl.n	8007a3e <_vfiprintf_r+0x4e>
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	b01d      	add	sp, #116	@ 0x74
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	0598      	lsls	r0, r3, #22
 8007a42:	d4f7      	bmi.n	8007a34 <_vfiprintf_r+0x44>
 8007a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a46:	f7fe fd6b 	bl	8006520 <__retarget_lock_release_recursive>
 8007a4a:	e7f3      	b.n	8007a34 <_vfiprintf_r+0x44>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a50:	2320      	movs	r3, #32
 8007a52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a56:	2330      	movs	r3, #48	@ 0x30
 8007a58:	f04f 0901 	mov.w	r9, #1
 8007a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007c0c <_vfiprintf_r+0x21c>
 8007a64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a68:	4623      	mov	r3, r4
 8007a6a:	469a      	mov	sl, r3
 8007a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a70:	b10a      	cbz	r2, 8007a76 <_vfiprintf_r+0x86>
 8007a72:	2a25      	cmp	r2, #37	@ 0x25
 8007a74:	d1f9      	bne.n	8007a6a <_vfiprintf_r+0x7a>
 8007a76:	ebba 0b04 	subs.w	fp, sl, r4
 8007a7a:	d00b      	beq.n	8007a94 <_vfiprintf_r+0xa4>
 8007a7c:	465b      	mov	r3, fp
 8007a7e:	4622      	mov	r2, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ffa1 	bl	80079ca <__sfputs_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f000 80a7 	beq.w	8007bdc <_vfiprintf_r+0x1ec>
 8007a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a90:	445a      	add	r2, fp
 8007a92:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a94:	f89a 3000 	ldrb.w	r3, [sl]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 809f 	beq.w	8007bdc <_vfiprintf_r+0x1ec>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa8:	f10a 0a01 	add.w	sl, sl, #1
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	9307      	str	r3, [sp, #28]
 8007ab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ab4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ab6:	4654      	mov	r4, sl
 8007ab8:	2205      	movs	r2, #5
 8007aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abe:	4853      	ldr	r0, [pc, #332]	@ (8007c0c <_vfiprintf_r+0x21c>)
 8007ac0:	f7fe fd2f 	bl	8006522 <memchr>
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	b9d8      	cbnz	r0, 8007b00 <_vfiprintf_r+0x110>
 8007ac8:	06d1      	lsls	r1, r2, #27
 8007aca:	bf44      	itt	mi
 8007acc:	2320      	movmi	r3, #32
 8007ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ad2:	0713      	lsls	r3, r2, #28
 8007ad4:	bf44      	itt	mi
 8007ad6:	232b      	movmi	r3, #43	@ 0x2b
 8007ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007adc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ae2:	d015      	beq.n	8007b10 <_vfiprintf_r+0x120>
 8007ae4:	4654      	mov	r4, sl
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	f04f 0c0a 	mov.w	ip, #10
 8007aec:	9a07      	ldr	r2, [sp, #28]
 8007aee:	4621      	mov	r1, r4
 8007af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007af4:	3b30      	subs	r3, #48	@ 0x30
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	d94b      	bls.n	8007b92 <_vfiprintf_r+0x1a2>
 8007afa:	b1b0      	cbz	r0, 8007b2a <_vfiprintf_r+0x13a>
 8007afc:	9207      	str	r2, [sp, #28]
 8007afe:	e014      	b.n	8007b2a <_vfiprintf_r+0x13a>
 8007b00:	eba0 0308 	sub.w	r3, r0, r8
 8007b04:	fa09 f303 	lsl.w	r3, r9, r3
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	46a2      	mov	sl, r4
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	e7d2      	b.n	8007ab6 <_vfiprintf_r+0xc6>
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	1d19      	adds	r1, r3, #4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	9103      	str	r1, [sp, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfbb      	ittet	lt
 8007b1c:	425b      	neglt	r3, r3
 8007b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b22:	9307      	strge	r3, [sp, #28]
 8007b24:	9307      	strlt	r3, [sp, #28]
 8007b26:	bfb8      	it	lt
 8007b28:	9204      	strlt	r2, [sp, #16]
 8007b2a:	7823      	ldrb	r3, [r4, #0]
 8007b2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b2e:	d10a      	bne.n	8007b46 <_vfiprintf_r+0x156>
 8007b30:	7863      	ldrb	r3, [r4, #1]
 8007b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b34:	d132      	bne.n	8007b9c <_vfiprintf_r+0x1ac>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	3402      	adds	r4, #2
 8007b3a:	1d1a      	adds	r2, r3, #4
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	9203      	str	r2, [sp, #12]
 8007b40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007c10 <_vfiprintf_r+0x220>
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	7821      	ldrb	r1, [r4, #0]
 8007b50:	f7fe fce7 	bl	8006522 <memchr>
 8007b54:	b138      	cbz	r0, 8007b66 <_vfiprintf_r+0x176>
 8007b56:	2240      	movs	r2, #64	@ 0x40
 8007b58:	9b04      	ldr	r3, [sp, #16]
 8007b5a:	eba0 000a 	sub.w	r0, r0, sl
 8007b5e:	4082      	lsls	r2, r0
 8007b60:	4313      	orrs	r3, r2
 8007b62:	3401      	adds	r4, #1
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6a:	2206      	movs	r2, #6
 8007b6c:	4829      	ldr	r0, [pc, #164]	@ (8007c14 <_vfiprintf_r+0x224>)
 8007b6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b72:	f7fe fcd6 	bl	8006522 <memchr>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d03f      	beq.n	8007bfa <_vfiprintf_r+0x20a>
 8007b7a:	4b27      	ldr	r3, [pc, #156]	@ (8007c18 <_vfiprintf_r+0x228>)
 8007b7c:	bb1b      	cbnz	r3, 8007bc6 <_vfiprintf_r+0x1d6>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	3307      	adds	r3, #7
 8007b82:	f023 0307 	bic.w	r3, r3, #7
 8007b86:	3308      	adds	r3, #8
 8007b88:	9303      	str	r3, [sp, #12]
 8007b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8c:	443b      	add	r3, r7
 8007b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b90:	e76a      	b.n	8007a68 <_vfiprintf_r+0x78>
 8007b92:	460c      	mov	r4, r1
 8007b94:	2001      	movs	r0, #1
 8007b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b9a:	e7a8      	b.n	8007aee <_vfiprintf_r+0xfe>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f04f 0c0a 	mov.w	ip, #10
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	3401      	adds	r4, #1
 8007ba6:	9305      	str	r3, [sp, #20]
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bae:	3a30      	subs	r2, #48	@ 0x30
 8007bb0:	2a09      	cmp	r2, #9
 8007bb2:	d903      	bls.n	8007bbc <_vfiprintf_r+0x1cc>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0c6      	beq.n	8007b46 <_vfiprintf_r+0x156>
 8007bb8:	9105      	str	r1, [sp, #20]
 8007bba:	e7c4      	b.n	8007b46 <_vfiprintf_r+0x156>
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bc4:	e7f0      	b.n	8007ba8 <_vfiprintf_r+0x1b8>
 8007bc6:	ab03      	add	r3, sp, #12
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	462a      	mov	r2, r5
 8007bcc:	4630      	mov	r0, r6
 8007bce:	4b13      	ldr	r3, [pc, #76]	@ (8007c1c <_vfiprintf_r+0x22c>)
 8007bd0:	a904      	add	r1, sp, #16
 8007bd2:	f7fd ff41 	bl	8005a58 <_printf_float>
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	1c78      	adds	r0, r7, #1
 8007bda:	d1d6      	bne.n	8007b8a <_vfiprintf_r+0x19a>
 8007bdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bde:	07d9      	lsls	r1, r3, #31
 8007be0:	d405      	bmi.n	8007bee <_vfiprintf_r+0x1fe>
 8007be2:	89ab      	ldrh	r3, [r5, #12]
 8007be4:	059a      	lsls	r2, r3, #22
 8007be6:	d402      	bmi.n	8007bee <_vfiprintf_r+0x1fe>
 8007be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bea:	f7fe fc99 	bl	8006520 <__retarget_lock_release_recursive>
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	065b      	lsls	r3, r3, #25
 8007bf2:	f53f af1f 	bmi.w	8007a34 <_vfiprintf_r+0x44>
 8007bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bf8:	e71e      	b.n	8007a38 <_vfiprintf_r+0x48>
 8007bfa:	ab03      	add	r3, sp, #12
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	462a      	mov	r2, r5
 8007c00:	4630      	mov	r0, r6
 8007c02:	4b06      	ldr	r3, [pc, #24]	@ (8007c1c <_vfiprintf_r+0x22c>)
 8007c04:	a904      	add	r1, sp, #16
 8007c06:	f7fe f9c5 	bl	8005f94 <_printf_i>
 8007c0a:	e7e4      	b.n	8007bd6 <_vfiprintf_r+0x1e6>
 8007c0c:	08008360 	.word	0x08008360
 8007c10:	08008366 	.word	0x08008366
 8007c14:	0800836a 	.word	0x0800836a
 8007c18:	08005a59 	.word	0x08005a59
 8007c1c:	080079cb 	.word	0x080079cb

08007c20 <__sflush_r>:
 8007c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	0716      	lsls	r6, r2, #28
 8007c28:	4605      	mov	r5, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	d454      	bmi.n	8007cd8 <__sflush_r+0xb8>
 8007c2e:	684b      	ldr	r3, [r1, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dc02      	bgt.n	8007c3a <__sflush_r+0x1a>
 8007c34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dd48      	ble.n	8007ccc <__sflush_r+0xac>
 8007c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c3c:	2e00      	cmp	r6, #0
 8007c3e:	d045      	beq.n	8007ccc <__sflush_r+0xac>
 8007c40:	2300      	movs	r3, #0
 8007c42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c46:	682f      	ldr	r7, [r5, #0]
 8007c48:	6a21      	ldr	r1, [r4, #32]
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	d030      	beq.n	8007cb0 <__sflush_r+0x90>
 8007c4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	0759      	lsls	r1, r3, #29
 8007c54:	d505      	bpl.n	8007c62 <__sflush_r+0x42>
 8007c56:	6863      	ldr	r3, [r4, #4]
 8007c58:	1ad2      	subs	r2, r2, r3
 8007c5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c5c:	b10b      	cbz	r3, 8007c62 <__sflush_r+0x42>
 8007c5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c60:	1ad2      	subs	r2, r2, r3
 8007c62:	2300      	movs	r3, #0
 8007c64:	4628      	mov	r0, r5
 8007c66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c68:	6a21      	ldr	r1, [r4, #32]
 8007c6a:	47b0      	blx	r6
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	d106      	bne.n	8007c80 <__sflush_r+0x60>
 8007c72:	6829      	ldr	r1, [r5, #0]
 8007c74:	291d      	cmp	r1, #29
 8007c76:	d82b      	bhi.n	8007cd0 <__sflush_r+0xb0>
 8007c78:	4a28      	ldr	r2, [pc, #160]	@ (8007d1c <__sflush_r+0xfc>)
 8007c7a:	410a      	asrs	r2, r1
 8007c7c:	07d6      	lsls	r6, r2, #31
 8007c7e:	d427      	bmi.n	8007cd0 <__sflush_r+0xb0>
 8007c80:	2200      	movs	r2, #0
 8007c82:	6062      	str	r2, [r4, #4]
 8007c84:	6922      	ldr	r2, [r4, #16]
 8007c86:	04d9      	lsls	r1, r3, #19
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	d504      	bpl.n	8007c96 <__sflush_r+0x76>
 8007c8c:	1c42      	adds	r2, r0, #1
 8007c8e:	d101      	bne.n	8007c94 <__sflush_r+0x74>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b903      	cbnz	r3, 8007c96 <__sflush_r+0x76>
 8007c94:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c98:	602f      	str	r7, [r5, #0]
 8007c9a:	b1b9      	cbz	r1, 8007ccc <__sflush_r+0xac>
 8007c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ca0:	4299      	cmp	r1, r3
 8007ca2:	d002      	beq.n	8007caa <__sflush_r+0x8a>
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f7ff faab 	bl	8007200 <_free_r>
 8007caa:	2300      	movs	r3, #0
 8007cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cae:	e00d      	b.n	8007ccc <__sflush_r+0xac>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b0      	blx	r6
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	1c50      	adds	r0, r2, #1
 8007cba:	d1c9      	bne.n	8007c50 <__sflush_r+0x30>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0c6      	beq.n	8007c50 <__sflush_r+0x30>
 8007cc2:	2b1d      	cmp	r3, #29
 8007cc4:	d001      	beq.n	8007cca <__sflush_r+0xaa>
 8007cc6:	2b16      	cmp	r3, #22
 8007cc8:	d11d      	bne.n	8007d06 <__sflush_r+0xe6>
 8007cca:	602f      	str	r7, [r5, #0]
 8007ccc:	2000      	movs	r0, #0
 8007cce:	e021      	b.n	8007d14 <__sflush_r+0xf4>
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd4:	b21b      	sxth	r3, r3
 8007cd6:	e01a      	b.n	8007d0e <__sflush_r+0xee>
 8007cd8:	690f      	ldr	r7, [r1, #16]
 8007cda:	2f00      	cmp	r7, #0
 8007cdc:	d0f6      	beq.n	8007ccc <__sflush_r+0xac>
 8007cde:	0793      	lsls	r3, r2, #30
 8007ce0:	bf18      	it	ne
 8007ce2:	2300      	movne	r3, #0
 8007ce4:	680e      	ldr	r6, [r1, #0]
 8007ce6:	bf08      	it	eq
 8007ce8:	694b      	ldreq	r3, [r1, #20]
 8007cea:	1bf6      	subs	r6, r6, r7
 8007cec:	600f      	str	r7, [r1, #0]
 8007cee:	608b      	str	r3, [r1, #8]
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	ddeb      	ble.n	8007ccc <__sflush_r+0xac>
 8007cf4:	4633      	mov	r3, r6
 8007cf6:	463a      	mov	r2, r7
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	6a21      	ldr	r1, [r4, #32]
 8007cfc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007d00:	47e0      	blx	ip
 8007d02:	2800      	cmp	r0, #0
 8007d04:	dc07      	bgt.n	8007d16 <__sflush_r+0xf6>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d12:	81a3      	strh	r3, [r4, #12]
 8007d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d16:	4407      	add	r7, r0
 8007d18:	1a36      	subs	r6, r6, r0
 8007d1a:	e7e9      	b.n	8007cf0 <__sflush_r+0xd0>
 8007d1c:	dfbffffe 	.word	0xdfbffffe

08007d20 <_fflush_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	690b      	ldr	r3, [r1, #16]
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	b913      	cbnz	r3, 8007d30 <_fflush_r+0x10>
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	b118      	cbz	r0, 8007d3a <_fflush_r+0x1a>
 8007d32:	6a03      	ldr	r3, [r0, #32]
 8007d34:	b90b      	cbnz	r3, 8007d3a <_fflush_r+0x1a>
 8007d36:	f7fe fad9 	bl	80062ec <__sinit>
 8007d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f3      	beq.n	8007d2a <_fflush_r+0xa>
 8007d42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d44:	07d0      	lsls	r0, r2, #31
 8007d46:	d404      	bmi.n	8007d52 <_fflush_r+0x32>
 8007d48:	0599      	lsls	r1, r3, #22
 8007d4a:	d402      	bmi.n	8007d52 <_fflush_r+0x32>
 8007d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d4e:	f7fe fbe6 	bl	800651e <__retarget_lock_acquire_recursive>
 8007d52:	4628      	mov	r0, r5
 8007d54:	4621      	mov	r1, r4
 8007d56:	f7ff ff63 	bl	8007c20 <__sflush_r>
 8007d5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	07da      	lsls	r2, r3, #31
 8007d60:	d4e4      	bmi.n	8007d2c <_fflush_r+0xc>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	059b      	lsls	r3, r3, #22
 8007d66:	d4e1      	bmi.n	8007d2c <_fflush_r+0xc>
 8007d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d6a:	f7fe fbd9 	bl	8006520 <__retarget_lock_release_recursive>
 8007d6e:	e7dd      	b.n	8007d2c <_fflush_r+0xc>

08007d70 <__swbuf_r>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	460e      	mov	r6, r1
 8007d74:	4614      	mov	r4, r2
 8007d76:	4605      	mov	r5, r0
 8007d78:	b118      	cbz	r0, 8007d82 <__swbuf_r+0x12>
 8007d7a:	6a03      	ldr	r3, [r0, #32]
 8007d7c:	b90b      	cbnz	r3, 8007d82 <__swbuf_r+0x12>
 8007d7e:	f7fe fab5 	bl	80062ec <__sinit>
 8007d82:	69a3      	ldr	r3, [r4, #24]
 8007d84:	60a3      	str	r3, [r4, #8]
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	071a      	lsls	r2, r3, #28
 8007d8a:	d501      	bpl.n	8007d90 <__swbuf_r+0x20>
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	b943      	cbnz	r3, 8007da2 <__swbuf_r+0x32>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 f82a 	bl	8007dec <__swsetup_r>
 8007d98:	b118      	cbz	r0, 8007da2 <__swbuf_r+0x32>
 8007d9a:	f04f 37ff 	mov.w	r7, #4294967295
 8007d9e:	4638      	mov	r0, r7
 8007da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	b2f6      	uxtb	r6, r6
 8007da8:	1a98      	subs	r0, r3, r2
 8007daa:	6963      	ldr	r3, [r4, #20]
 8007dac:	4637      	mov	r7, r6
 8007dae:	4283      	cmp	r3, r0
 8007db0:	dc05      	bgt.n	8007dbe <__swbuf_r+0x4e>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7ff ffb3 	bl	8007d20 <_fflush_r>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d1ed      	bne.n	8007d9a <__swbuf_r+0x2a>
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	60a3      	str	r3, [r4, #8]
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	6022      	str	r2, [r4, #0]
 8007dca:	701e      	strb	r6, [r3, #0]
 8007dcc:	6962      	ldr	r2, [r4, #20]
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d004      	beq.n	8007dde <__swbuf_r+0x6e>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	07db      	lsls	r3, r3, #31
 8007dd8:	d5e1      	bpl.n	8007d9e <__swbuf_r+0x2e>
 8007dda:	2e0a      	cmp	r6, #10
 8007ddc:	d1df      	bne.n	8007d9e <__swbuf_r+0x2e>
 8007dde:	4621      	mov	r1, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	f7ff ff9d 	bl	8007d20 <_fflush_r>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d0d9      	beq.n	8007d9e <__swbuf_r+0x2e>
 8007dea:	e7d6      	b.n	8007d9a <__swbuf_r+0x2a>

08007dec <__swsetup_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4b29      	ldr	r3, [pc, #164]	@ (8007e94 <__swsetup_r+0xa8>)
 8007df0:	4605      	mov	r5, r0
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	460c      	mov	r4, r1
 8007df6:	b118      	cbz	r0, 8007e00 <__swsetup_r+0x14>
 8007df8:	6a03      	ldr	r3, [r0, #32]
 8007dfa:	b90b      	cbnz	r3, 8007e00 <__swsetup_r+0x14>
 8007dfc:	f7fe fa76 	bl	80062ec <__sinit>
 8007e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e04:	0719      	lsls	r1, r3, #28
 8007e06:	d422      	bmi.n	8007e4e <__swsetup_r+0x62>
 8007e08:	06da      	lsls	r2, r3, #27
 8007e0a:	d407      	bmi.n	8007e1c <__swsetup_r+0x30>
 8007e0c:	2209      	movs	r2, #9
 8007e0e:	602a      	str	r2, [r5, #0]
 8007e10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	81a3      	strh	r3, [r4, #12]
 8007e1a:	e033      	b.n	8007e84 <__swsetup_r+0x98>
 8007e1c:	0758      	lsls	r0, r3, #29
 8007e1e:	d512      	bpl.n	8007e46 <__swsetup_r+0x5a>
 8007e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e22:	b141      	cbz	r1, 8007e36 <__swsetup_r+0x4a>
 8007e24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	d002      	beq.n	8007e32 <__swsetup_r+0x46>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f7ff f9e7 	bl	8007200 <_free_r>
 8007e32:	2300      	movs	r3, #0
 8007e34:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	6063      	str	r3, [r4, #4]
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f043 0308 	orr.w	r3, r3, #8
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	b94b      	cbnz	r3, 8007e66 <__swsetup_r+0x7a>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e5c:	d003      	beq.n	8007e66 <__swsetup_r+0x7a>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 f8a2 	bl	8007faa <__smakebuf_r>
 8007e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e6a:	f013 0201 	ands.w	r2, r3, #1
 8007e6e:	d00a      	beq.n	8007e86 <__swsetup_r+0x9a>
 8007e70:	2200      	movs	r2, #0
 8007e72:	60a2      	str	r2, [r4, #8]
 8007e74:	6962      	ldr	r2, [r4, #20]
 8007e76:	4252      	negs	r2, r2
 8007e78:	61a2      	str	r2, [r4, #24]
 8007e7a:	6922      	ldr	r2, [r4, #16]
 8007e7c:	b942      	cbnz	r2, 8007e90 <__swsetup_r+0xa4>
 8007e7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e82:	d1c5      	bne.n	8007e10 <__swsetup_r+0x24>
 8007e84:	bd38      	pop	{r3, r4, r5, pc}
 8007e86:	0799      	lsls	r1, r3, #30
 8007e88:	bf58      	it	pl
 8007e8a:	6962      	ldrpl	r2, [r4, #20]
 8007e8c:	60a2      	str	r2, [r4, #8]
 8007e8e:	e7f4      	b.n	8007e7a <__swsetup_r+0x8e>
 8007e90:	2000      	movs	r0, #0
 8007e92:	e7f7      	b.n	8007e84 <__swsetup_r+0x98>
 8007e94:	20000024 	.word	0x20000024

08007e98 <__assert_func>:
 8007e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e9a:	4614      	mov	r4, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <__assert_func+0x2c>)
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68d8      	ldr	r0, [r3, #12]
 8007ea6:	b954      	cbnz	r4, 8007ebe <__assert_func+0x26>
 8007ea8:	4b07      	ldr	r3, [pc, #28]	@ (8007ec8 <__assert_func+0x30>)
 8007eaa:	461c      	mov	r4, r3
 8007eac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007eb0:	9100      	str	r1, [sp, #0]
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	4905      	ldr	r1, [pc, #20]	@ (8007ecc <__assert_func+0x34>)
 8007eb6:	f000 f841 	bl	8007f3c <fiprintf>
 8007eba:	f000 f8d5 	bl	8008068 <abort>
 8007ebe:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <__assert_func+0x38>)
 8007ec0:	e7f4      	b.n	8007eac <__assert_func+0x14>
 8007ec2:	bf00      	nop
 8007ec4:	20000024 	.word	0x20000024
 8007ec8:	080083b6 	.word	0x080083b6
 8007ecc:	08008388 	.word	0x08008388
 8007ed0:	0800837b 	.word	0x0800837b

08007ed4 <_calloc_r>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	fba1 5402 	umull	r5, r4, r1, r2
 8007eda:	b93c      	cbnz	r4, 8007eec <_calloc_r+0x18>
 8007edc:	4629      	mov	r1, r5
 8007ede:	f7fd fc5b 	bl	8005798 <_malloc_r>
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	b928      	cbnz	r0, 8007ef2 <_calloc_r+0x1e>
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	4630      	mov	r0, r6
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	220c      	movs	r2, #12
 8007eee:	6002      	str	r2, [r0, #0]
 8007ef0:	e7f9      	b.n	8007ee6 <_calloc_r+0x12>
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f7fe fa84 	bl	8006402 <memset>
 8007efa:	e7f5      	b.n	8007ee8 <_calloc_r+0x14>

08007efc <__ascii_mbtowc>:
 8007efc:	b082      	sub	sp, #8
 8007efe:	b901      	cbnz	r1, 8007f02 <__ascii_mbtowc+0x6>
 8007f00:	a901      	add	r1, sp, #4
 8007f02:	b142      	cbz	r2, 8007f16 <__ascii_mbtowc+0x1a>
 8007f04:	b14b      	cbz	r3, 8007f1a <__ascii_mbtowc+0x1e>
 8007f06:	7813      	ldrb	r3, [r2, #0]
 8007f08:	600b      	str	r3, [r1, #0]
 8007f0a:	7812      	ldrb	r2, [r2, #0]
 8007f0c:	1e10      	subs	r0, r2, #0
 8007f0e:	bf18      	it	ne
 8007f10:	2001      	movne	r0, #1
 8007f12:	b002      	add	sp, #8
 8007f14:	4770      	bx	lr
 8007f16:	4610      	mov	r0, r2
 8007f18:	e7fb      	b.n	8007f12 <__ascii_mbtowc+0x16>
 8007f1a:	f06f 0001 	mvn.w	r0, #1
 8007f1e:	e7f8      	b.n	8007f12 <__ascii_mbtowc+0x16>

08007f20 <__ascii_wctomb>:
 8007f20:	4603      	mov	r3, r0
 8007f22:	4608      	mov	r0, r1
 8007f24:	b141      	cbz	r1, 8007f38 <__ascii_wctomb+0x18>
 8007f26:	2aff      	cmp	r2, #255	@ 0xff
 8007f28:	d904      	bls.n	8007f34 <__ascii_wctomb+0x14>
 8007f2a:	228a      	movs	r2, #138	@ 0x8a
 8007f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	4770      	bx	lr
 8007f34:	2001      	movs	r0, #1
 8007f36:	700a      	strb	r2, [r1, #0]
 8007f38:	4770      	bx	lr
	...

08007f3c <fiprintf>:
 8007f3c:	b40e      	push	{r1, r2, r3}
 8007f3e:	b503      	push	{r0, r1, lr}
 8007f40:	4601      	mov	r1, r0
 8007f42:	ab03      	add	r3, sp, #12
 8007f44:	4805      	ldr	r0, [pc, #20]	@ (8007f5c <fiprintf+0x20>)
 8007f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4a:	6800      	ldr	r0, [r0, #0]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	f7ff fd4f 	bl	80079f0 <_vfiprintf_r>
 8007f52:	b002      	add	sp, #8
 8007f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f58:	b003      	add	sp, #12
 8007f5a:	4770      	bx	lr
 8007f5c:	20000024 	.word	0x20000024

08007f60 <__swhatbuf_r>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	460c      	mov	r4, r1
 8007f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f68:	4615      	mov	r5, r2
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	461e      	mov	r6, r3
 8007f6e:	b096      	sub	sp, #88	@ 0x58
 8007f70:	da0c      	bge.n	8007f8c <__swhatbuf_r+0x2c>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	2100      	movs	r1, #0
 8007f76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f7a:	bf14      	ite	ne
 8007f7c:	2340      	movne	r3, #64	@ 0x40
 8007f7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f82:	2000      	movs	r0, #0
 8007f84:	6031      	str	r1, [r6, #0]
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	b016      	add	sp, #88	@ 0x58
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	466a      	mov	r2, sp
 8007f8e:	f000 f849 	bl	8008024 <_fstat_r>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	dbed      	blt.n	8007f72 <__swhatbuf_r+0x12>
 8007f96:	9901      	ldr	r1, [sp, #4]
 8007f98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fa0:	4259      	negs	r1, r3
 8007fa2:	4159      	adcs	r1, r3
 8007fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fa8:	e7eb      	b.n	8007f82 <__swhatbuf_r+0x22>

08007faa <__smakebuf_r>:
 8007faa:	898b      	ldrh	r3, [r1, #12]
 8007fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fae:	079d      	lsls	r5, r3, #30
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	d507      	bpl.n	8007fc6 <__smakebuf_r+0x1c>
 8007fb6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	6163      	str	r3, [r4, #20]
 8007fc2:	b003      	add	sp, #12
 8007fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc6:	466a      	mov	r2, sp
 8007fc8:	ab01      	add	r3, sp, #4
 8007fca:	f7ff ffc9 	bl	8007f60 <__swhatbuf_r>
 8007fce:	9f00      	ldr	r7, [sp, #0]
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7fd fbdf 	bl	8005798 <_malloc_r>
 8007fda:	b948      	cbnz	r0, 8007ff0 <__smakebuf_r+0x46>
 8007fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe0:	059a      	lsls	r2, r3, #22
 8007fe2:	d4ee      	bmi.n	8007fc2 <__smakebuf_r+0x18>
 8007fe4:	f023 0303 	bic.w	r3, r3, #3
 8007fe8:	f043 0302 	orr.w	r3, r3, #2
 8007fec:	81a3      	strh	r3, [r4, #12]
 8007fee:	e7e2      	b.n	8007fb6 <__smakebuf_r+0xc>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ffa:	81a3      	strh	r3, [r4, #12]
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	6020      	str	r0, [r4, #0]
 8008000:	b15b      	cbz	r3, 800801a <__smakebuf_r+0x70>
 8008002:	4630      	mov	r0, r6
 8008004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008008:	f000 f81e 	bl	8008048 <_isatty_r>
 800800c:	b128      	cbz	r0, 800801a <__smakebuf_r+0x70>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f023 0303 	bic.w	r3, r3, #3
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	81a3      	strh	r3, [r4, #12]
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	431d      	orrs	r5, r3
 800801e:	81a5      	strh	r5, [r4, #12]
 8008020:	e7cf      	b.n	8007fc2 <__smakebuf_r+0x18>
	...

08008024 <_fstat_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	2300      	movs	r3, #0
 8008028:	4d06      	ldr	r5, [pc, #24]	@ (8008044 <_fstat_r+0x20>)
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	4611      	mov	r1, r2
 8008030:	602b      	str	r3, [r5, #0]
 8008032:	f7fa fd96 	bl	8002b62 <_fstat>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	d102      	bne.n	8008040 <_fstat_r+0x1c>
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	b103      	cbz	r3, 8008040 <_fstat_r+0x1c>
 800803e:	6023      	str	r3, [r4, #0]
 8008040:	bd38      	pop	{r3, r4, r5, pc}
 8008042:	bf00      	nop
 8008044:	20000704 	.word	0x20000704

08008048 <_isatty_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	2300      	movs	r3, #0
 800804c:	4d05      	ldr	r5, [pc, #20]	@ (8008064 <_isatty_r+0x1c>)
 800804e:	4604      	mov	r4, r0
 8008050:	4608      	mov	r0, r1
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	f7fa fd8a 	bl	8002b6c <_isatty>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_isatty_r+0x1a>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_isatty_r+0x1a>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	20000704 	.word	0x20000704

08008068 <abort>:
 8008068:	2006      	movs	r0, #6
 800806a:	b508      	push	{r3, lr}
 800806c:	f000 f82c 	bl	80080c8 <raise>
 8008070:	2001      	movs	r0, #1
 8008072:	f7fa fd5d 	bl	8002b30 <_exit>

08008076 <_raise_r>:
 8008076:	291f      	cmp	r1, #31
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4605      	mov	r5, r0
 800807c:	460c      	mov	r4, r1
 800807e:	d904      	bls.n	800808a <_raise_r+0x14>
 8008080:	2316      	movs	r3, #22
 8008082:	6003      	str	r3, [r0, #0]
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	bd38      	pop	{r3, r4, r5, pc}
 800808a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800808c:	b112      	cbz	r2, 8008094 <_raise_r+0x1e>
 800808e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008092:	b94b      	cbnz	r3, 80080a8 <_raise_r+0x32>
 8008094:	4628      	mov	r0, r5
 8008096:	f000 f831 	bl	80080fc <_getpid_r>
 800809a:	4622      	mov	r2, r4
 800809c:	4601      	mov	r1, r0
 800809e:	4628      	mov	r0, r5
 80080a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080a4:	f000 b818 	b.w	80080d8 <_kill_r>
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d00a      	beq.n	80080c2 <_raise_r+0x4c>
 80080ac:	1c59      	adds	r1, r3, #1
 80080ae:	d103      	bne.n	80080b8 <_raise_r+0x42>
 80080b0:	2316      	movs	r3, #22
 80080b2:	6003      	str	r3, [r0, #0]
 80080b4:	2001      	movs	r0, #1
 80080b6:	e7e7      	b.n	8008088 <_raise_r+0x12>
 80080b8:	2100      	movs	r1, #0
 80080ba:	4620      	mov	r0, r4
 80080bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80080c0:	4798      	blx	r3
 80080c2:	2000      	movs	r0, #0
 80080c4:	e7e0      	b.n	8008088 <_raise_r+0x12>
	...

080080c8 <raise>:
 80080c8:	4b02      	ldr	r3, [pc, #8]	@ (80080d4 <raise+0xc>)
 80080ca:	4601      	mov	r1, r0
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	f7ff bfd2 	b.w	8008076 <_raise_r>
 80080d2:	bf00      	nop
 80080d4:	20000024 	.word	0x20000024

080080d8 <_kill_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	2300      	movs	r3, #0
 80080dc:	4d06      	ldr	r5, [pc, #24]	@ (80080f8 <_kill_r+0x20>)
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	f7fa fd1b 	bl	8002b20 <_kill>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d102      	bne.n	80080f4 <_kill_r+0x1c>
 80080ee:	682b      	ldr	r3, [r5, #0]
 80080f0:	b103      	cbz	r3, 80080f4 <_kill_r+0x1c>
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	20000704 	.word	0x20000704

080080fc <_getpid_r>:
 80080fc:	f7fa bd0e 	b.w	8002b1c <_getpid>

08008100 <_init>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr

0800810c <_fini>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	bf00      	nop
 8008110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008112:	bc08      	pop	{r3}
 8008114:	469e      	mov	lr, r3
 8008116:	4770      	bx	lr
